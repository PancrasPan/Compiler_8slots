//===-- DSPSubtarget.h - Define Subtarget for the DSP ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the DSP specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef DSPSUBTARGET_H
#define DSPSUBTARGET_H

#include "DSPFrameLowering.h"
#include "DSPISelLowering.h"
#include "DSPInstrInfo.h"
#include "DSPSelectionDAGInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "DSPGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class DSPTargetMachine;



class DSPSubtarget : public DSPGenSubtargetInfo{
	virtual void anchor();

public:
	enum DSPABIEnum { 
		UnknownABI, O32
	 };

protected:
	enum DSPArchEnum { 
		DSPSE
	 };

	  // DSP architecture version
  DSPArchEnum DSPArchVersion;

  // DSP supported ABIs
  DSPABIEnum DSPABI;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  // IsSingleFloat - The target only supports single precision float
  // point operations. This enable the target to use all 32 32-bit
  // floating point registers instead of only using even ones.
  bool IsSingleFloat;

  Reloc::Model RM;

  DSPTargetMachine *TM;

  Triple TargetTriple;

  bool UseSmallSection = true;

  const DataLayout DL; // Calculates type size & alignment
  const DSPSelectionDAGInfo TSInfo;
  std::unique_ptr<const DSPInstrInfo> InstrInfo;
  std::unique_ptr<const DSPFrameLowering> FrameLowering;
  std::unique_ptr<const DSPTargetLowering> TLInfo;

 public:
 	bool isABI_O32()const { return DSPABI==O32;}
 	unsigned getTargetABI() const { return DSPABI;}
	bool useSmallSection()const { return UseSmallSection; }

 	 /// This constructor initializes the data members to match that
  /// of the specified triple.
  DSPSubtarget(const std::string &TT, const std::string &CPU,
                const std::string &FS, bool little, Reloc::Model RM, DSPTargetMachine *TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle()const {return IsLittle;}
  bool hasDSPSE()const {return DSPArchVersion >= DSPSE;}
  bool isDSPSE() const {return DSPArchVersion == DSPSE;}
  bool isSingleFloat() const { return IsSingleFloat; }
  bool isNotSingleFloat() const { return !IsSingleFloat; }
  bool abiUsesSoftFloat() const;

  unsigned stackAlignment() const { return 8; }

  Reloc::Model getRelocationModel() const;

  InstrItineraryData InstrItins;

  const InstrItineraryData &getInstrItineraryData() const { return InstrItins; }

  DSPSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine *TM);



  const DSPSelectionDAGInfo *getSelectionDAGInfo() const { return &TSInfo; }
  const DataLayout *getDataLayout() const { return &DL; }
  const DSPInstrInfo *getInstrInfo() const { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const {
    return FrameLowering.get();
  }
  const DSPRegisterInfo *getRegisterInfo() const {
    return &InstrInfo->getRegisterInfo();
  }
  const DSPTargetLowering *getTargetLowering() const { return TLInfo.get(); }
    };
  }

  #endif
