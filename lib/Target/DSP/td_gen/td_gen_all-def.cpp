------------- Classes -----------------
class AES_1Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AES_2Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Abs_Fmt<bits<3> Abs_Fmt:type = { ?, ?, ? }, bits<3> Abs_Fmt:op = { ?, ?, ? }, bits<8> Abs_Fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string Abs_Fmt:instr_asm = ?, InstrItinClass Abs_Fmt:itin = ?, RegisterClass Abs_Fmt:RC = ?, bit Abs_Fmt:isComm = 0> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { Abs_Fmt:type{2}, Abs_Fmt:type{1}, Abs_Fmt:type{0}, Abs_Fmt:op{2}, Abs_Fmt:op{1}, Abs_Fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, Abs_Fmt:funct{7}, Abs_Fmt:funct{6}, Abs_Fmt:funct{5}, Abs_Fmt:funct{4}, Abs_Fmt:funct{3}, Abs_Fmt:funct{2}, Abs_Fmt:funct{1}, Abs_Fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins Abs_Fmt:RC:$rb);
  string AsmString = !strconcat(Abs_Fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_abs_qb Abs_Fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = Abs_Fmt:isComm;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Abs_Fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class AdvSIMD_1FloatArg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_124];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1IntArg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_123];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1IntArg_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1Vec_Load_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_156];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1Vec_Store_Lane_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_157];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1VectorArg_Expand_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1VectorArg_Float_Across_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1VectorArg_Int_Across_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1VectorArg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_125];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1VectorArg_Long_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_126];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_1VectorArg_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_127];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2Arg_FloatCompare_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, anonymous_135];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2Arg_Scalar_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_142, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2FloatArg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_130, anonymous_131];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2IntArg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2Scalar_Float_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_121, anonymous_122];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2Vec_Load_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_158];
  list<LLVMType> ParamTypes = [anonymous_160];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2Vec_Load_Lane_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_161];
  list<LLVMType> ParamTypes = [anonymous_162, anonymous_163, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2Vec_Store_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_164, anonymous_166];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_167];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2Vec_Store_Lane_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_168, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_169];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2Vector2Index_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, llvm_i64_ty, anonymous_154, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Compare_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_134];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Long_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_136, anonymous_137];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_140, anonymous_141];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Scalar_Expand_BySize_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Scalar_Wide_BySize_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_143];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Scalar_Wide_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_144, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Tied_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_145, llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_2VectorArg_Wide_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_138, anonymous_139];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_3Vec_Load_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_170, anonymous_171];
  list<LLVMType> ParamTypes = [anonymous_173];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_3Vec_Load_Lane_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_174, anonymous_175];
  list<LLVMType> ParamTypes = [anonymous_176, anonymous_177, anonymous_178, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_3Vec_Store_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_179, anonymous_180, anonymous_182];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_183];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_3Vec_Store_Lane_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_184, anonymous_185, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_186];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_3VectorArg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_146, anonymous_147, anonymous_148];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_3VectorArg_Scalar_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_149, anonymous_150, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_3VectorArg_Scalar_Tied_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_153, llvm_anyvector_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_3VectorArg_Tied_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_151, llvm_anyvector_ty, anonymous_152];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_4Vec_Load_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_187, anonymous_188, anonymous_189];
  list<LLVMType> ParamTypes = [anonymous_191];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_4Vec_Load_Lane_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_192, anonymous_193, anonymous_194];
  list<LLVMType> ParamTypes = [anonymous_195, anonymous_196, anonymous_197, anonymous_198, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_4Vec_Store_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_199, anonymous_200, anonymous_201, anonymous_203];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_204];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_4Vec_Store_Lane_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_205, anonymous_206, anonymous_207, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_208];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_CvtFPToFx_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_CvtFxToFP_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_FPToIntRounding_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_Tbl1_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, anonymous_209];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_Tbl2_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, anonymous_210];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_Tbl3_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_211];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_Tbl4_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_212];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_Tbx1_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_213, llvm_v16i8_ty, anonymous_214];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_Tbx2_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_215, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_216];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_Tbx3_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_217, llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_218];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AdvSIMD_Tbx4_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_219, llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_220];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class AlignedLoad<PatFrag AlignedLoad:Node = ?> {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (AlignedLoad:Node node:$ptr);
  string PredicateCode = "
LoadSDNode *LD = cast<LoadSDNode>(N);
return LD->getMemoryVT().getSizeInBits()/8 <= LD->getAlignment();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = PatFrag:xform;
  string NAME = ?;
}
class AlignedStore<PatFrag AlignedStore:Node = ?> {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (AlignedStore:Node node:$val, node:$ptr);
  string PredicateCode = "
StoreSDNode *SD = cast<StoreSDNode>(N);
return SD->getMemoryVT().getSizeInBits()/8 <= SD->getAlignment();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = PatFrag:xform;
  string NAME = ?;
}
class ArithLogicI<bits<3> ArithLogicI:typeop = { ?, ?, ? }, bits<3> ArithLogicI:op = { ?, ?, ? }, bits<3> ArithLogicI:inner_op = { ?, ?, ? }, string ArithLogicI:instr_asm = ?, SDNode ArithLogicI:OpNode = ?, Operand ArithLogicI:Od = ?, PatLeaf ArithLogicI:imm_type = ?, RegisterClass ArithLogicI:RC = ?> {	// Instruction InstDSP F_2Reg_imm11
  field bits<32> Inst = { ArithLogicI:typeop{2}, ArithLogicI:typeop{1}, ArithLogicI:typeop{0}, ArithLogicI:op{2}, ArithLogicI:op{1}, ArithLogicI:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm11{10}, imm11{9}, imm11{8}, imm11{7}, imm11{6}, imm11{5}, imm11{4}, imm11{3}, imm11{2}, imm11{1}, imm11{0}, ArithLogicI:inner_op{2}, ArithLogicI:inner_op{1}, ArithLogicI:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs ArithLogicI:RC:$ra);
  dag InOperandList = (ins ArithLogicI:RC:$rb, ArithLogicI:Od:$imm11);
  string AsmString = !strconcat(ArithLogicI:instr_asm, "	$ra, $rb, $imm11");
  list<dag> Pattern = [(set ArithLogicI:RC:$ra, (ArithLogicI:OpNode ArithLogicI:RC:$rb, ArithLogicI:imm_type:$imm11))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<11> imm11 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class ArithLogicR<bits<3> ArithLogicR:typeop = { ?, ?, ? }, bits<3> ArithLogicR:op = { ?, ?, ? }, bits<8> ArithLogicR:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string ArithLogicR:instr_asm = ?, SDNode ArithLogicR:OpNode = ?, InstrItinClass ArithLogicR:itin = ?, RegisterClass ArithLogicR:RC = ?, bit ArithLogicR:isComm = 0, bit ArithLogicR:isAlu = 1> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { ArithLogicR:typeop{2}, ArithLogicR:typeop{1}, ArithLogicR:typeop{0}, ArithLogicR:op{2}, ArithLogicR:op{1}, ArithLogicR:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, ArithLogicR:inner_op{7}, ArithLogicR:inner_op{6}, ArithLogicR:inner_op{5}, ArithLogicR:inner_op{4}, ArithLogicR:inner_op{3}, ArithLogicR:inner_op{2}, ArithLogicR:inner_op{1}, ArithLogicR:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs ArithLogicR:RC:$ra);
  dag InOperandList = (ins ArithLogicR:RC:$rb, ArithLogicR:RC:$rc);
  string AsmString = !strconcat(ArithLogicR:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set ArithLogicR:RC:$ra, (ArithLogicR:OpNode ArithLogicR:RC:$rb, ArithLogicR:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = ArithLogicR:isComm;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ArithLogicR:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ArithLogicR:isAlu, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class AsmOperandClass {
  string Name = ?;
  list<AsmOperandClass> SuperClasses = [];
  string PredicateMethod = ?;
  string RenderMethod = ?;
  string ParserMethod = ?;
  string DiagnosticType = "";
  string NAME = ?;
}
class AsmParser {
  string AsmParserClassName = "AsmParser";
  string AsmParserInstCleanup = "";
  bit ShouldEmitMatchRegisterName = 1;
  bit MnemonicContainsDot = 0;
  string NAME = ?;
}
class AsmParserVariant {
  int Variant = 0;
  string Name = "";
  string CommentDelimiter = "";
  string RegisterPrefix = "";
  string NAME = ?;
}
class AsmWriter {
  string AsmWriterClassName = "InstPrinter";
  int Variant = 0;
  int OperandSpacing = -1;
  string NAME = ?;
}
class AssemblerPredicate<string AssemblerPredicate:cond = ?, string AssemblerPredicate:name = ""> {
  bit AssemblerMatcherPredicate = 1;
  string AssemblerCondString = AssemblerPredicate:cond;
  string PredicateName = AssemblerPredicate:name;
  string NAME = ?;
}
class Bypass {
  string NAME = ?;
}
class CBranch<bits<3> CBranch:typeop = { ?, ?, ? }, bits<3> CBranch:op = { ?, ?, ? }, bits<5> CBranch:inner_op = { ?, ?, ?, ?, ? }, string CBranch:instr_asm = ?> {	// Instruction InstDSP F_Special_imm21
  field bits<32> Inst = { CBranch:typeop{2}, CBranch:typeop{1}, CBranch:typeop{0}, CBranch:op{2}, CBranch:op{1}, CBranch:op{0}, imm21{20}, imm21{19}, imm21{18}, imm21{17}, imm21{16}, imm21{15}, imm21{14}, imm21{13}, imm21{12}, imm21{11}, imm21{10}, imm21{9}, imm21{8}, imm21{7}, imm21{6}, imm21{5}, imm21{4}, imm21{3}, imm21{2}, imm21{1}, imm21{0}, CBranch:inner_op{4}, CBranch:inner_op{3}, CBranch:inner_op{2}, CBranch:inner_op{1}, CBranch:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$rt, brtarget:$imm21);
  string AsmString = !strconcat(CBranch:instr_asm, "	 $imm21");
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 1;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<21> imm21 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class CCAction {
  string NAME = ?;
}
class CCAssignToReg<list<Register> CCAssignToReg:regList = ?> {	// CCAction
  list<Register> RegList = CCAssignToReg:regList;
  string NAME = ?;
}
class CCAssignToRegWithShadow<list<Register> CCAssignToRegWithShadow:regList = ?, list<Register> CCAssignToRegWithShadow:shadowList = ?> {	// CCAction
  list<Register> RegList = CCAssignToRegWithShadow:regList;
  list<Register> ShadowRegList = CCAssignToRegWithShadow:shadowList;
  string NAME = ?;
}
class CCAssignToStack<int CCAssignToStack:size = ?, int CCAssignToStack:align = ?> {	// CCAction
  int Size = CCAssignToStack:size;
  int Align = CCAssignToStack:align;
  string NAME = ?;
}
class CCAssignToStackWithShadow<int CCAssignToStackWithShadow:size = ?, int CCAssignToStackWithShadow:align = ?, list<Register> CCAssignToStackWithShadow:shadowList = ?> {	// CCAction
  int Size = CCAssignToStackWithShadow:size;
  int Align = CCAssignToStackWithShadow:align;
  list<Register> ShadowRegList = CCAssignToStackWithShadow:shadowList;
  string NAME = ?;
}
class CCBitConvertToType<ValueType CCBitConvertToType:destTy = ?> {	// CCAction
  ValueType DestTy = CCBitConvertToType:destTy;
  string NAME = ?;
}
class CCCustom<string CCCustom:fn = ?> {	// CCAction
  string FuncName = CCCustom:fn;
  string NAME = ?;
}
class CCDelegateTo<CallingConv CCDelegateTo:cc = ?> {	// CCAction
  CallingConv CC = CCDelegateTo:cc;
  string NAME = ?;
}
class CCIf<string CCIf:predicate = ?, CCAction CCIf:A = ?> {	// CCAction CCPredicateAction
  CCAction SubAction = CCIf:A;
  string Predicate = CCIf:predicate;
  string NAME = ?;
}
class CCIfByVal<CCAction CCIfByVal:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfByVal:A;
  string Predicate = "ArgFlags.isByVal()";
  string NAME = ?;
}
class CCIfCC<string CCIfCC:CC = ?, CCAction CCIfCC:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfCC:A;
  string Predicate = !strconcat("State.getCallingConv() == ", CCIfCC:CC);
  string NAME = ?;
}
class CCIfConsecutiveRegs<CCAction CCIfConsecutiveRegs:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfConsecutiveRegs:A;
  string Predicate = "ArgFlags.isInConsecutiveRegs()";
  string NAME = ?;
}
class CCIfInReg<CCAction CCIfInReg:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfInReg:A;
  string Predicate = "ArgFlags.isInReg()";
  string NAME = ?;
}
class CCIfNest<CCAction CCIfNest:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfNest:A;
  string Predicate = "ArgFlags.isNest()";
  string NAME = ?;
}
class CCIfNotVarArg<CCAction CCIfNotVarArg:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfNotVarArg:A;
  string Predicate = "!State.isVarArg()";
  string NAME = ?;
}
class CCIfSRet<CCAction CCIfSRet:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfSRet:A;
  string Predicate = "ArgFlags.isSRet()";
  string NAME = ?;
}
class CCIfSplit<CCAction CCIfSplit:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfSplit:A;
  string Predicate = "ArgFlags.isSplit()";
  string NAME = ?;
}
class CCIfSubtarget<string CCIfSubtarget:F = ?, CCAction CCIfSubtarget:A = ?> {	// CCAction CCPredicateAction CCIf
  CCAction SubAction = CCIfSubtarget:A;
  string Predicate = !strconcat("State.getTarget().getSubtarget<DSPSubtarget>().", CCIfSubtarget:F);
  string NAME = ?;
}
class CCIfType<list<ValueType> CCIfType:vts = ?, CCAction CCIfType:A = ?> {	// CCAction CCPredicateAction
  CCAction SubAction = CCIfType:A;
  list<ValueType> VTs = CCIfType:vts;
  string NAME = ?;
}
class CCPassByVal<int CCPassByVal:size = ?, int CCPassByVal:align = ?> {	// CCAction
  int Size = CCPassByVal:size;
  int Align = CCPassByVal:align;
  string NAME = ?;
}
class CCPassIndirect<ValueType CCPassIndirect:destTy = ?> {	// CCAction
  ValueType DestTy = CCPassIndirect:destTy;
  string NAME = ?;
}
class CCPredicateAction<CCAction CCPredicateAction:A = ?> {	// CCAction
  CCAction SubAction = CCPredicateAction:A;
  string NAME = ?;
}
class CCPromoteToType<ValueType CCPromoteToType:destTy = ?> {	// CCAction
  ValueType DestTy = CCPromoteToType:destTy;
  string NAME = ?;
}
class CalleeSavedRegs<dag CalleeSavedRegs:saves = ?> {
  dag SaveList = CalleeSavedRegs:saves;
  dag OtherPreserved = ?;
  string NAME = ?;
}
class CallingConv<list<CCAction> CallingConv:actions = ?> {
  list<CCAction> Actions = CallingConv:actions;
  string NAME = ?;
}
class Cbw_Fmt<bits<3> Cbw_Fmt:type = { ?, ?, ? }, bits<3> Cbw_Fmt:op = { ?, ?, ? }, bits<8> Cbw_Fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string Cbw_Fmt:instr_asm = ?, InstrItinClass Cbw_Fmt:itin = ?, RegisterClass Cbw_Fmt:RC = ?, bit Cbw_Fmt:isComm = 0> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { Cbw_Fmt:type{2}, Cbw_Fmt:type{1}, Cbw_Fmt:type{0}, Cbw_Fmt:op{2}, Cbw_Fmt:op{1}, Cbw_Fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, Cbw_Fmt:funct{7}, Cbw_Fmt:funct{6}, Cbw_Fmt:funct{5}, Cbw_Fmt:funct{4}, Cbw_Fmt:funct{3}, Cbw_Fmt:funct{2}, Cbw_Fmt:funct{1}, Cbw_Fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins Cbw_Fmt:RC:$rb);
  string AsmString = !strconcat(Cbw_Fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_cbw_qb Cbw_Fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Cbw_Fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class Chw_Fmt<bits<3> Chw_Fmt:type = { ?, ?, ? }, bits<3> Chw_Fmt:op = { ?, ?, ? }, bits<8> Chw_Fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string Chw_Fmt:instr_asm = ?, InstrItinClass Chw_Fmt:itin = ?, RegisterClass Chw_Fmt:RC = ?, bit Chw_Fmt:isComm = 0> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { Chw_Fmt:type{2}, Chw_Fmt:type{1}, Chw_Fmt:type{0}, Chw_Fmt:op{2}, Chw_Fmt:op{1}, Chw_Fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, Chw_Fmt:funct{7}, Chw_Fmt:funct{6}, Chw_Fmt:funct{5}, Chw_Fmt:funct{4}, Chw_Fmt:funct{3}, Chw_Fmt:funct{2}, Chw_Fmt:funct{1}, Chw_Fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins Chw_Fmt:RC:$rb);
  string AsmString = !strconcat(Chw_Fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_chw_qb Chw_Fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Chw_Fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class CodePatPred<string CodePatPred:predicate = ?> {	// PatPred
  string PredicateCode = CodePatPred:predicate;
  string NAME = ?;
}
class ComplexDeprecationPredicate<string ComplexDeprecationPredicate:dep = ?> {
  string ComplexDeprecationPredicate = ComplexDeprecationPredicate:dep;
  string NAME = ?;
}
class ComplexPattern<ValueType ComplexPattern:ty = ?, int ComplexPattern:numops = ?, string ComplexPattern:fn = ?, list<SDNode> ComplexPattern:roots = [], list<SDNodeProperty> ComplexPattern:props = []> {
  ValueType Ty = ComplexPattern:ty;
  int NumOperands = ComplexPattern:numops;
  string SelectFunc = ComplexPattern:fn;
  list<SDNode> RootNodes = ComplexPattern:roots;
  list<SDNodeProperty> Properties = ComplexPattern:props;
  string NAME = ?;
}
class ComposedSubRegIndex<SubRegIndex ComposedSubRegIndex:A = ?, SubRegIndex ComposedSubRegIndex:B = ?> {	// SubRegIndex
  string Namespace = "";
  int Size = ComposedSubRegIndex:B.Size;
  int Offset = !if(!eq(ComposedSubRegIndex:A.Offset, -1), -1, !if(!eq(ComposedSubRegIndex:B.Offset, -1), -1, !add(ComposedSubRegIndex:A.Offset, ComposedSubRegIndex:B.Offset)));
  list<SubRegIndex> ComposedOf = [ComposedSubRegIndex:A, ComposedSubRegIndex:B];
  list<SubRegIndex> CoveringSubRegIndices = [];
  string NAME = ?;
}
class CondCode {
  string NAME = ?;
}
class Crypto_AES_DataKey_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Crypto_AES_Data_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Crypto_SHA_12Schedule_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Crypto_SHA_1Hash_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Crypto_SHA_5Hash4Schedule_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Crypto_SHA_8Hash4Schedule_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Crypto_SHA_8Schedule_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class DAGOperand {
  string NAME = ?;
}
class DSPC0Reg<bits<6> DSPC0Reg:num = { ?, ?, ?, ?, ?, ? }, string DSPC0Reg:n = ?> {	// Register DSPReg
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = DSPC0Reg:n;
  list<string> AltNames = Register:altNames;
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, DSPC0Reg:num{5}, DSPC0Reg:num{4}, DSPC0Reg:num{3}, DSPC0Reg:num{2}, DSPC0Reg:num{1}, DSPC0Reg:num{0} };
  string NAME = ?;
}
class DSPGPRReg<bits<6> DSPGPRReg:num = { ?, ?, ?, ?, ?, ? }, string DSPGPRReg:n = ?> {	// Register DSPReg
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = DSPGPRReg:n;
  list<string> AltNames = Register:altNames;
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, DSPGPRReg:num{5}, DSPGPRReg:num{4}, DSPGPRReg:num{3}, DSPGPRReg:num{2}, DSPGPRReg:num{1}, DSPGPRReg:num{0} };
  string NAME = ?;
}
class DSPInstAlias<string DSPInstAlias:Asm = ?, dag DSPInstAlias:Result = ?, bit DSPInstAlias:Emit = 1> {	// InstAlias
  string AsmString = DSPInstAlias:Asm;
  dag ResultInst = DSPInstAlias:Result;
  int EmitPriority = DSPInstAlias:Emit;
  list<Predicate> Predicates = [];
  string NAME = ?;
}
class DSPMORReg<bits<6> DSPMORReg:num = { ?, ?, ?, ?, ?, ? }, string DSPMORReg:n = ?> {	// Register DSPReg
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = DSPMORReg:n;
  list<string> AltNames = Register:altNames;
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, DSPMORReg:num{5}, DSPMORReg:num{4}, DSPMORReg:num{3}, DSPMORReg:num{2}, DSPMORReg:num{1}, DSPMORReg:num{0} };
  string NAME = ?;
}
class DSPPseudo<dag DSPPseudo:outs = ?, dag DSPPseudo:ins = ?, string DSPPseudo:asmstr = ?, list<dag> DSPPseudo:pattern = ?> {	// Instruction InstDSP
  field bits<32> Inst = { typecode{2}, typecode{1}, typecode{0}, opcode{2}, opcode{1}, opcode{0}, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = DSPPseudo:outs;
  dag InOperandList = DSPPseudo:ins;
  string AsmString = DSPPseudo:asmstr;
  list<dag> Pattern = DSPPseudo:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = PSEUDO;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
class DSPReg<string DSPReg:n = ?> {	// Register
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = DSPReg:n;
  list<string> AltNames = Register:altNames;
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
class DSPRegWithSubRegs<bits<6> DSPRegWithSubRegs:num = { ?, ?, ?, ?, ?, ? }, string DSPRegWithSubRegs:n = ?, list<Register> DSPRegWithSubRegs:subregs = ?> {	// Register RegisterWithSubRegs
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = DSPRegWithSubRegs:n;
  list<string> AltNames = Register:altNames;
  list<Register> Aliases = [];
  list<Register> SubRegs = DSPRegWithSubRegs:subregs;
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, DSPRegWithSubRegs:num{5}, DSPRegWithSubRegs:num{4}, DSPRegWithSubRegs:num{3}, DSPRegWithSubRegs:num{2}, DSPRegWithSubRegs:num{1}, DSPRegWithSubRegs:num{0} };
  string NAME = ?;
}
class DSPVRReg<bits<6> DSPVRReg:num = { ?, ?, ?, ?, ?, ? }, string DSPVRReg:n = ?, list<Register> DSPVRReg:subregs = ?> {	// Register RegisterWithSubRegs DSPRegWithSubRegs
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = DSPVRReg:n;
  list<string> AltNames = Register:altNames;
  list<Register> Aliases = [];
  list<Register> SubRegs = DSPVRReg:subregs;
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, DSPVRReg:num{5}, DSPVRReg:num{4}, DSPVRReg:num{3}, DSPVRReg:num{2}, DSPVRReg:num{1}, DSPVRReg:num{0} };
  string NAME = ?;
}
class Deprecated<SubtargetFeature Deprecated:dep = ?> {
  SubtargetFeature DeprecatedFeatureMask = Deprecated:dep;
  string NAME = ?;
}
class DwarfRegAlias<Register DwarfRegAlias:reg = ?> {
  Register DwarfAlias = DwarfRegAlias:reg;
  string NAME = ?;
}
class DwarfRegNum<list<int> DwarfRegNum:Numbers = ?> {
  list<int> DwarfNumbers = DwarfRegNum:Numbers;
  string NAME = ?;
}
class FMem<bits<3> FMem:typeop = { ?, ?, ? }, bits<3> FMem:op = { ?, ?, ? }, bits<5> FMem:inner_op = { ?, ?, ?, ?, ? }, dag FMem:outs = ?, dag FMem:ins = ?, string FMem:asmstr = ?, list<dag> FMem:pattern = ?, InstrItinClass FMem:itin = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { FMem:typeop{2}, FMem:typeop{1}, FMem:typeop{0}, FMem:op{2}, FMem:op{1}, FMem:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, FMem:inner_op{4}, FMem:inner_op{3}, FMem:inner_op{2}, FMem:inner_op{1}, FMem:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = FMem:outs;
  dag InOperandList = FMem:ins;
  string AsmString = FMem:asmstr;
  list<dag> Pattern = FMem:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = FMem:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_1Reg_imm16<bits<3> F_1Reg_imm16:type = { ?, ?, ? }, bits<3> F_1Reg_imm16:op = { ?, ?, ? }, bits<4> F_1Reg_imm16:funct = { ?, ?, ?, ? }, dag F_1Reg_imm16:outs = ?, dag F_1Reg_imm16:ins = ?, string F_1Reg_imm16:asmstr = ?, list<dag> F_1Reg_imm16:pattern = ?, InstrItinClass F_1Reg_imm16:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_1Reg_imm16:type{2}, F_1Reg_imm16:type{1}, F_1Reg_imm16:type{0}, F_1Reg_imm16:op{2}, F_1Reg_imm16:op{1}, F_1Reg_imm16:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm16{15}, imm16{14}, imm16{13}, imm16{12}, imm16{11}, imm16{10}, imm16{9}, imm16{8}, imm16{7}, imm16{6}, imm16{5}, imm16{4}, imm16{3}, imm16{2}, imm16{1}, imm16{0}, F_1Reg_imm16:funct{3}, F_1Reg_imm16:funct{2}, F_1Reg_imm16:funct{1}, F_1Reg_imm16:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_1Reg_imm16:outs;
  dag InOperandList = F_1Reg_imm16:ins;
  string AsmString = F_1Reg_imm16:asmstr;
  list<dag> Pattern = F_1Reg_imm16:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_1Reg_imm16:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<16> imm16 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_1Reg_imm5<bits<3> F_1Reg_imm5:type = { ?, ?, ? }, bits<3> F_1Reg_imm5:op = { ?, ?, ? }, bits<5> F_1Reg_imm5:funct = { ?, ?, ?, ?, ? }, dag F_1Reg_imm5:outs = ?, dag F_1Reg_imm5:ins = ?, string F_1Reg_imm5:asmstr = ?, list<dag> F_1Reg_imm5:pattern = ?, InstrItinClass F_1Reg_imm5:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_1Reg_imm5:type{2}, F_1Reg_imm5:type{1}, F_1Reg_imm5:type{0}, F_1Reg_imm5:op{2}, F_1Reg_imm5:op{1}, F_1Reg_imm5:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, 0, 0, 0, 0, 0, 0, imm5{4}, imm5{3}, imm5{2}, imm5{1}, imm5{0}, 0, 0, 0, 0, F_1Reg_imm5:funct{4}, F_1Reg_imm5:funct{3}, F_1Reg_imm5:funct{2}, F_1Reg_imm5:funct{1}, F_1Reg_imm5:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_1Reg_imm5:outs;
  dag InOperandList = F_1Reg_imm5:ins;
  string AsmString = F_1Reg_imm5:asmstr;
  list<dag> Pattern = F_1Reg_imm5:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_1Reg_imm5:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_1Reg_imm9<bits<3> F_1Reg_imm9:type = { ?, ?, ? }, bits<3> F_1Reg_imm9:op = { ?, ?, ? }, bits<5> F_1Reg_imm9:funct = { ?, ?, ?, ?, ? }, dag F_1Reg_imm9:outs = ?, dag F_1Reg_imm9:ins = ?, string F_1Reg_imm9:asmstr = ?, list<dag> F_1Reg_imm9:pattern = ?, InstrItinClass F_1Reg_imm9:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_1Reg_imm9:type{2}, F_1Reg_imm9:type{1}, F_1Reg_imm9:type{0}, F_1Reg_imm9:op{2}, F_1Reg_imm9:op{1}, F_1Reg_imm9:op{0}, 0, 0, 0, 0, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, F_1Reg_imm9:funct{4}, F_1Reg_imm9:funct{3}, F_1Reg_imm9:funct{2}, F_1Reg_imm9:funct{1}, F_1Reg_imm9:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_1Reg_imm9:outs;
  dag InOperandList = F_1Reg_imm9:ins;
  string AsmString = F_1Reg_imm9:asmstr;
  list<dag> Pattern = F_1Reg_imm9:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_1Reg_imm9:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_2Reg<bits<3> F_2Reg:type = { ?, ?, ? }, bits<3> F_2Reg:op = { ?, ?, ? }, bits<8> F_2Reg:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, dag F_2Reg:outs = ?, dag F_2Reg:ins = ?, string F_2Reg:asmstr = ?, list<dag> F_2Reg:pattern = ?, InstrItinClass F_2Reg:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_2Reg:type{2}, F_2Reg:type{1}, F_2Reg:type{0}, F_2Reg:op{2}, F_2Reg:op{1}, F_2Reg:op{0}, 0, 0, 0, 0, 0, 0, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, rt{5}, rt{4}, rt{3}, rt{2}, rt{1}, rt{0}, F_2Reg:funct{7}, F_2Reg:funct{6}, F_2Reg:funct{5}, F_2Reg:funct{4}, F_2Reg:funct{3}, F_2Reg:funct{2}, F_2Reg:funct{1}, F_2Reg:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_2Reg:outs;
  dag InOperandList = F_2Reg:ins;
  string AsmString = F_2Reg:asmstr;
  list<dag> Pattern = F_2Reg:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_2Reg:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rs = { ?, ?, ?, ?, ?, ? };
  bits<6> rt = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_2Reg_2<bits<3> F_2Reg_2:type = { ?, ?, ? }, bits<3> F_2Reg_2:op = { ?, ?, ? }, bits<8> F_2Reg_2:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, dag F_2Reg_2:outs = ?, dag F_2Reg_2:ins = ?, string F_2Reg_2:asmstr = ?, list<dag> F_2Reg_2:pattern = ?, InstrItinClass F_2Reg_2:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_2Reg_2:type{2}, F_2Reg_2:type{1}, F_2Reg_2:type{0}, F_2Reg_2:op{2}, F_2Reg_2:op{1}, F_2Reg_2:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, F_2Reg_2:funct{7}, F_2Reg_2:funct{6}, F_2Reg_2:funct{5}, F_2Reg_2:funct{4}, F_2Reg_2:funct{3}, F_2Reg_2:funct{2}, F_2Reg_2:funct{1}, F_2Reg_2:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_2Reg_2:outs;
  dag InOperandList = F_2Reg_2:ins;
  string AsmString = F_2Reg_2:asmstr;
  list<dag> Pattern = F_2Reg_2:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_2Reg_2:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_2Reg_2imm5<bits<3> F_2Reg_2imm5:type = { ?, ?, ? }, bits<3> F_2Reg_2imm5:op = { ?, ?, ? }, bits<4> F_2Reg_2imm5:funct = { ?, ?, ?, ? }, dag F_2Reg_2imm5:outs = ?, dag F_2Reg_2imm5:ins = ?, string F_2Reg_2imm5:asmstr = ?, list<dag> F_2Reg_2imm5:pattern = ?, InstrItinClass F_2Reg_2imm5:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_2Reg_2imm5:type{2}, F_2Reg_2imm5:type{1}, F_2Reg_2imm5:type{0}, F_2Reg_2imm5:op{2}, F_2Reg_2imm5:op{1}, F_2Reg_2imm5:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, F_2Reg_2imm5:funct{3}, F_2Reg_2imm5:funct{2}, F_2Reg_2imm5:funct{1}, F_2Reg_2imm5:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_2Reg_2imm5:outs;
  dag InOperandList = F_2Reg_2imm5:ins;
  string AsmString = F_2Reg_2imm5:asmstr;
  list<dag> Pattern = F_2Reg_2imm5:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_2Reg_2imm5:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_2Reg_imm11<bits<3> F_2Reg_imm11:type = { ?, ?, ? }, bits<3> F_2Reg_imm11:op = { ?, ?, ? }, bits<3> F_2Reg_imm11:funct = { ?, ?, ? }, dag F_2Reg_imm11:outs = ?, dag F_2Reg_imm11:ins = ?, string F_2Reg_imm11:asmstr = ?, list<dag> F_2Reg_imm11:pattern = ?, InstrItinClass F_2Reg_imm11:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_2Reg_imm11:type{2}, F_2Reg_imm11:type{1}, F_2Reg_imm11:type{0}, F_2Reg_imm11:op{2}, F_2Reg_imm11:op{1}, F_2Reg_imm11:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm11{10}, imm11{9}, imm11{8}, imm11{7}, imm11{6}, imm11{5}, imm11{4}, imm11{3}, imm11{2}, imm11{1}, imm11{0}, F_2Reg_imm11:funct{2}, F_2Reg_imm11:funct{1}, F_2Reg_imm11:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_2Reg_imm11:outs;
  dag InOperandList = F_2Reg_imm11:ins;
  string AsmString = F_2Reg_imm11:asmstr;
  list<dag> Pattern = F_2Reg_imm11:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_2Reg_imm11:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<11> imm11 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_2Reg_imm4<bits<3> F_2Reg_imm4:type = { ?, ?, ? }, bits<3> F_2Reg_imm4:op = { ?, ?, ? }, bits<10> F_2Reg_imm4:funct = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ? }, dag F_2Reg_imm4:outs = ?, dag F_2Reg_imm4:ins = ?, string F_2Reg_imm4:asmstr = ?, list<dag> F_2Reg_imm4:pattern = ?, InstrItinClass F_2Reg_imm4:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_2Reg_imm4:type{2}, F_2Reg_imm4:type{1}, F_2Reg_imm4:type{0}, F_2Reg_imm4:op{2}, F_2Reg_imm4:op{1}, F_2Reg_imm4:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, F_2Reg_imm4:funct{9}, F_2Reg_imm4:funct{8}, F_2Reg_imm4:funct{7}, F_2Reg_imm4:funct{6}, F_2Reg_imm4:funct{5}, F_2Reg_imm4:funct{4}, F_2Reg_imm4:funct{3}, F_2Reg_imm4:funct{2}, F_2Reg_imm4:funct{1}, F_2Reg_imm4:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_2Reg_imm4:outs;
  dag InOperandList = F_2Reg_imm4:ins;
  string AsmString = F_2Reg_imm4:asmstr;
  list<dag> Pattern = F_2Reg_imm4:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_2Reg_imm4:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
class F_3Reg_001<bits<3> F_3Reg_001:type = { ?, ?, ? }, bits<3> F_3Reg_001:op = { ?, ?, ? }, bits<8> F_3Reg_001:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, dag F_3Reg_001:outs = ?, dag F_3Reg_001:ins = ?, string F_3Reg_001:asmstr = ?, list<dag> F_3Reg_001:pattern = ?, InstrItinClass F_3Reg_001:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_3Reg_001:type{2}, F_3Reg_001:type{1}, F_3Reg_001:type{0}, F_3Reg_001:op{2}, F_3Reg_001:op{1}, F_3Reg_001:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, F_3Reg_001:funct{7}, F_3Reg_001:funct{6}, F_3Reg_001:funct{5}, F_3Reg_001:funct{4}, F_3Reg_001:funct{3}, F_3Reg_001:funct{2}, F_3Reg_001:funct{1}, F_3Reg_001:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_3Reg_001:outs;
  dag InOperandList = F_3Reg_001:ins;
  string AsmString = F_3Reg_001:asmstr;
  list<dag> Pattern = F_3Reg_001:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_3Reg_001:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_LS_2Reg_imm9<bits<3> F_LS_2Reg_imm9:type = { ?, ?, ? }, bits<3> F_LS_2Reg_imm9:op = { ?, ?, ? }, bits<5> F_LS_2Reg_imm9:funct = { ?, ?, ?, ?, ? }, dag F_LS_2Reg_imm9:outs = ?, dag F_LS_2Reg_imm9:ins = ?, string F_LS_2Reg_imm9:asmstr = ?, list<dag> F_LS_2Reg_imm9:pattern = ?, InstrItinClass F_LS_2Reg_imm9:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_LS_2Reg_imm9:type{2}, F_LS_2Reg_imm9:type{1}, F_LS_2Reg_imm9:type{0}, F_LS_2Reg_imm9:op{2}, F_LS_2Reg_imm9:op{1}, F_LS_2Reg_imm9:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, F_LS_2Reg_imm9:funct{4}, F_LS_2Reg_imm9:funct{3}, F_LS_2Reg_imm9:funct{2}, F_LS_2Reg_imm9:funct{1}, F_LS_2Reg_imm9:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_LS_2Reg_imm9:outs;
  dag InOperandList = F_LS_2Reg_imm9:ins;
  string AsmString = F_LS_2Reg_imm9:asmstr;
  list<dag> Pattern = F_LS_2Reg_imm9:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_LS_2Reg_imm9:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_Special_0Reg<bits<3> F_Special_0Reg:type = { ?, ?, ? }, bits<3> F_Special_0Reg:op = { ?, ?, ? }, bits<8> F_Special_0Reg:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, dag F_Special_0Reg:outs = ?, dag F_Special_0Reg:ins = ?, string F_Special_0Reg:asmstr = ?, list<dag> F_Special_0Reg:pattern = ?, InstrItinClass F_Special_0Reg:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_Special_0Reg:type{2}, F_Special_0Reg:type{1}, F_Special_0Reg:type{0}, F_Special_0Reg:op{2}, F_Special_0Reg:op{1}, F_Special_0Reg:op{0}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, F_Special_0Reg:funct{7}, F_Special_0Reg:funct{6}, F_Special_0Reg:funct{5}, F_Special_0Reg:funct{4}, F_Special_0Reg:funct{3}, F_Special_0Reg:funct{2}, F_Special_0Reg:funct{1}, F_Special_0Reg:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_Special_0Reg:outs;
  dag InOperandList = F_Special_0Reg:ins;
  string AsmString = F_Special_0Reg:asmstr;
  list<dag> Pattern = F_Special_0Reg:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_Special_0Reg:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
class F_Special_1Reg_1<bits<3> F_Special_1Reg_1:type = { ?, ?, ? }, bits<3> F_Special_1Reg_1:op = { ?, ?, ? }, bits<8> F_Special_1Reg_1:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, dag F_Special_1Reg_1:outs = ?, dag F_Special_1Reg_1:ins = ?, string F_Special_1Reg_1:asmstr = ?, list<dag> F_Special_1Reg_1:pattern = ?, InstrItinClass F_Special_1Reg_1:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_Special_1Reg_1:type{2}, F_Special_1Reg_1:type{1}, F_Special_1Reg_1:type{0}, F_Special_1Reg_1:op{2}, F_Special_1Reg_1:op{1}, F_Special_1Reg_1:op{0}, 0, 0, 0, 0, 0, 0, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, 0, 0, 0, 0, 0, 0, F_Special_1Reg_1:funct{7}, F_Special_1Reg_1:funct{6}, F_Special_1Reg_1:funct{5}, F_Special_1Reg_1:funct{4}, F_Special_1Reg_1:funct{3}, F_Special_1Reg_1:funct{2}, F_Special_1Reg_1:funct{1}, F_Special_1Reg_1:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_Special_1Reg_1:outs;
  dag InOperandList = F_Special_1Reg_1:ins;
  string AsmString = F_Special_1Reg_1:asmstr;
  list<dag> Pattern = F_Special_1Reg_1:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_Special_1Reg_1:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rs = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_Special_1Reg_2<bits<3> F_Special_1Reg_2:type = { ?, ?, ? }, bits<3> F_Special_1Reg_2:op = { ?, ?, ? }, bits<8> F_Special_1Reg_2:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, dag F_Special_1Reg_2:outs = ?, dag F_Special_1Reg_2:ins = ?, string F_Special_1Reg_2:asmstr = ?, list<dag> F_Special_1Reg_2:pattern = ?, InstrItinClass F_Special_1Reg_2:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_Special_1Reg_2:type{2}, F_Special_1Reg_2:type{1}, F_Special_1Reg_2:type{0}, F_Special_1Reg_2:op{2}, F_Special_1Reg_2:op{1}, F_Special_1Reg_2:op{0}, rd{5}, rd{4}, rd{3}, rd{2}, rd{1}, rd{0}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, F_Special_1Reg_2:funct{7}, F_Special_1Reg_2:funct{6}, F_Special_1Reg_2:funct{5}, F_Special_1Reg_2:funct{4}, F_Special_1Reg_2:funct{3}, F_Special_1Reg_2:funct{2}, F_Special_1Reg_2:funct{1}, F_Special_1Reg_2:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_Special_1Reg_2:outs;
  dag InOperandList = F_Special_1Reg_2:ins;
  string AsmString = F_Special_1Reg_2:asmstr;
  list<dag> Pattern = F_Special_1Reg_2:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_Special_1Reg_2:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rd = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_Special_4Reg<bits<3> F_Special_4Reg:type = { ?, ?, ? }, bits<3> F_Special_4Reg:op = { ?, ?, ? }, bits<2> F_Special_4Reg:funct = { ?, ? }, dag F_Special_4Reg:outs = ?, dag F_Special_4Reg:ins = ?, string F_Special_4Reg:asmstr = ?, list<dag> F_Special_4Reg:pattern = ?, InstrItinClass F_Special_4Reg:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_Special_4Reg:type{2}, F_Special_4Reg:type{1}, F_Special_4Reg:type{0}, F_Special_4Reg:op{2}, F_Special_4Reg:op{1}, F_Special_4Reg:op{0}, rd{5}, rd{4}, rd{3}, rd{2}, rd{1}, rd{0}, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, rt{5}, rt{4}, rt{3}, rt{2}, rt{1}, rt{0}, rt1{5}, rt1{4}, rt1{3}, rt1{2}, rt1{1}, rt1{0}, F_Special_4Reg:funct{1}, F_Special_4Reg:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_Special_4Reg:outs;
  dag InOperandList = F_Special_4Reg:ins;
  string AsmString = F_Special_4Reg:asmstr;
  list<dag> Pattern = F_Special_4Reg:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_Special_4Reg:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rd = { ?, ?, ?, ?, ?, ? };
  bits<6> rs = { ?, ?, ?, ?, ?, ? };
  bits<6> rt = { ?, ?, ?, ?, ?, ? };
  bits<6> rt1 = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class F_Special_imm21<bits<3> F_Special_imm21:type = { ?, ?, ? }, bits<3> F_Special_imm21:op = { ?, ?, ? }, bits<5> F_Special_imm21:funct = { ?, ?, ?, ?, ? }, dag F_Special_imm21:outs = ?, dag F_Special_imm21:ins = ?, string F_Special_imm21:asmstr = ?, list<dag> F_Special_imm21:pattern = ?, InstrItinClass F_Special_imm21:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { F_Special_imm21:type{2}, F_Special_imm21:type{1}, F_Special_imm21:type{0}, F_Special_imm21:op{2}, F_Special_imm21:op{1}, F_Special_imm21:op{0}, imm21{20}, imm21{19}, imm21{18}, imm21{17}, imm21{16}, imm21{15}, imm21{14}, imm21{13}, imm21{12}, imm21{11}, imm21{10}, imm21{9}, imm21{8}, imm21{7}, imm21{6}, imm21{5}, imm21{4}, imm21{3}, imm21{2}, imm21{1}, imm21{0}, F_Special_imm21:funct{4}, F_Special_imm21:funct{3}, F_Special_imm21:funct{2}, F_Special_imm21:funct{1}, F_Special_imm21:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = F_Special_imm21:outs;
  dag InOperandList = F_Special_imm21:ins;
  string AsmString = F_Special_imm21:asmstr;
  list<dag> Pattern = F_Special_imm21:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = F_Special_imm21:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<21> imm21 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class Format<bits<5> Format:Val = { ?, ?, ?, ?, ? }> {
  bits<5> Value = { Format:Val{4}, Format:Val{3}, Format:Val{2}, Format:Val{1}, Format:Val{0} };
  string NAME = ?;
}
class FuncUnit {
  string NAME = ?;
}
class GCCBuiltin<string GCCBuiltin:name = ?> {
  string GCCBuiltinName = GCCBuiltin:name;
  string NAME = ?;
}
class Hexagon_Intrinsic<string Hexagon_Intrinsic:GCCIntSuffix = ?, list<LLVMType> Hexagon_Intrinsic:ret_types = ?, list<LLVMType> Hexagon_Intrinsic:param_types = ?, list<IntrinsicProperty> Hexagon_Intrinsic:properties = ?> {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = Hexagon_Intrinsic:ret_types;
  list<LLVMType> ParamTypes = Hexagon_Intrinsic:param_types;
  list<IntrinsicProperty> Properties = Hexagon_Intrinsic:properties;
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_df_df_Intrinsic<string Hexagon_df_df_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_df_df_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_df_dfdf_Intrinsic<string Hexagon_df_dfdf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_df_dfdf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_df_dfdfdf_Intrinsic<string Hexagon_df_dfdfdf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_df_dfdfdf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_df_dfdfdfqi_Intrinsic<string Hexagon_df_dfdfdfqi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_df_dfdfdfqi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_df_di_Intrinsic<string Hexagon_df_di_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_df_di_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_df_sf_Intrinsic<string Hexagon_df_sf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_df_sf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_df_si_Intrinsic<string Hexagon_df_si_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_df_si_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_df_Intrinsic<string Hexagon_di_df_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_df_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_di_Intrinsic<string Hexagon_di_di_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_di_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_didi_Intrinsic<string Hexagon_di_didi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_didi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_dididi_Intrinsic<string Hexagon_di_dididi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_dididi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_dididisi_Intrinsic<string Hexagon_di_dididisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_dididisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_didiqi_Intrinsic<string Hexagon_di_didiqi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_didiqi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_didisi_Intrinsic<string Hexagon_di_didisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_didisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_didisisi_Intrinsic<string Hexagon_di_didisisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_didisisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_disi_Intrinsic<string Hexagon_di_disi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_disi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_disisi_Intrinsic<string Hexagon_di_disisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_disisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_qi_Intrinsic<string Hexagon_di_qi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_qi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_qididi_Intrinsic<string Hexagon_di_qididi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_qididi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_qisisi_Intrinsic<string Hexagon_di_qisisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_qisisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i1_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_sf_Intrinsic<string Hexagon_di_sf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_sf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_si_Intrinsic<string Hexagon_di_si_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_si_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_sidi_Intrinsic<string Hexagon_di_sidi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_sidi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_sisi_Intrinsic<string Hexagon_di_sisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_sisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_di_sisisi_Intrinsic<string Hexagon_di_sisisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_di_sisisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_hi_si_Intrinsic<string Hexagon_hi_si_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_hi_si_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_mem_memmemsisi_Intrinsic<string Hexagon_mem_memmemsisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_mem_memmemsisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_dfdf_Intrinsic<string Hexagon_qi_dfdf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_dfdf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_dfsi_Intrinsic<string Hexagon_qi_dfsi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_dfsi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_didi_Intrinsic<string Hexagon_qi_didi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_didi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_disi_Intrinsic<string Hexagon_qi_disi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_disi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_mem_Intrinsic<string Hexagon_qi_mem_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_mem_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_qi_Intrinsic<string Hexagon_qi_qi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_qi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_qiqi_Intrinsic<string Hexagon_qi_qiqi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_qiqi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_qiqiqi_Intrinsic<string Hexagon_qi_qiqiqi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_qiqiqi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_sfqi_Intrinsic<string Hexagon_qi_sfqi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_sfqi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_sfsf_Intrinsic<string Hexagon_qi_sfsf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_sfsf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_sfsi_Intrinsic<string Hexagon_qi_sfsi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_sfsi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_si_Intrinsic<string Hexagon_qi_si_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_si_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_sidi_Intrinsic<string Hexagon_qi_sidi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_sidi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_qi_sisi_Intrinsic<string Hexagon_qi_sisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_qi_sisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_sf_df_Intrinsic<string Hexagon_sf_df_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_sf_df_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_sf_di_Intrinsic<string Hexagon_sf_di_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_sf_di_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_sf_sf_Intrinsic<string Hexagon_sf_sf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_sf_sf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_sf_sfsf_Intrinsic<string Hexagon_sf_sfsf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_sf_sfsf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_sf_sfsfsf_Intrinsic<string Hexagon_sf_sfsfsf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_sf_sfsfsf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_sf_sfsfsfqi_Intrinsic<string Hexagon_sf_sfsfsfqi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_sf_sfsfsfqi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_sf_si_Intrinsic<string Hexagon_sf_si_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_sf_si_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_df_Intrinsic<string Hexagon_si_df_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_df_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_di_Intrinsic<string Hexagon_si_di_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_di_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_didi_Intrinsic<string Hexagon_si_didi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_didi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_disi_Intrinsic<string Hexagon_si_disi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_disi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_disisi_Intrinsic<string Hexagon_si_disisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_disisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_qi_Intrinsic<string Hexagon_si_qi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_qi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_qiqi_Intrinsic<string Hexagon_si_qiqi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_qiqi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_qisi_Intrinsic<string Hexagon_si_qisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_qisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i1_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_qisisi_Intrinsic<string Hexagon_si_qisisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_qisisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_sf_Intrinsic<string Hexagon_si_sf_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_sf_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_si_Intrinsic<string Hexagon_si_si_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_si_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_sidi_Intrinsic<string Hexagon_si_sidi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_sidi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_sididi_Intrinsic<string Hexagon_si_sididi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_sididi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_sidisi_Intrinsic<string Hexagon_si_sidisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_sidisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_sisi_Intrinsic<string Hexagon_si_sisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_sisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_sisidi_Intrinsic<string Hexagon_si_sisidi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_sisidi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_sisisi_Intrinsic<string Hexagon_si_sisisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_sisisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_si_sisisisi_Intrinsic<string Hexagon_si_sisisisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_si_sisisisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_udi_didi_Intrinsic<string Hexagon_udi_didi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_udi_didi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_udi_sisi_Intrinsic<string Hexagon_udi_sisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_udi_sisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_usi_sisi_Intrinsic<string Hexagon_usi_sisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_usi_sisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_void_si_Intrinsic<string Hexagon_void_si_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_void_si_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_void_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_void_sisi_Intrinsic<string Hexagon_void_sisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_void_sisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_void_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Hexagon_void_sisisi_Intrinsic<string Hexagon_void_sisisi_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_", Hexagon_void_sisisi_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_void_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class IF_LS_2Reg_imm9<bits<3> IF_LS_2Reg_imm9:type = { ?, ?, ? }, bits<3> IF_LS_2Reg_imm9:op = { ?, ?, ? }, bits<5> IF_LS_2Reg_imm9:funct = { ?, ?, ?, ?, ? }, dag IF_LS_2Reg_imm9:outs = ?, dag IF_LS_2Reg_imm9:ins = ?, string IF_LS_2Reg_imm9:asmstr = ?, list<dag> IF_LS_2Reg_imm9:pattern = ?, InstrItinClass IF_LS_2Reg_imm9:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { IF_LS_2Reg_imm9:type{2}, IF_LS_2Reg_imm9:type{1}, IF_LS_2Reg_imm9:type{0}, IF_LS_2Reg_imm9:op{2}, IF_LS_2Reg_imm9:op{1}, IF_LS_2Reg_imm9:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, IF_LS_2Reg_imm9:funct{4}, IF_LS_2Reg_imm9:funct{3}, IF_LS_2Reg_imm9:funct{2}, IF_LS_2Reg_imm9:funct{1}, IF_LS_2Reg_imm9:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = IF_LS_2Reg_imm9:outs;
  dag InOperandList = IF_LS_2Reg_imm9:ins;
  string AsmString = IF_LS_2Reg_imm9:asmstr;
  list<dag> Pattern = IF_LS_2Reg_imm9:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = IF_LS_2Reg_imm9:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class ImmLeaf<ValueType ImmLeaf:vt = ?, string ImmLeaf:pred = ?, SDNodeXForm ImmLeaf:xform = NOOP_SDNodeXForm> {	// SDPatternOperator PatFrag
  dag Operands = (ops);
  dag Fragment = (ImmLeaf:vt imm);
  string PredicateCode = "";
  string ImmediateCode = ImmLeaf:pred;
  SDNodeXForm OperandTransform = ImmLeaf:xform;
  bit FastIselShouldIgnore = 0;
  string NAME = ?;
}
class InstAlias<string InstAlias:Asm = ?, dag InstAlias:Result = ?, int InstAlias:Emit = 1> {
  string AsmString = InstAlias:Asm;
  dag ResultInst = InstAlias:Result;
  int EmitPriority = InstAlias:Emit;
  list<Predicate> Predicates = [];
  string NAME = ?;
}
class InstDSP<dag InstDSP:outs = ?, dag InstDSP:ins = ?, string InstDSP:asmstr = ?, list<dag> InstDSP:pattern = ?, InstrItinClass InstDSP:itin = ?> {	// Instruction
  field bits<32> Inst = { typecode{2}, typecode{1}, typecode{0}, opcode{2}, opcode{1}, opcode{0}, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = InstDSP:outs;
  dag InOperandList = InstDSP:ins;
  string AsmString = InstDSP:asmstr;
  list<dag> Pattern = InstDSP:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = InstDSP:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
class InstRW<list<SchedReadWrite> InstRW:rw = ?, dag InstRW:instrlist = ?> {
  list<SchedReadWrite> OperandReadWrites = InstRW:rw;
  dag Instrs = InstRW:instrlist;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class InstrInfo {
  bit isLittleEndianEncoding = 0;
  bit guessInstructionProperties = 1;
  bit decodePositionallyEncodedOperands = 0;
  bit noNamedPositionallyEncodedOperands = 0;
  string NAME = ?;
}
class InstrItinClass {
  string NAME = ?;
}
class InstrItinData<InstrItinClass InstrItinData:Class = ?, list<InstrStage> InstrItinData:stages = ?, list<int> InstrItinData:operandcycles = [], list<Bypass> InstrItinData:bypasses = [], int InstrItinData:uops = 1> {
  InstrItinClass TheClass = InstrItinData:Class;
  int NumMicroOps = InstrItinData:uops;
  list<InstrStage> Stages = InstrItinData:stages;
  list<int> OperandCycles = InstrItinData:operandcycles;
  list<Bypass> Bypasses = InstrItinData:bypasses;
  string NAME = ?;
}
class InstrMapping {
  string FilterClass = ?;
  list<string> RowFields = [];
  list<string> ColFields = [];
  list<string> KeyCol = [];
  list<list<string>> ValueCols = [];
  string NAME = ?;
}
class InstrStage<int InstrStage:cycles = ?, list<FuncUnit> InstrStage:units = ?, int InstrStage:timeinc = -1, ReservationKind InstrStage:kind = Required> {
  int Cycles = InstrStage:cycles;
  list<FuncUnit> Units = InstrStage:units;
  int TimeInc = InstrStage:timeinc;
  int Kind = InstrStage:kind.Value;
  string NAME = ?;
}
class Instruction {
  string Namespace = "";
  dag OutOperandList = ?;
  dag InOperandList = ?;
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
class Intrinsic<list<LLVMType> Intrinsic:ret_types = ?, list<LLVMType> Intrinsic:param_types = [], list<IntrinsicProperty> Intrinsic:properties = [], string Intrinsic:name = ""> {	// SDPatternOperator
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "";
  list<LLVMType> RetTypes = Intrinsic:ret_types;
  list<LLVMType> ParamTypes = Intrinsic:param_types;
  list<IntrinsicProperty> Properties = Intrinsic:properties;
  bit isTarget = 0;
  string NAME = ?;
}
class IntrinsicProperty {
  string NAME = ?;
}
class ItinRW<list<SchedReadWrite> ItinRW:rw = ?, list<InstrItinClass> ItinRW:iic = ?> {
  list<InstrItinClass> MatchedItinClasses = ItinRW:iic;
  list<SchedReadWrite> OperandReadWrites = ItinRW:rw;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class JumpFR<bits<3> JumpFR:typeop = { ?, ?, ? }, bits<3> JumpFR:op = { ?, ?, ? }, bits<8> JumpFR:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string JumpFR:instr_asm = ?, RegisterClass JumpFR:RC = ?> {	// Instruction InstDSP F_Special_0Reg
  field bits<32> Inst = { JumpFR:typeop{2}, JumpFR:typeop{1}, JumpFR:typeop{0}, JumpFR:op{2}, JumpFR:op{1}, JumpFR:op{0}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, JumpFR:inner_op{7}, JumpFR:inner_op{6}, JumpFR:inner_op{5}, JumpFR:inner_op{4}, JumpFR:inner_op{3}, JumpFR:inner_op{2}, JumpFR:inner_op{1}, JumpFR:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins JumpFR:RC:$ra);
  string AsmString = !strconcat(JumpFR:instr_asm, "	$ra");
  list<dag> Pattern = [(brind JumpFR:RC:$ra)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 1;
  bit isIndirectBranch = 1;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
class JumpLink<bits<3> JumpLink:typeop = { ?, ?, ? }, bits<3> JumpLink:op = { ?, ?, ? }, bits<5> JumpLink:funct = { ?, ?, ?, ?, ? }, string JumpLink:instr_asm = ?> {	// Instruction InstDSP F_Special_imm21
  field bits<32> Inst = { JumpLink:typeop{2}, JumpLink:typeop{1}, JumpLink:typeop{0}, JumpLink:op{2}, JumpLink:op{1}, JumpLink:op{0}, imm21{20}, imm21{19}, imm21{18}, imm21{17}, imm21{16}, imm21{15}, imm21{14}, imm21{13}, imm21{12}, imm21{11}, imm21{10}, imm21{9}, imm21{8}, imm21{7}, imm21{6}, imm21{5}, imm21{4}, imm21{3}, imm21{2}, imm21{1}, imm21{0}, JumpLink:funct{4}, JumpLink:funct{3}, JumpLink:funct{2}, JumpLink:funct{1}, JumpLink:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins calltarget:$target, variable_ops);
  string AsmString = !strconcat(JumpLink:instr_asm, "	$target");
  list<dag> Pattern = [(DSPJmpLink imm:$target)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 1;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<21> imm21 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class JumpLinkReg<bits<3> JumpLinkReg:typeop = { ?, ?, ? }, bits<3> JumpLinkReg:op = { ?, ?, ? }, bits<8> JumpLinkReg:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string JumpLinkReg:instr_asm = ?, RegisterClass JumpLinkReg:RC = ?> {	// Instruction InstDSP F_Special_1Reg_1
  field bits<32> Inst = { JumpLinkReg:typeop{2}, JumpLinkReg:typeop{1}, JumpLinkReg:typeop{0}, JumpLinkReg:op{2}, JumpLinkReg:op{1}, JumpLinkReg:op{0}, 0, 0, 0, 0, 0, 0, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, 0, 0, 0, 0, 0, 0, JumpLinkReg:funct{7}, JumpLinkReg:funct{6}, JumpLinkReg:funct{5}, JumpLinkReg:funct{4}, JumpLinkReg:funct{3}, JumpLinkReg:funct{2}, JumpLinkReg:funct{1}, JumpLinkReg:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins JumpLinkReg:RC:$rs, variable_ops);
  string AsmString = !strconcat(JumpLinkReg:instr_asm, "	$rs");
  list<dag> Pattern = [(DSPJmpLink JumpLinkReg:RC:$rs)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 1;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rs = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class LLVMAnyPointerType<LLVMType LLVMAnyPointerType:elty = ?> {	// LLVMType
  ValueType VT = iPTRAny;
  LLVMType ElTy = LLVMAnyPointerType:elty;
  string NAME = ?;
}
class LLVMExtendedType<int LLVMExtendedType:num = ?> {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = LLVMExtendedType:num;
  string NAME = ?;
}
class LLVMHalfElementsVectorType<int LLVMHalfElementsVectorType:num = ?> {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = LLVMHalfElementsVectorType:num;
  string NAME = ?;
}
class LLVMMatchType<int LLVMMatchType:num = ?> {	// LLVMType
  ValueType VT = OtherVT;
  int Number = LLVMMatchType:num;
  string NAME = ?;
}
class LLVMPointerType<LLVMType LLVMPointerType:elty = ?> {	// LLVMType LLVMQualPointerType
  ValueType VT = iPTR;
  LLVMType ElTy = LLVMPointerType:elty;
  int AddrSpace = 0;
  string NAME = ?;
}
class LLVMQualPointerType<LLVMType LLVMQualPointerType:elty = ?, int LLVMQualPointerType:addrspace = ?> {	// LLVMType
  ValueType VT = iPTR;
  LLVMType ElTy = LLVMQualPointerType:elty;
  int AddrSpace = LLVMQualPointerType:addrspace;
  string NAME = ?;
}
class LLVMTruncatedType<int LLVMTruncatedType:num = ?> {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = LLVMTruncatedType:num;
  string NAME = ?;
}
class LLVMType<ValueType LLVMType:vt = ?> {
  ValueType VT = LLVMType:vt;
  string NAME = ?;
}
class LoadM<bits<3> LoadM:typeop = { ?, ?, ? }, bits<3> LoadM:op = { ?, ?, ? }, bits<5> LoadM:inner_op = { ?, ?, ?, ?, ? }, string LoadM:instr_asm = ?, PatFrag LoadM:OpNode = ?, RegisterClass LoadM:RC = ?, Operand LoadM:MemOpnd = ?, bit LoadM:Pseudo = ?> {	// Instruction InstDSP F_LS_2Reg_imm9 FMem
  field bits<32> Inst = { LoadM:typeop{2}, LoadM:typeop{1}, LoadM:typeop{0}, LoadM:op{2}, LoadM:op{1}, LoadM:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, LoadM:inner_op{4}, LoadM:inner_op{3}, LoadM:inner_op{2}, LoadM:inner_op{1}, LoadM:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs LoadM:RC:$ra);
  dag InOperandList = (ins LoadM:MemOpnd:$addr);
  string AsmString = !strconcat(LoadM:instr_asm, "	$ra, $addr");
  list<dag> Pattern = [(set LoadM:RC:$ra, (LoadM:OpNode addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = LoadM:Pseudo;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class LoadM128<bits<3> LoadM128:typeop = { ?, ?, ? }, bits<3> LoadM128:op = { ?, ?, ? }, bits<5> LoadM128:inner_op = { ?, ?, ?, ?, ? }, string LoadM128:instr_asm = ?, PatFrag LoadM128:OpNode = ?, bit LoadM128:Pseudo = 0> {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM
  field bits<32> Inst = { LoadM128:typeop{2}, LoadM128:typeop{1}, LoadM128:typeop{0}, LoadM128:op{2}, LoadM128:op{1}, LoadM128:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, LoadM128:inner_op{4}, LoadM128:inner_op{3}, LoadM128:inner_op{2}, LoadM128:inner_op{1}, LoadM128:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins mem:$addr);
  string AsmString = !strconcat(LoadM128:instr_asm, "	$ra, $addr");
  list<dag> Pattern = [(set VPR4Out:$ra, (LoadM128:OpNode addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = LoadM128:Pseudo;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class LoadM128_16<bits<3> LoadM128_16:typeop = { ?, ?, ? }, bits<3> LoadM128_16:op = { ?, ?, ? }, bits<5> LoadM128_16:inner_op = { ?, ?, ?, ?, ? }, string LoadM128_16:instr_asm = ?, PatFrag LoadM128_16:OpNode = ?, bit LoadM128_16:Pseudo = 0> {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM
  field bits<32> Inst = { LoadM128_16:typeop{2}, LoadM128_16:typeop{1}, LoadM128_16:typeop{0}, LoadM128_16:op{2}, LoadM128_16:op{1}, LoadM128_16:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, LoadM128_16:inner_op{4}, LoadM128_16:inner_op{3}, LoadM128_16:inner_op{2}, LoadM128_16:inner_op{1}, LoadM128_16:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins mem:$addr);
  string AsmString = !strconcat(LoadM128_16:instr_asm, "	$ra, $addr");
  list<dag> Pattern = [(set VPR8Out:$ra, (LoadM128_16:OpNode addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = LoadM128_16:Pseudo;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class LoadM128_8<bits<3> LoadM128_8:typeop = { ?, ?, ? }, bits<3> LoadM128_8:op = { ?, ?, ? }, bits<5> LoadM128_8:inner_op = { ?, ?, ?, ?, ? }, string LoadM128_8:instr_asm = ?, PatFrag LoadM128_8:OpNode = ?, bit LoadM128_8:Pseudo = 0> {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM
  field bits<32> Inst = { LoadM128_8:typeop{2}, LoadM128_8:typeop{1}, LoadM128_8:typeop{0}, LoadM128_8:op{2}, LoadM128_8:op{1}, LoadM128_8:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, LoadM128_8:inner_op{4}, LoadM128_8:inner_op{3}, LoadM128_8:inner_op{2}, LoadM128_8:inner_op{1}, LoadM128_8:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins mem:$addr);
  string AsmString = !strconcat(LoadM128_8:instr_asm, "	$ra, $addr");
  list<dag> Pattern = [(set VPR16Out:$ra, (LoadM128_8:OpNode addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = LoadM128_8:Pseudo;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class LoadUpper<bits<3> LoadUpper:typeop = { ?, ?, ? }, bits<3> LoadUpper:op = { ?, ?, ? }, bits<5> LoadUpper:inner_op = { ?, ?, ?, ?, ? }, string LoadUpper:instr_asm = ?, RegisterClass LoadUpper:RC = ?, Operand LoadUpper:Imm = ?> {	// Instruction InstDSP R2i5
  field bits<32> Inst = { typecode{2}, typecode{1}, typecode{0}, opcode{2}, opcode{1}, opcode{0}, rd{5}, rd{4}, rd{3}, rd{2}, rd{1}, rd{0}, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, imm{8}, imm{7}, imm{6}, imm{5}, imm{4}, imm{3}, imm{2}, imm{1}, imm{0}, LoadUpper:inner_op{4}, LoadUpper:inner_op{3}, LoadUpper:inner_op{2}, LoadUpper:inner_op{1}, LoadUpper:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs LoadUpper:RC:$ra);
  dag InOperandList = (ins LoadUpper:Imm:$imm16);
  string AsmString = !strconcat(LoadUpper:instr_asm, "	$ra, $imm16");
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rd = { ?, ?, ?, ?, ?, ? };
  bits<6> rs = { 0, 0, 0, 0, 0, 0 };
  bits<9> imm = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class LoopBase<bits<3> LoopBase:typeop = { ?, ?, ? }, bits<3> LoopBase:op = { ?, ?, ? }, bits<4> LoopBase:inner_op = { ?, ?, ?, ? }, string LoopBase:instr_asm = ?> {	// Instruction InstDSP F_1Reg_imm16
  field bits<32> Inst = { LoopBase:typeop{2}, LoopBase:typeop{1}, LoopBase:typeop{0}, LoopBase:op{2}, LoopBase:op{1}, LoopBase:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm16{15}, imm16{14}, imm16{13}, imm16{12}, imm16{11}, imm16{10}, imm16{9}, imm16{8}, imm16{7}, imm16{6}, imm16{5}, imm16{4}, imm16{3}, imm16{2}, imm16{1}, imm16{0}, LoopBase:inner_op{3}, LoopBase:inner_op{2}, LoopBase:inner_op{1}, LoopBase:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, brtarget:$imm16);
  string AsmString = !strconcat(LoopBase:instr_asm, "	 $ra, $imm16");
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<16> imm16 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class MMBase<bits<3> MMBase:typeop = { ?, ?, ? }, bits<3> MMBase:op = { ?, ?, ? }, bits<8> MMBase:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string MMBase:instr_asm = ?, SDNode MMBase:OpNode = ?, InstrItinClass MMBase:itin = ?, RegisterClass MMBase:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { MMBase:typeop{2}, MMBase:typeop{1}, MMBase:typeop{0}, MMBase:op{2}, MMBase:op{1}, MMBase:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, MMBase:inner_op{7}, MMBase:inner_op{6}, MMBase:inner_op{5}, MMBase:inner_op{4}, MMBase:inner_op{3}, MMBase:inner_op{2}, MMBase:inner_op{1}, MMBase:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins MMBase:RC:$rb, MMBase:RC:$rt);
  string AsmString = !strconcat(MMBase:instr_asm, "	$ra, $rb, $rt");
  list<dag> Pattern = [(set CPURegs:$ra, (MMBase:OpNode MMBase:RC:$rb, MMBase:RC:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = MMBase:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class MSBuiltin<string MSBuiltin:name = ?> {
  string MSBuiltinName = MSBuiltin:name;
  string NAME = ?;
}
class MnemonicAlias<string MnemonicAlias:From = ?, string MnemonicAlias:To = ?, string MnemonicAlias:VariantName = ""> {
  string FromMnemonic = MnemonicAlias:From;
  string ToMnemonic = MnemonicAlias:To;
  string AsmVariantName = MnemonicAlias:VariantName;
  list<Predicate> Predicates = [];
  string NAME = ?;
}
class MovBase<bits<3> MovBase:typeop = { ?, ?, ? }, bits<3> MovBase:op = { ?, ?, ? }, bits<10> MovBase:inner_op = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ? }, string MovBase:instr_asm = ?, SDNode MovBase:Op = ?, RegisterClass MovBase:RC = ?, RegisterClass MovBase:RD = ?, InstrItinClass MovBase:itin = ?> {	// Instruction InstDSP F_2Reg_imm4
  field bits<32> Inst = { MovBase:typeop{2}, MovBase:typeop{1}, MovBase:typeop{0}, MovBase:op{2}, MovBase:op{1}, MovBase:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, MovBase:inner_op{9}, MovBase:inner_op{8}, MovBase:inner_op{7}, MovBase:inner_op{6}, MovBase:inner_op{5}, MovBase:inner_op{4}, MovBase:inner_op{3}, MovBase:inner_op{2}, MovBase:inner_op{1}, MovBase:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs MovBase:RC:$rd);
  dag InOperandList = (ins MovBase:RC:$ra, MovBase:RD:$rb, uimm16:$imm);
  string AsmString = !strconcat(MovBase:instr_asm, "	$ra,$rb,$imm");
  list<dag> Pattern = [(set MovBase:RC:$rd, (MovBase:Op MovBase:RC:$ra, MovBase:RD:$rb, immZExt16:$imm))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = MovBase:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
class Mult<bits<3> Mult:typeop = { ?, ?, ? }, bits<3> Mult:op = { ?, ?, ? }, bits<8> Mult:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string Mult:instr_asm = ?, InstrItinClass Mult:itin = ?, RegisterClass Mult:RC = ?, list<Register> Mult:DefRegs = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { Mult:typeop{2}, Mult:typeop{1}, Mult:typeop{0}, Mult:op{2}, Mult:op{1}, Mult:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, Mult:inner_op{7}, Mult:inner_op{6}, Mult:inner_op{5}, Mult:inner_op{4}, Mult:inner_op{3}, Mult:inner_op{2}, Mult:inner_op{1}, Mult:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins Mult:RC:$ra, Mult:RC:$rb);
  string AsmString = !strconcat(Mult:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = Mult:DefRegs;
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Mult:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class Mult32<bits<3> Mult32:typeop = { ?, ?, ? }, bits<3> Mult32:op = { ?, ?, ? }, bits<8> Mult32:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string Mult32:instr_asm = ?, InstrItinClass Mult32:itin = ?> {	// Instruction InstDSP F_3Reg_001 Mult
  field bits<32> Inst = { Mult32:typeop{2}, Mult32:typeop{1}, Mult32:typeop{0}, Mult32:op{2}, Mult32:op{1}, Mult32:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, Mult32:inner_op{7}, Mult32:inner_op{6}, Mult32:inner_op{5}, Mult32:inner_op{4}, Mult32:inner_op{3}, Mult32:inner_op{2}, Mult32:inner_op{1}, Mult32:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, CPURegs:$rb);
  string AsmString = !strconcat(Mult32:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [HI, LO];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Mult32:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class Neon_1Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_1Arg_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_64];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_2Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_2Arg_Long_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_69, anonymous_70];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_2Arg_Narrow_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_3Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_71, anonymous_72, anonymous_73];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_3Arg_Long_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_74, anonymous_75, anonymous_76];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_Compare_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_77];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_CvtFPToFx_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_CvtFPtoInt_1Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_CvtFxToFP_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_Tbl2Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_Tbl3Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_Tbl4Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_Tbl5Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Neon_Tbl6Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class NoCapture<int NoCapture:argNo = ?> {	// IntrinsicProperty
  int ArgNo = NoCapture:argNo;
  string NAME = ?;
}
class OpFormat<bits<3> OpFormat:Op = { ?, ?, ? }> {
  bits<3> Value = { OpFormat:Op{2}, OpFormat:Op{1}, OpFormat:Op{0} };
  string NAME = ?;
}
class Operand<ValueType Operand:ty = ?> {	// DAGOperand
  ValueType Type = Operand:ty;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
class OperandWithDefaultOps<ValueType OperandWithDefaultOps:ty = ?, dag OperandWithDefaultOps:defaultops = ?> {	// DAGOperand Operand
  ValueType Type = OperandWithDefaultOps:ty;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  dag DefaultOps = OperandWithDefaultOps:defaultops;
  string NAME = ?;
}
class OptionalDefOperand<ValueType OptionalDefOperand:ty = ?, dag OptionalDefOperand:OpTypes = ?, dag OptionalDefOperand:defaultops = ?> {	// DAGOperand Operand OperandWithDefaultOps
  ValueType Type = OptionalDefOperand:ty;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = OptionalDefOperand:OpTypes;
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  dag DefaultOps = OptionalDefOperand:defaultops;
  string NAME = ?;
}
class OutPatFrag<dag OutPatFrag:ops = ?, dag OutPatFrag:frag = ?> {	// SDPatternOperator PatFrag
  dag Operands = OutPatFrag:ops;
  dag Fragment = OutPatFrag:frag;
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
class PTXReadSpecialRegisterIntrinsic_r32<string PTXReadSpecialRegisterIntrinsic_r32:name = ?> {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = PTXReadSpecialRegisterIntrinsic_r32:name;
  string NAME = ?;
}
class PTXReadSpecialRegisterIntrinsic_r64<string PTXReadSpecialRegisterIntrinsic_r64:name = ?> {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = PTXReadSpecialRegisterIntrinsic_r64:name;
  string NAME = ?;
}
class Pat<dag Pat:pattern = ?, dag Pat:result = ?> {	// Pattern
  dag PatternToMatch = Pat:pattern;
  list<dag> ResultInstrs = [Pat:result];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
class PatFrag<dag PatFrag:ops = ?, dag PatFrag:frag = ?, string PatFrag:pred = "", SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm> {	// SDPatternOperator
  dag Operands = PatFrag:ops;
  dag Fragment = PatFrag:frag;
  string PredicateCode = PatFrag:pred;
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = PatFrag:xform;
  string NAME = ?;
}
class PatLeaf<dag PatLeaf:frag = ?, string PatLeaf:pred = "", SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm> {	// SDPatternOperator PatFrag
  dag Operands = (ops);
  dag Fragment = PatLeaf:frag;
  string PredicateCode = PatLeaf:pred;
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = PatLeaf:xform;
  string NAME = ?;
}
class PatPred {
  string NAME = ?;
}
class Pattern<dag Pattern:patternToMatch = ?, list<dag> Pattern:resultInstrs = ?> {
  dag PatternToMatch = Pattern:patternToMatch;
  list<dag> ResultInstrs = Pattern:resultInstrs;
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
class PointerLikeRegClass<int PointerLikeRegClass:Kind = ?> {
  int RegClassKind = PointerLikeRegClass:Kind;
  string NAME = ?;
}
class PowerPC_Vec_BBB_Intrinsic<string PowerPC_Vec_BBB_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_altivec_", PowerPC_Vec_BBB_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class PowerPC_Vec_FFF_Intrinsic<string PowerPC_Vec_FFF_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_altivec_", PowerPC_Vec_FFF_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class PowerPC_Vec_FF_Intrinsic<string PowerPC_Vec_FF_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_altivec_", PowerPC_Vec_FF_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class PowerPC_Vec_HHH_Intrinsic<string PowerPC_Vec_HHH_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_altivec_", PowerPC_Vec_HHH_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class PowerPC_Vec_Intrinsic<string PowerPC_Vec_Intrinsic:GCCIntSuffix = ?, list<LLVMType> PowerPC_Vec_Intrinsic:ret_types = ?, list<LLVMType> PowerPC_Vec_Intrinsic:param_types = ?, list<IntrinsicProperty> PowerPC_Vec_Intrinsic:properties = ?> {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_altivec_", PowerPC_Vec_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = PowerPC_Vec_Intrinsic:ret_types;
  list<LLVMType> ParamTypes = PowerPC_Vec_Intrinsic:param_types;
  list<IntrinsicProperty> Properties = PowerPC_Vec_Intrinsic:properties;
  bit isTarget = 0;
  string NAME = ?;
}
class PowerPC_Vec_WWW_Intrinsic<string PowerPC_Vec_WWW_Intrinsic:GCCIntSuffix = ?> {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic
  string GCCBuiltinName = !strconcat("__builtin_altivec_", PowerPC_Vec_WWW_Intrinsic:GCCIntSuffix);
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class Predicate<string Predicate:cond = ?> {
  string CondString = Predicate:cond;
  bit AssemblerMatcherPredicate = 0;
  string AssemblerCondString = "";
  string PredicateName = "";
  string NAME = ?;
}
class PredicateOp {
  string NAME = ?;
}
class PredicateOperand<ValueType PredicateOperand:ty = ?, dag PredicateOperand:OpTypes = ?, dag PredicateOperand:AlwaysVal = ?> {	// DAGOperand Operand OperandWithDefaultOps PredicateOp
  ValueType Type = PredicateOperand:ty;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = PredicateOperand:OpTypes;
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  dag DefaultOps = PredicateOperand:AlwaysVal;
  string NAME = ?;
}
class PredicateProlog<string PredicateProlog:c = ?> {
  string Code = PredicateProlog:c;
  string NAME = ?;
}
class Proc<string Proc:name = ?, SchedMachineModel Proc:Model = ?, list<SubtargetFeature> Proc:Features = ?> {	// Processor ProcessorModel
  string Name = Proc:name;
  SchedMachineModel SchedModel = Proc:Model;
  ProcessorItineraries ProcItin = NoItineraries;
  list<SubtargetFeature> Features = Proc:Features;
  string NAME = ?;
}
class ProcReadAdvance<int ProcReadAdvance:cycles = ?, list<SchedWrite> ProcReadAdvance:writes = []> {
  int Cycles = ProcReadAdvance:cycles;
  list<SchedWrite> ValidWrites = ProcReadAdvance:writes;
  bit Unsupported = 0;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class ProcResGroup<list<ProcResource> ProcResGroup:resources = ?> {	// ProcResourceKind
  list<ProcResource> Resources = ProcResGroup:resources;
  SchedMachineModel SchedModel = ?;
  int BufferSize = -1;
  string NAME = ?;
}
class ProcResource<int ProcResource:num = ?> {	// ProcResourceKind ProcResourceUnits
  ProcResourceKind Kind = EponymousProcResourceKind;
  int NumUnits = ProcResource:num;
  ProcResourceKind Super = ?;
  int BufferSize = -1;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class ProcResourceKind {
  string NAME = ?;
}
class ProcResourceUnits<ProcResourceKind ProcResourceUnits:kind = ?, int ProcResourceUnits:num = ?> {
  ProcResourceKind Kind = ProcResourceUnits:kind;
  int NumUnits = ProcResourceUnits:num;
  ProcResourceKind Super = ?;
  int BufferSize = -1;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class ProcWriteResources<list<ProcResourceKind> ProcWriteResources:resources = ?> {
  list<ProcResourceKind> ProcResources = ProcWriteResources:resources;
  list<int> ResourceCycles = [];
  int Latency = 1;
  int NumMicroOps = 1;
  bit BeginGroup = 0;
  bit EndGroup = 0;
  bit Unsupported = 0;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class Processor<string Processor:n = ?, ProcessorItineraries Processor:pi = ?, list<SubtargetFeature> Processor:f = ?> {
  string Name = Processor:n;
  SchedMachineModel SchedModel = NoSchedModel;
  ProcessorItineraries ProcItin = Processor:pi;
  list<SubtargetFeature> Features = Processor:f;
  string NAME = ?;
}
class ProcessorItineraries<list<FuncUnit> ProcessorItineraries:fu = ?, list<Bypass> ProcessorItineraries:bp = ?, list<InstrItinData> ProcessorItineraries:iid = ?> {
  list<FuncUnit> FU = ProcessorItineraries:fu;
  list<Bypass> BP = ProcessorItineraries:bp;
  list<InstrItinData> IID = ProcessorItineraries:iid;
  string NAME = ?;
}
class ProcessorModel<string ProcessorModel:n = ?, SchedMachineModel ProcessorModel:m = ?, list<SubtargetFeature> ProcessorModel:f = ?> {	// Processor
  string Name = ProcessorModel:n;
  SchedMachineModel SchedModel = ProcessorModel:m;
  ProcessorItineraries ProcItin = NoItineraries;
  list<SubtargetFeature> Features = ProcessorModel:f;
  string NAME = ?;
}
class PseudoInstExpansion<dag PseudoInstExpansion:Result = ?> {
  dag ResultInst = PseudoInstExpansion:Result;
  bit isPseudo = 1;
  string NAME = ?;
}
class R2i5<bits<3> R2i5:typecode = { ?, ?, ? }, bits<3> R2i5:opcode = { ?, ?, ? }, bits<5> R2i5:inner_op = { ?, ?, ?, ?, ? }, dag R2i5:outs = ?, dag R2i5:ins = ?, string R2i5:asmstr = ?, list<dag> R2i5:pattern = ?, InstrItinClass R2i5:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { typecode{2}, typecode{1}, typecode{0}, opcode{2}, opcode{1}, opcode{0}, rd{5}, rd{4}, rd{3}, rd{2}, rd{1}, rd{0}, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, imm{8}, imm{7}, imm{6}, imm{5}, imm{4}, imm{3}, imm{2}, imm{1}, imm{0}, R2i5:inner_op{4}, R2i5:inner_op{3}, R2i5:inner_op{2}, R2i5:inner_op{1}, R2i5:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = R2i5:outs;
  dag InOperandList = R2i5:ins;
  string AsmString = R2i5:asmstr;
  list<dag> Pattern = R2i5:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = R2i5:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rd = { ?, ?, ?, ?, ?, ? };
  bits<6> rs = { ?, ?, ?, ?, ?, ? };
  bits<9> imm = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class R3<bits<3> R3:typecode = { ?, ?, ? }, bits<3> R3:opcode = { ?, ?, ? }, bits<8> R3:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, dag R3:outs = ?, dag R3:ins = ?, string R3:asmstr = ?, list<dag> R3:pattern = ?, InstrItinClass R3:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { typecode{2}, typecode{1}, typecode{0}, opcode{2}, opcode{1}, opcode{0}, rd{5}, rd{4}, rd{3}, rd{2}, rd{1}, rd{0}, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, rt{5}, rt{4}, rt{3}, rt{2}, rt{1}, rt{0}, R3:inner_op{7}, R3:inner_op{6}, R3:inner_op{5}, R3:inner_op{4}, R3:inner_op{3}, R3:inner_op{2}, R3:inner_op{1}, R3:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = R3:outs;
  dag InOperandList = R3:ins;
  string AsmString = R3:asmstr;
  list<dag> Pattern = R3:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = R3:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rd = { ?, ?, ?, ?, ?, ? };
  bits<6> rs = { ?, ?, ?, ?, ?, ? };
  bits<6> rt = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class R4i2<bits<3> R4i2:typecode = { ?, ?, ? }, bits<3> R4i2:opcode = { ?, ?, ? }, bits<2> R4i2:inner_op = { ?, ? }, dag R4i2:outs = ?, dag R4i2:ins = ?, string R4i2:asmstr = ?, list<dag> R4i2:pattern = ?, InstrItinClass R4i2:itin = ?> {	// Instruction InstDSP
  field bits<32> Inst = { typecode{2}, typecode{1}, typecode{0}, opcode{2}, opcode{1}, opcode{0}, rd{5}, rd{4}, rd{3}, rd{2}, rd{1}, rd{0}, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, rt{5}, rt{4}, rt{3}, rt{2}, rt{1}, rt{0}, rt1{5}, rt1{4}, rt1{3}, rt1{2}, rt1{1}, rt1{0}, R4i2:inner_op{1}, R4i2:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = R4i2:outs;
  dag InOperandList = R4i2:ins;
  string AsmString = R4i2:asmstr;
  list<dag> Pattern = R4i2:pattern;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = R4i2:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rd = { ?, ?, ?, ?, ?, ? };
  bits<6> rs = { ?, ?, ?, ?, ?, ? };
  bits<6> rt = { ?, ?, ?, ?, ?, ? };
  bits<6> rt1 = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class R600ReadPreloadRegisterIntrinsic<string R600ReadPreloadRegisterIntrinsic:name = ?> {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = R600ReadPreloadRegisterIntrinsic:name;
  string NAME = ?;
}
class RMovBase<bits<3> RMovBase:typeop = { ?, ?, ? }, bits<3> RMovBase:op = { ?, ?, ? }, bits<8> RMovBase:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string RMovBase:instr_asm = ?, RegisterClass RMovBase:RC = ?, RegisterClass RMovBase:RD = ?, InstrItinClass RMovBase:itin = ?> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { RMovBase:typeop{2}, RMovBase:typeop{1}, RMovBase:typeop{0}, RMovBase:op{2}, RMovBase:op{1}, RMovBase:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, RMovBase:inner_op{7}, RMovBase:inner_op{6}, RMovBase:inner_op{5}, RMovBase:inner_op{4}, RMovBase:inner_op{3}, RMovBase:inner_op{2}, RMovBase:inner_op{1}, RMovBase:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins RMovBase:RC:$ra, RMovBase:RD:$rb);
  string AsmString = !strconcat(RMovBase:instr_asm, "	$ra,$rb");
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = RMovBase:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class ReadAdvance<SchedRead ReadAdvance:read = ?, int ReadAdvance:cycles = ?, list<SchedWrite> ReadAdvance:writes = []> {	// ProcReadAdvance
  int Cycles = ReadAdvance:cycles;
  list<SchedWrite> ValidWrites = ReadAdvance:writes;
  bit Unsupported = 0;
  SchedMachineModel SchedModel = ?;
  SchedRead ReadType = ReadAdvance:read;
  string NAME = ?;
}
class ReadNone<int ReadNone:argNo = ?> {	// IntrinsicProperty
  int ArgNo = ReadNone:argNo;
  string NAME = ?;
}
class ReadOnly<int ReadOnly:argNo = ?> {	// IntrinsicProperty
  int ArgNo = ReadOnly:argNo;
  string NAME = ?;
}
class RegAltNameIndex {
  string Namespace = "";
  string NAME = ?;
}
class Register<string Register:n = ?, list<string> Register:altNames = []> {
  string Namespace = "";
  string AsmName = Register:n;
  list<string> AltNames = Register:altNames;
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
class RegisterClass<string RegisterClass:namespace = ?, list<ValueType> RegisterClass:regTypes = ?, int RegisterClass:alignment = ?, dag RegisterClass:regList = ?, RegAltNameIndex RegisterClass:idx = NoRegAltName> {	// DAGOperand
  string Namespace = RegisterClass:namespace;
  list<ValueType> RegTypes = RegisterClass:regTypes;
  int Size = 0;
  int Alignment = RegisterClass:alignment;
  int CopyCost = 1;
  dag MemberList = RegisterClass:regList;
  RegAltNameIndex altNameIndex = RegisterClass:idx;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
class RegisterOperand<RegisterClass RegisterOperand:regclass = ?, string RegisterOperand:pm = "printOperand"> {	// DAGOperand
  RegisterClass RegClass = RegisterOperand:regclass;
  string PrintMethod = RegisterOperand:pm;
  AsmOperandClass ParserMatchClass = ?;
  string NAME = ?;
}
class RegisterTuples<list<SubRegIndex> RegisterTuples:Indices = ?, list<dag> RegisterTuples:Regs = ?> {
  list<dag> SubRegs = RegisterTuples:Regs;
  list<SubRegIndex> SubRegIndices = RegisterTuples:Indices;
  string NAME = ?;
}
class RegisterWithSubRegs<string RegisterWithSubRegs:n = ?, list<Register> RegisterWithSubRegs:subregs = ?> {	// Register
  list<string> Register:altNames = [];
  string Namespace = "";
  string AsmName = RegisterWithSubRegs:n;
  list<string> AltNames = Register:altNames;
  list<Register> Aliases = [];
  list<Register> SubRegs = RegisterWithSubRegs:subregs;
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
class Requires<list<Predicate> Requires:preds = ?> {
  list<Predicate> Predicates = Requires:preds;
  string NAME = ?;
}
class ReservationKind<bits<1> ReservationKind:val = { ? }> {
  int Value = ReservationKind:val;
  string NAME = ?;
}
class RetBase<RegisterClass RetBase:RC = ?> {	// Instruction InstDSP F_Special_0Reg JumpFR
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins RetBase:RC:$ra);
  string AsmString = "ret	$ra";
  list<dag> Pattern = [(brind RetBase:RC:$ra)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 1;
  bit isBranch = 1;
  bit isIndirectBranch = 1;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 1;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 1;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
class SDCallSeqEnd<list<SDTypeConstraint> SDCallSeqEnd:constraints = ?> {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = SDCallSeqEnd:constraints;
  string NAME = ?;
}
class SDCallSeqStart<list<SDTypeConstraint> SDCallSeqStart:constraints = ?> {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = SDCallSeqStart:constraints;
  string NAME = ?;
}
class SDNode<string SDNode:opcode = ?, SDTypeProfile SDNode:typeprof = ?, list<SDNodeProperty> SDNode:props = [], string SDNode:sdclass = "SDNode"> {	// SDPatternOperator
  string Opcode = SDNode:opcode;
  string SDClass = SDNode:sdclass;
  list<SDNodeProperty> Properties = SDNode:props;
  SDTypeProfile TypeProfile = SDNode:typeprof;
  string NAME = ?;
}
class SDNodeProperty {
  string NAME = ?;
}
class SDNodeXForm<SDNode SDNodeXForm:opc = ?, string SDNodeXForm:xformFunction = ?> {
  SDNode Opcode = SDNodeXForm:opc;
  string XFormFunction = SDNodeXForm:xformFunction;
  string NAME = ?;
}
class SDPatternOperator {
  string NAME = ?;
}
class SDTCisEltOfVec<int SDTCisEltOfVec:ThisOp = ?, int SDTCisEltOfVec:OtherOp = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisEltOfVec:ThisOp;
  int OtherOpNum = SDTCisEltOfVec:OtherOp;
  string NAME = ?;
}
class SDTCisFP<int SDTCisFP:OpNum = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisFP:OpNum;
  string NAME = ?;
}
class SDTCisInt<int SDTCisInt:OpNum = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisInt:OpNum;
  string NAME = ?;
}
class SDTCisOpSmallerThanOp<int SDTCisOpSmallerThanOp:SmallOp = ?, int SDTCisOpSmallerThanOp:BigOp = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisOpSmallerThanOp:SmallOp;
  int BigOperandNum = SDTCisOpSmallerThanOp:BigOp;
  string NAME = ?;
}
class SDTCisPtrTy<int SDTCisPtrTy:OpNum = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisPtrTy:OpNum;
  string NAME = ?;
}
class SDTCisSameAs<int SDTCisSameAs:OpNum = ?, int SDTCisSameAs:OtherOp = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisSameAs:OpNum;
  int OtherOperandNum = SDTCisSameAs:OtherOp;
  string NAME = ?;
}
class SDTCisSubVecOfVec<int SDTCisSubVecOfVec:ThisOp = ?, int SDTCisSubVecOfVec:OtherOp = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisSubVecOfVec:ThisOp;
  int OtherOpNum = SDTCisSubVecOfVec:OtherOp;
  string NAME = ?;
}
class SDTCisVT<int SDTCisVT:OpNum = ?, ValueType SDTCisVT:vt = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisVT:OpNum;
  ValueType VT = SDTCisVT:vt;
  string NAME = ?;
}
class SDTCisVTSmallerThanOp<int SDTCisVTSmallerThanOp:OpNum = ?, int SDTCisVTSmallerThanOp:OtherOp = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisVTSmallerThanOp:OpNum;
  int OtherOperandNum = SDTCisVTSmallerThanOp:OtherOp;
  string NAME = ?;
}
class SDTCisVec<int SDTCisVec:OpNum = ?> {	// SDTypeConstraint
  int OperandNum = SDTCisVec:OpNum;
  string NAME = ?;
}
class SDTypeConstraint<int SDTypeConstraint:opnum = ?> {
  int OperandNum = SDTypeConstraint:opnum;
  string NAME = ?;
}
class SDTypeProfile<int SDTypeProfile:numresults = ?, int SDTypeProfile:numoperands = ?, list<SDTypeConstraint> SDTypeProfile:constraints = ?> {
  int NumResults = SDTypeProfile:numresults;
  int NumOperands = SDTypeProfile:numoperands;
  list<SDTypeConstraint> Constraints = SDTypeProfile:constraints;
  string NAME = ?;
}
class SHA_1Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class SHA_2Arg_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class SHA_3Arg_i32_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class SHA_3Arg_v4i32_Intrinsic {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = Intrinsic:name;
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
class SMovBase<bits<3> SMovBase:typeop = { ?, ?, ? }, bits<3> SMovBase:op = { ?, ?, ? }, bits<4> SMovBase:inner_op = { ?, ?, ?, ? }, string SMovBase:instr_asm = ?, RegisterClass SMovBase:RC = ?, InstrItinClass SMovBase:itin = ?> {	// Instruction InstDSP F_1Reg_imm16
  field bits<32> Inst = { SMovBase:typeop{2}, SMovBase:typeop{1}, SMovBase:typeop{0}, SMovBase:op{2}, SMovBase:op{1}, SMovBase:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm16{15}, imm16{14}, imm16{13}, imm16{12}, imm16{11}, imm16{10}, imm16{9}, imm16{8}, imm16{7}, imm16{6}, imm16{5}, imm16{4}, imm16{3}, imm16{2}, imm16{1}, imm16{0}, SMovBase:inner_op{3}, SMovBase:inner_op{2}, SMovBase:inner_op{1}, SMovBase:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs SMovBase:RC:$ra);
  dag InOperandList = (ins SMovBase:RC:$rb, simm16:$imm16);
  string AsmString = !strconcat(SMovBase:instr_asm, "	$ra,$imm16");
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = SMovBase:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<16> imm16 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class Sched<list<SchedReadWrite> Sched:schedrw = ?> {
  list<SchedReadWrite> SchedRW = Sched:schedrw;
  string NAME = ?;
}
class SchedAlias<SchedReadWrite SchedAlias:match = ?, SchedReadWrite SchedAlias:alias = ?> {
  SchedReadWrite MatchRW = SchedAlias:match;
  SchedReadWrite AliasRW = SchedAlias:alias;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class SchedMachineModel {
  int IssueWidth = -1;
  int MinLatency = -1;
  int MicroOpBufferSize = -1;
  int LoopMicroOpBufferSize = -1;
  int LoadLatency = -1;
  int HighLatency = -1;
  int MispredictPenalty = -1;
  ProcessorItineraries Itineraries = NoItineraries;
  bit PostRAScheduler = 0;
  bit CompleteModel = 1;
  bit NoModel = 0;
  string NAME = ?;
}
class SchedPredicate<string SchedPredicate:pred = ?> {
  SchedMachineModel SchedModel = ?;
  string Predicate = SchedPredicate:pred;
  string NAME = ?;
}
class SchedRead {	// SchedReadWrite
  string NAME = ?;
}
class SchedReadAdvance<int SchedReadAdvance:cycles = ?, list<SchedWrite> SchedReadAdvance:writes = []> {	// SchedReadWrite SchedRead ProcReadAdvance
  int Cycles = SchedReadAdvance:cycles;
  list<SchedWrite> ValidWrites = SchedReadAdvance:writes;
  bit Unsupported = 0;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class SchedReadVariant<list<SchedVar> SchedReadVariant:variants = ?> {	// SchedReadWrite SchedRead SchedVariant
  list<SchedVar> Variants = SchedReadVariant:variants;
  bit Variadic = 0;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class SchedReadWrite {
  string NAME = ?;
}
class SchedVar<SchedPredicate SchedVar:pred = ?, list<SchedReadWrite> SchedVar:selected = ?> {
  SchedPredicate Predicate = SchedVar:pred;
  list<SchedReadWrite> Selected = SchedVar:selected;
  string NAME = ?;
}
class SchedVariant<list<SchedVar> SchedVariant:variants = ?> {
  list<SchedVar> Variants = SchedVariant:variants;
  bit Variadic = 0;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class SchedWrite {	// SchedReadWrite
  string NAME = ?;
}
class SchedWriteRes<list<ProcResourceKind> SchedWriteRes:resources = ?> {	// SchedReadWrite SchedWrite ProcWriteResources
  list<ProcResourceKind> ProcResources = SchedWriteRes:resources;
  list<int> ResourceCycles = [];
  int Latency = 1;
  int NumMicroOps = 1;
  bit BeginGroup = 0;
  bit EndGroup = 0;
  bit Unsupported = 0;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class SchedWriteVariant<list<SchedVar> SchedWriteVariant:variants = ?> {	// SchedReadWrite SchedWrite SchedVariant
  list<SchedVar> Variants = SchedWriteVariant:variants;
  bit Variadic = 0;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class SetCC_R<bits<3> SetCC_R:typeop = { ?, ?, ? }, bits<3> SetCC_R:op = { ?, ?, ? }, bits<8> SetCC_R:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string SetCC_R:instr_asm = ?, PatFrag SetCC_R:cond_op = ?, RegisterClass SetCC_R:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { SetCC_R:typeop{2}, SetCC_R:typeop{1}, SetCC_R:typeop{0}, SetCC_R:op{2}, SetCC_R:op{1}, SetCC_R:op{0}, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, SetCC_R:inner_op{7}, SetCC_R:inner_op{6}, SetCC_R:inner_op{5}, SetCC_R:inner_op{4}, SetCC_R:inner_op{3}, SetCC_R:inner_op{2}, SetCC_R:inner_op{1}, SetCC_R:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs SetCC_R:RC:$ra);
  dag InOperandList = (ins SetCC_R:RC:$rb, SetCC_R:RC:$rc);
  string AsmString = !strconcat(SetCC_R:instr_asm, "	 $rb, $rc");
  list<dag> Pattern = [(set SetCC_R:RC:$ra, (SetCC_R:cond_op SetCC_R:RC:$rb, SetCC_R:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class SetCC_RI<bits<3> SetCC_RI:typeop = { ?, ?, ? }, bits<3> SetCC_RI:op = { ?, ?, ? }, bits<5> SetCC_RI:inner_op = { ?, ?, ?, ?, ? }, string SetCC_RI:instr_asm = ?, PatFrag SetCC_RI:cond_op = ?, RegisterClass SetCC_RI:RC = ?> {	// Instruction InstDSP F_1Reg_imm9
  field bits<32> Inst = { SetCC_RI:typeop{2}, SetCC_RI:typeop{1}, SetCC_RI:typeop{0}, SetCC_RI:op{2}, SetCC_RI:op{1}, SetCC_RI:op{0}, 0, 0, 0, 0, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, SetCC_RI:inner_op{4}, SetCC_RI:inner_op{3}, SetCC_RI:inner_op{2}, SetCC_RI:inner_op{1}, SetCC_RI:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs SetCC_RI:RC:$rs);
  dag InOperandList = (ins SetCC_RI:RC:$ra, simm16:$imm9);
  string AsmString = !strconcat(SetCC_RI:instr_asm, "	 $ra, $imm9");
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class SlotMode<bits<3> SlotMode:value = { ?, ?, ? }> {
  bits<3> Value = { SlotMode:value{2}, SlotMode:value{1}, SlotMode:value{0} };
  string NAME = ?;
}
class StoreM<bits<3> StoreM:typeop = { ?, ?, ? }, bits<3> StoreM:op = { ?, ?, ? }, bits<5> StoreM:inner_op = { ?, ?, ?, ?, ? }, string StoreM:instr_asm = ?, PatFrag StoreM:OpNode = ?, RegisterClass StoreM:RC = ?, Operand StoreM:MemOpnd = ?, bit StoreM:Pseudo = ?> {	// Instruction InstDSP F_LS_2Reg_imm9 FMem
  field bits<32> Inst = { StoreM:typeop{2}, StoreM:typeop{1}, StoreM:typeop{0}, StoreM:op{2}, StoreM:op{1}, StoreM:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, StoreM:inner_op{4}, StoreM:inner_op{3}, StoreM:inner_op{2}, StoreM:inner_op{1}, StoreM:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins StoreM:RC:$ra, StoreM:MemOpnd:$addr);
  string AsmString = !strconcat(StoreM:instr_asm, "	$ra, $addr");
  list<dag> Pattern = [(StoreM:OpNode StoreM:RC:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = StoreM:Pseudo;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class StoreM128<bits<3> StoreM128:typeop = { ?, ?, ? }, bits<3> StoreM128:op = { ?, ?, ? }, bits<5> StoreM128:inner_op = { ?, ?, ?, ?, ? }, string StoreM128:instr_asm = ?, PatFrag StoreM128:OpNode = ?, bit StoreM128:Pseudo = 0> {	// Instruction InstDSP F_LS_2Reg_imm9 FMem StoreM
  field bits<32> Inst = { StoreM128:typeop{2}, StoreM128:typeop{1}, StoreM128:typeop{0}, StoreM128:op{2}, StoreM128:op{1}, StoreM128:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, StoreM128:inner_op{4}, StoreM128:inner_op{3}, StoreM128:inner_op{2}, StoreM128:inner_op{1}, StoreM128:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins VPR4Out:$ra, mem:$addr);
  string AsmString = !strconcat(StoreM128:instr_asm, "	$ra, $addr");
  list<dag> Pattern = [(StoreM128:OpNode VPR4Out:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = StoreM128:Pseudo;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class StoreM128_16<bits<3> StoreM128_16:typeop = { ?, ?, ? }, bits<3> StoreM128_16:op = { ?, ?, ? }, bits<5> StoreM128_16:inner_op = { ?, ?, ?, ?, ? }, string StoreM128_16:instr_asm = ?, PatFrag StoreM128_16:OpNode = ?, bit StoreM128_16:Pseudo = 0> {	// Instruction InstDSP F_LS_2Reg_imm9 FMem StoreM
  field bits<32> Inst = { StoreM128_16:typeop{2}, StoreM128_16:typeop{1}, StoreM128_16:typeop{0}, StoreM128_16:op{2}, StoreM128_16:op{1}, StoreM128_16:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, StoreM128_16:inner_op{4}, StoreM128_16:inner_op{3}, StoreM128_16:inner_op{2}, StoreM128_16:inner_op{1}, StoreM128_16:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins VPR8Out:$ra, mem:$addr);
  string AsmString = !strconcat(StoreM128_16:instr_asm, "	$ra, $addr");
  list<dag> Pattern = [(StoreM128_16:OpNode VPR8Out:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = StoreM128_16:Pseudo;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class StoreM128_8<bits<3> StoreM128_8:typeop = { ?, ?, ? }, bits<3> StoreM128_8:op = { ?, ?, ? }, bits<5> StoreM128_8:inner_op = { ?, ?, ?, ?, ? }, string StoreM128_8:instr_asm = ?, PatFrag StoreM128_8:OpNode = ?, bit StoreM128_8:Pseudo = 0> {	// Instruction InstDSP F_LS_2Reg_imm9 FMem StoreM
  field bits<32> Inst = { StoreM128_8:typeop{2}, StoreM128_8:typeop{1}, StoreM128_8:typeop{0}, StoreM128_8:op{2}, StoreM128_8:op{1}, StoreM128_8:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, StoreM128_8:inner_op{4}, StoreM128_8:inner_op{3}, StoreM128_8:inner_op{2}, StoreM128_8:inner_op{1}, StoreM128_8:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins VPR16Out:$ra, mem:$addr);
  string AsmString = !strconcat(StoreM128_8:instr_asm, "	$ra, $addr");
  list<dag> Pattern = [(StoreM128_8:OpNode VPR16Out:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = StoreM128_8:Pseudo;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class SubRegIndex<int SubRegIndex:size = ?, int SubRegIndex:offset = 0> {
  string Namespace = "";
  int Size = SubRegIndex:size;
  int Offset = SubRegIndex:offset;
  list<SubRegIndex> ComposedOf = [];
  list<SubRegIndex> CoveringSubRegIndices = [];
  string NAME = ?;
}
class SubtargetFeature<string SubtargetFeature:n = ?, string SubtargetFeature:a = ?, string SubtargetFeature:v = ?, string SubtargetFeature:d = ?, list<SubtargetFeature> SubtargetFeature:i = []> {
  string Name = SubtargetFeature:n;
  string Attribute = SubtargetFeature:a;
  string Value = SubtargetFeature:v;
  string Desc = SubtargetFeature:d;
  list<SubtargetFeature> Implies = SubtargetFeature:i;
  string NAME = ?;
}
class Target {
  InstrInfo InstructionSet = ?;
  list<AsmParser> AssemblyParsers = [DefaultAsmParser];
  list<AsmParserVariant> AssemblyParserVariants = [DefaultAsmParserVariant];
  list<AsmWriter> AssemblyWriters = [DefaultAsmWriter];
  string NAME = ?;
}
class Test_Fmt<bits<3> Test_Fmt:type = { ?, ?, ? }, bits<3> Test_Fmt:op = { ?, ?, ? }, bits<8> Test_Fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string Test_Fmt:instr_asm = ?, InstrItinClass Test_Fmt:itin = ?, RegisterClass Test_Fmt:RC = ?, bit Test_Fmt:isComm = 0> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { Test_Fmt:type{2}, Test_Fmt:type{1}, Test_Fmt:type{0}, Test_Fmt:op{2}, Test_Fmt:op{1}, Test_Fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, Test_Fmt:funct{7}, Test_Fmt:funct{6}, Test_Fmt:funct{5}, Test_Fmt:funct{4}, Test_Fmt:funct{3}, Test_Fmt:funct{2}, Test_Fmt:funct{1}, Test_Fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins Test_Fmt:RC:$rb, Test_Fmt:RC:$rc);
  string AsmString = !strconcat(Test_Fmt:instr_asm, "	$rb $rc");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_test_qb Test_Fmt:RC:$rb, Test_Fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Test_Fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class Testi_Fmt<bits<3> Testi_Fmt:type = { ?, ?, ? }, bits<3> Testi_Fmt:op = { ?, ?, ? }, bits<8> Testi_Fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string Testi_Fmt:instr_asm = ?, InstrItinClass Testi_Fmt:itin = ?, Operand Testi_Fmt:Od = ?, PatLeaf Testi_Fmt:imm_type = ?, RegisterClass Testi_Fmt:RC = ?, bit Testi_Fmt:isComm = 0> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { Testi_Fmt:type{2}, Testi_Fmt:type{1}, Testi_Fmt:type{0}, Testi_Fmt:op{2}, Testi_Fmt:op{1}, Testi_Fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, Testi_Fmt:funct{7}, Testi_Fmt:funct{6}, Testi_Fmt:funct{5}, Testi_Fmt:funct{4}, Testi_Fmt:funct{3}, Testi_Fmt:funct{2}, Testi_Fmt:funct{1}, Testi_Fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins Testi_Fmt:RC:$rb, Testi_Fmt:Od:$imm5);
  string AsmString = !strconcat(Testi_Fmt:instr_asm, "	$rb $imm5");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_testi_qb Testi_Fmt:RC:$rb, Testi_Fmt:imm_type:$imm5))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Testi_Fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class TokenAlias<string TokenAlias:From = ?, string TokenAlias:To = ?> {
  string FromToken = TokenAlias:From;
  string ToToken = TokenAlias:To;
  string NAME = ?;
}
class Unallocatable {
  bit isAllocatable = 0;
  string NAME = ?;
}
class UncondBranch<bits<3> UncondBranch:typeop = { ?, ?, ? }, bits<3> UncondBranch:op = { ?, ?, ? }, bits<5> UncondBranch:inner_op = { ?, ?, ?, ?, ? }, string UncondBranch:instr_asm = ?> {	// Instruction InstDSP F_Special_imm21
  field bits<32> Inst = { UncondBranch:typeop{2}, UncondBranch:typeop{1}, UncondBranch:typeop{0}, UncondBranch:op{2}, UncondBranch:op{1}, UncondBranch:op{0}, imm21{20}, imm21{19}, imm21{18}, imm21{17}, imm21{16}, imm21{15}, imm21{14}, imm21{13}, imm21{12}, imm21{11}, imm21{10}, imm21{9}, imm21{8}, imm21{7}, imm21{6}, imm21{5}, imm21{4}, imm21{3}, imm21{2}, imm21{1}, imm21{0}, UncondBranch:inner_op{4}, UncondBranch:inner_op{3}, UncondBranch:inner_op{2}, UncondBranch:inner_op{1}, UncondBranch:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins brtarget:$imm21);
  string AsmString = !strconcat(UncondBranch:instr_asm, "	$imm21");
  list<dag> Pattern = [(br bb:$imm21)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 1;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<21> imm21 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class VArithLogicR<bits<3> VArithLogicR:typeop = { ?, ?, ? }, bits<3> VArithLogicR:op = { ?, ?, ? }, bits<8> VArithLogicR:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string VArithLogicR:instr_asm = ?, SDNode VArithLogicR:OpNode = ?, InstrItinClass VArithLogicR:itin = ?, RegisterClass VArithLogicR:RC = ?, bit VArithLogicR:isComm = 0> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { VArithLogicR:typeop{2}, VArithLogicR:typeop{1}, VArithLogicR:typeop{0}, VArithLogicR:op{2}, VArithLogicR:op{1}, VArithLogicR:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, VArithLogicR:inner_op{7}, VArithLogicR:inner_op{6}, VArithLogicR:inner_op{5}, VArithLogicR:inner_op{4}, VArithLogicR:inner_op{3}, VArithLogicR:inner_op{2}, VArithLogicR:inner_op{1}, VArithLogicR:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VArithLogicR:RC:$ra);
  dag InOperandList = (ins VArithLogicR:RC:$rb, VArithLogicR:RC:$rc);
  string AsmString = !strconcat(VArithLogicR:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set VArithLogicR:RC:$ra, (VArithLogicR:OpNode VArithLogicR:RC:$rb, VArithLogicR:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = VArithLogicR:isComm;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = VArithLogicR:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class VMMBase<bits<3> VMMBase:typeop = { ?, ?, ? }, bits<3> VMMBase:op = { ?, ?, ? }, bits<8> VMMBase:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, string VMMBase:instr_asm = ?, SDNode VMMBase:OpNode = ?, InstrItinClass VMMBase:itin = ?, RegisterClass VMMBase:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { VMMBase:typeop{2}, VMMBase:typeop{1}, VMMBase:typeop{0}, VMMBase:op{2}, VMMBase:op{1}, VMMBase:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, VMMBase:inner_op{7}, VMMBase:inner_op{6}, VMMBase:inner_op{5}, VMMBase:inner_op{4}, VMMBase:inner_op{3}, VMMBase:inner_op{2}, VMMBase:inner_op{1}, VMMBase:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VMMBase:RC:$ra);
  dag InOperandList = (ins VMMBase:RC:$rb, VMMBase:RC:$rt);
  string AsmString = !strconcat(VMMBase:instr_asm, "	$ra, $rb, $rt");
  list<dag> Pattern = [(set VMMBase:RC:$ra, (VMMBase:OpNode VMMBase:RC:$rb, VMMBase:RC:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = VMMBase:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class VMovBase<bits<3> VMovBase:typeop = { ?, ?, ? }, bits<3> VMovBase:op = { ?, ?, ? }, bits<10> VMovBase:inner_op = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ? }, string VMovBase:instr_asm = ?, SDNode VMovBase:Op = ?, RegisterClass VMovBase:RC = ?, RegisterClass VMovBase:RD = ?, InstrItinClass VMovBase:itin = ?> {	// Instruction InstDSP F_2Reg_imm4
  field bits<32> Inst = { VMovBase:typeop{2}, VMovBase:typeop{1}, VMovBase:typeop{0}, VMovBase:op{2}, VMovBase:op{1}, VMovBase:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, VMovBase:inner_op{9}, VMovBase:inner_op{8}, VMovBase:inner_op{7}, VMovBase:inner_op{6}, VMovBase:inner_op{5}, VMovBase:inner_op{4}, VMovBase:inner_op{3}, VMovBase:inner_op{2}, VMovBase:inner_op{1}, VMovBase:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VMovBase:RC:$ra);
  dag InOperandList = (ins VMovBase:RD:$rb, uimm16:$imm);
  string AsmString = !strconcat(VMovBase:instr_asm, "	$ra,$rb,$imm");
  list<dag> Pattern = [(set VMovBase:RC:$ra, (VMovBase:Op VMovBase:RD:$rb, immZExt16:$imm))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = VMovBase:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
class ValueType<int ValueType:size = ?, int ValueType:value = ?> {
  string Namespace = "MVT";
  int Size = ValueType:size;
  int Value = ValueType:value;
  string NAME = ?;
}
class WriteRes<SchedWrite WriteRes:write = ?, list<ProcResourceKind> WriteRes:resources = ?> {	// ProcWriteResources
  list<ProcResourceKind> ProcResources = WriteRes:resources;
  list<int> ResourceCycles = [];
  int Latency = 1;
  int NumMicroOps = 1;
  bit BeginGroup = 0;
  bit EndGroup = 0;
  bit Unsupported = 0;
  SchedMachineModel SchedModel = ?;
  SchedWrite WriteType = WriteRes:write;
  string NAME = ?;
}
class WriteSequence<list<SchedWrite> WriteSequence:writes = ?, int WriteSequence:rep = 1> {	// SchedReadWrite SchedWrite
  list<SchedWrite> Writes = WriteSequence:writes;
  int Repeat = WriteSequence:rep;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
class bclr_fmt<bits<3> bclr_fmt:type = { ?, ?, ? }, bits<3> bclr_fmt:op = { ?, ?, ? }, bits<5> bclr_fmt:funct = { ?, ?, ?, ?, ? }, string bclr_fmt:instr_asm = ?, InstrItinClass bclr_fmt:itin = ?, Operand bclr_fmt:Od = ?, PatLeaf bclr_fmt:imm_type = ?, RegisterClass bclr_fmt:RC = ?, bit bclr_fmt:isComm = 0> {	// Instruction InstDSP F_1Reg_imm5
  field bits<32> Inst = { bclr_fmt:type{2}, bclr_fmt:type{1}, bclr_fmt:type{0}, bclr_fmt:op{2}, bclr_fmt:op{1}, bclr_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, 0, 0, 0, 0, 0, 0, imm5{4}, imm5{3}, imm5{2}, imm5{1}, imm5{0}, 0, 0, 0, 0, bclr_fmt:funct{4}, bclr_fmt:funct{3}, bclr_fmt:funct{2}, bclr_fmt:funct{1}, bclr_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins bclr_fmt:Od:$imm5);
  string AsmString = !strconcat(bclr_fmt:instr_asm, "	$ra, $imm5");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_bclr_qb bclr_fmt:imm_type:$imm5))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = bclr_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
class bfext_fmt<bits<3> bfext_fmt:type = { ?, ?, ? }, bits<3> bfext_fmt:op = { ?, ?, ? }, bits<4> bfext_fmt:funct = { ?, ?, ?, ? }, string bfext_fmt:instr_asm = ?, InstrItinClass bfext_fmt:itin = ?, Operand bfext_fmt:Od = ?, PatLeaf bfext_fmt:imm_type = ?, RegisterClass bfext_fmt:RC = ?, bit bfext_fmt:isComm = 0> {	// Instruction InstDSP F_2Reg_2imm5
  field bits<32> Inst = { bfext_fmt:type{2}, bfext_fmt:type{1}, bfext_fmt:type{0}, bfext_fmt:op{2}, bfext_fmt:op{1}, bfext_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, bfext_fmt:funct{3}, bfext_fmt:funct{2}, bfext_fmt:funct{1}, bfext_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins bfext_fmt:RC:$rb, bfext_fmt:Od:$imm5_2, bfext_fmt:Od:$imm5_1);
  string AsmString = !strconcat(bfext_fmt:instr_asm, "	$ra, $rb, $imm5_2, $imm5_1");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_bfext_qb bfext_fmt:RC:$rb, bfext_fmt:imm_type:$imm5_2, bfext_fmt:imm_type:$imm5_1))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = bfext_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
class bfextu_fmt<bits<3> bfextu_fmt:type = { ?, ?, ? }, bits<3> bfextu_fmt:op = { ?, ?, ? }, bits<4> bfextu_fmt:funct = { ?, ?, ?, ? }, string bfextu_fmt:instr_asm = ?, InstrItinClass bfextu_fmt:itin = ?, Operand bfextu_fmt:Od = ?, PatLeaf bfextu_fmt:imm_type = ?, RegisterClass bfextu_fmt:RC = ?, bit bfextu_fmt:isComm = 0> {	// Instruction InstDSP F_2Reg_2imm5
  field bits<32> Inst = { bfextu_fmt:type{2}, bfextu_fmt:type{1}, bfextu_fmt:type{0}, bfextu_fmt:op{2}, bfextu_fmt:op{1}, bfextu_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, bfextu_fmt:funct{3}, bfextu_fmt:funct{2}, bfextu_fmt:funct{1}, bfextu_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins bfextu_fmt:RC:$rb, bfextu_fmt:Od:$imm5_2, bfextu_fmt:Od:$imm5_1);
  string AsmString = !strconcat(bfextu_fmt:instr_asm, "	$ra, $rb, $imm5_2, $imm5_1");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_bfextu_qb bfextu_fmt:RC:$rb, bfextu_fmt:imm_type:$imm5_2, bfextu_fmt:imm_type:$imm5_1))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = bfextu_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
class bfst_fmt<bits<3> bfst_fmt:type = { ?, ?, ? }, bits<3> bfst_fmt:op = { ?, ?, ? }, bits<4> bfst_fmt:funct = { ?, ?, ?, ? }, string bfst_fmt:instr_asm = ?, InstrItinClass bfst_fmt:itin = ?, Operand bfst_fmt:Od = ?, PatLeaf bfst_fmt:imm_type = ?, RegisterClass bfst_fmt:RC = ?, bit bfst_fmt:isComm = 0> {	// Instruction InstDSP F_2Reg_2imm5
  field bits<32> Inst = { bfst_fmt:type{2}, bfst_fmt:type{1}, bfst_fmt:type{0}, bfst_fmt:op{2}, bfst_fmt:op{1}, bfst_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, bfst_fmt:funct{3}, bfst_fmt:funct{2}, bfst_fmt:funct{1}, bfst_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ro);
  dag InOperandList = (ins bfst_fmt:RC:$ra, bfst_fmt:RC:$rb, bfst_fmt:Od:$imm5_2, bfst_fmt:Od:$imm5_1);
  string AsmString = !strconcat(bfst_fmt:instr_asm, "	$ra, $rb, $imm5_2, $imm5_1");
  list<dag> Pattern = [(set CPURegs:$ro, (int_dsp_bfst_qb bfst_fmt:RC:$ra, bfst_fmt:RC:$rb, bfst_fmt:imm_type:$imm5_2, bfst_fmt:imm_type:$imm5_1))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = bfst_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
class bst_fmt<bits<3> bst_fmt:type = { ?, ?, ? }, bits<3> bst_fmt:op = { ?, ?, ? }, bits<5> bst_fmt:funct = { ?, ?, ?, ?, ? }, string bst_fmt:instr_asm = ?, InstrItinClass bst_fmt:itin = ?, Operand bst_fmt:Od = ?, PatLeaf bst_fmt:imm_type = ?, RegisterClass bst_fmt:RC = ?, bit bst_fmt:isComm = 0> {	// Instruction InstDSP F_1Reg_imm5
  field bits<32> Inst = { bst_fmt:type{2}, bst_fmt:type{1}, bst_fmt:type{0}, bst_fmt:op{2}, bst_fmt:op{1}, bst_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, 0, 0, 0, 0, 0, 0, imm5{4}, imm5{3}, imm5{2}, imm5{1}, imm5{0}, 0, 0, 0, 0, bst_fmt:funct{4}, bst_fmt:funct{3}, bst_fmt:funct{2}, bst_fmt:funct{1}, bst_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins bst_fmt:Od:$imm5);
  string AsmString = !strconcat(bst_fmt:instr_asm, "	$ra, $imm5");
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_bst_qb bst_fmt:imm_type:$imm5))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = bst_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loado16_fmt<bits<3> loado16_fmt:type = { ?, ?, ? }, bits<3> loado16_fmt:op = { ?, ?, ? }, bits<8> loado16_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string loado16_fmt:instr_asm = ?, InstrItinClass loado16_fmt:itin = ?, RegisterClass loado16_fmt:RD = ?, RegisterClass loado16_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { loado16_fmt:type{2}, loado16_fmt:type{1}, loado16_fmt:type{0}, loado16_fmt:op{2}, loado16_fmt:op{1}, loado16_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, loado16_fmt:funct{7}, loado16_fmt:funct{6}, loado16_fmt:funct{5}, loado16_fmt:funct{4}, loado16_fmt:funct{3}, loado16_fmt:funct{2}, loado16_fmt:funct{1}, loado16_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loado16_fmt:RD:$ra);
  dag InOperandList = (ins loado16_fmt:RS:$rb, loado16_fmt:RS:$rc);
  string AsmString = !strconcat(loado16_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set loado16_fmt:RD:$ra, (int_dsp_loado_16 loado16_fmt:RS:$rb, loado16_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loado16_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loado32_fmt<bits<3> loado32_fmt:type = { ?, ?, ? }, bits<3> loado32_fmt:op = { ?, ?, ? }, bits<8> loado32_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string loado32_fmt:instr_asm = ?, InstrItinClass loado32_fmt:itin = ?, RegisterClass loado32_fmt:RD = ?, RegisterClass loado32_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { loado32_fmt:type{2}, loado32_fmt:type{1}, loado32_fmt:type{0}, loado32_fmt:op{2}, loado32_fmt:op{1}, loado32_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, loado32_fmt:funct{7}, loado32_fmt:funct{6}, loado32_fmt:funct{5}, loado32_fmt:funct{4}, loado32_fmt:funct{3}, loado32_fmt:funct{2}, loado32_fmt:funct{1}, loado32_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loado32_fmt:RD:$ra);
  dag InOperandList = (ins loado32_fmt:RS:$rb, loado32_fmt:RS:$rc);
  string AsmString = !strconcat(loado32_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set loado32_fmt:RD:$ra, (int_dsp_loado_32 loado32_fmt:RS:$rb, loado32_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loado32_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loadu16_fmt<bits<3> loadu16_fmt:type = { ?, ?, ? }, bits<3> loadu16_fmt:op = { ?, ?, ? }, bits<5> loadu16_fmt:funct = { ?, ?, ?, ?, ? }, string loadu16_fmt:instr_asm = ?, InstrItinClass loadu16_fmt:itin = ?, RegisterClass loadu16_fmt:RD = ?, RegisterClass loadu16_fmt:RS = ?, Operand loadu16_fmt:Od = ?, PatLeaf loadu16_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { loadu16_fmt:type{2}, loadu16_fmt:type{1}, loadu16_fmt:type{0}, loadu16_fmt:op{2}, loadu16_fmt:op{1}, loadu16_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, loadu16_fmt:funct{4}, loadu16_fmt:funct{3}, loadu16_fmt:funct{2}, loadu16_fmt:funct{1}, loadu16_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loadu16_fmt:RD:$ra);
  dag InOperandList = (ins loadu16_fmt:RS:$rb, loadu16_fmt:Od:$imm9);
  string AsmString = !strconcat(loadu16_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set loadu16_fmt:RD:$ra, (int_dsp_loadu_16 loadu16_fmt:RS:$rb, loadu16_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loadu16_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loadu32_fmt<bits<3> loadu32_fmt:type = { ?, ?, ? }, bits<3> loadu32_fmt:op = { ?, ?, ? }, bits<5> loadu32_fmt:funct = { ?, ?, ?, ?, ? }, string loadu32_fmt:instr_asm = ?, InstrItinClass loadu32_fmt:itin = ?, RegisterClass loadu32_fmt:RD = ?, RegisterClass loadu32_fmt:RS = ?, Operand loadu32_fmt:Od = ?, PatLeaf loadu32_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { loadu32_fmt:type{2}, loadu32_fmt:type{1}, loadu32_fmt:type{0}, loadu32_fmt:op{2}, loadu32_fmt:op{1}, loadu32_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, loadu32_fmt:funct{4}, loadu32_fmt:funct{3}, loadu32_fmt:funct{2}, loadu32_fmt:funct{1}, loadu32_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loadu32_fmt:RD:$ra);
  dag InOperandList = (ins loadu32_fmt:RS:$rb, loadu32_fmt:Od:$imm9);
  string AsmString = !strconcat(loadu32_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set loadu32_fmt:RD:$ra, (int_dsp_loadu_32 loadu32_fmt:RS:$rb, loadu32_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loadu32_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loadu8_fmt<bits<3> loadu8_fmt:type = { ?, ?, ? }, bits<3> loadu8_fmt:op = { ?, ?, ? }, bits<5> loadu8_fmt:funct = { ?, ?, ?, ?, ? }, string loadu8_fmt:instr_asm = ?, InstrItinClass loadu8_fmt:itin = ?, RegisterClass loadu8_fmt:RD = ?, RegisterClass loadu8_fmt:RS = ?, Operand loadu8_fmt:Od = ?, PatLeaf loadu8_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { loadu8_fmt:type{2}, loadu8_fmt:type{1}, loadu8_fmt:type{0}, loadu8_fmt:op{2}, loadu8_fmt:op{1}, loadu8_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, loadu8_fmt:funct{4}, loadu8_fmt:funct{3}, loadu8_fmt:funct{2}, loadu8_fmt:funct{1}, loadu8_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loadu8_fmt:RD:$ra);
  dag InOperandList = (ins loadu8_fmt:RS:$rb, loadu8_fmt:Od:$imm9);
  string AsmString = !strconcat(loadu8_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set loadu8_fmt:RD:$ra, (int_dsp_loadu_8 loadu8_fmt:RS:$rb, loadu8_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loadu8_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loaduvh_fmt<bits<3> loaduvh_fmt:type = { ?, ?, ? }, bits<3> loaduvh_fmt:op = { ?, ?, ? }, bits<5> loaduvh_fmt:funct = { ?, ?, ?, ?, ? }, string loaduvh_fmt:instr_asm = ?, InstrItinClass loaduvh_fmt:itin = ?, RegisterClass loaduvh_fmt:RD = ?, RegisterClass loaduvh_fmt:RS = ?, Operand loaduvh_fmt:Od = ?, PatLeaf loaduvh_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { loaduvh_fmt:type{2}, loaduvh_fmt:type{1}, loaduvh_fmt:type{0}, loaduvh_fmt:op{2}, loaduvh_fmt:op{1}, loaduvh_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, loaduvh_fmt:funct{4}, loaduvh_fmt:funct{3}, loaduvh_fmt:funct{2}, loaduvh_fmt:funct{1}, loaduvh_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loaduvh_fmt:RD:$ra);
  dag InOperandList = (ins loaduvh_fmt:RS:$rb, loaduvh_fmt:Od:$imm9);
  string AsmString = !strconcat(loaduvh_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set loaduvh_fmt:RD:$ra, (int_dsp_loaduvh loaduvh_fmt:RS:$rb, loaduvh_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loaduvh_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loaduvl_fmt<bits<3> loaduvl_fmt:type = { ?, ?, ? }, bits<3> loaduvl_fmt:op = { ?, ?, ? }, bits<5> loaduvl_fmt:funct = { ?, ?, ?, ?, ? }, string loaduvl_fmt:instr_asm = ?, InstrItinClass loaduvl_fmt:itin = ?, RegisterClass loaduvl_fmt:RD = ?, RegisterClass loaduvl_fmt:RS = ?, Operand loaduvl_fmt:Od = ?, PatLeaf loaduvl_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { loaduvl_fmt:type{2}, loaduvl_fmt:type{1}, loaduvl_fmt:type{0}, loaduvl_fmt:op{2}, loaduvl_fmt:op{1}, loaduvl_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, loaduvl_fmt:funct{4}, loaduvl_fmt:funct{3}, loaduvl_fmt:funct{2}, loaduvl_fmt:funct{1}, loaduvl_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loaduvl_fmt:RD:$ra);
  dag InOperandList = (ins loaduvl_fmt:RS:$rb, loaduvl_fmt:Od:$imm9);
  string AsmString = !strconcat(loaduvl_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set loaduvl_fmt:RD:$ra, (int_dsp_loaduvl loaduvl_fmt:RS:$rb, loaduvl_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loaduvl_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loadvh_fmt<bits<3> loadvh_fmt:type = { ?, ?, ? }, bits<3> loadvh_fmt:op = { ?, ?, ? }, bits<5> loadvh_fmt:funct = { ?, ?, ?, ?, ? }, string loadvh_fmt:instr_asm = ?, InstrItinClass loadvh_fmt:itin = ?, RegisterClass loadvh_fmt:RD = ?, RegisterClass loadvh_fmt:RS = ?, Operand loadvh_fmt:Od = ?, PatLeaf loadvh_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { loadvh_fmt:type{2}, loadvh_fmt:type{1}, loadvh_fmt:type{0}, loadvh_fmt:op{2}, loadvh_fmt:op{1}, loadvh_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, loadvh_fmt:funct{4}, loadvh_fmt:funct{3}, loadvh_fmt:funct{2}, loadvh_fmt:funct{1}, loadvh_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loadvh_fmt:RD:$ra);
  dag InOperandList = (ins loadvh_fmt:RS:$rb, loadvh_fmt:Od:$imm9);
  string AsmString = !strconcat(loadvh_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set loadvh_fmt:RD:$ra, (int_dsp_loadvh loadvh_fmt:RS:$rb, loadvh_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loadvh_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class loadvl_fmt<bits<3> loadvl_fmt:type = { ?, ?, ? }, bits<3> loadvl_fmt:op = { ?, ?, ? }, bits<5> loadvl_fmt:funct = { ?, ?, ?, ?, ? }, string loadvl_fmt:instr_asm = ?, InstrItinClass loadvl_fmt:itin = ?, RegisterClass loadvl_fmt:RD = ?, RegisterClass loadvl_fmt:RS = ?, Operand loadvl_fmt:Od = ?, PatLeaf loadvl_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { loadvl_fmt:type{2}, loadvl_fmt:type{1}, loadvl_fmt:type{0}, loadvl_fmt:op{2}, loadvl_fmt:op{1}, loadvl_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, loadvl_fmt:funct{4}, loadvl_fmt:funct{3}, loadvl_fmt:funct{2}, loadvl_fmt:funct{1}, loadvl_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs loadvl_fmt:RD:$ra);
  dag InOperandList = (ins loadvl_fmt:RS:$rb, loadvl_fmt:Od:$imm9);
  string AsmString = !strconcat(loadvl_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set loadvl_fmt:RD:$ra, (int_dsp_loadvl loadvl_fmt:RS:$rb, loadvl_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = loadvl_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class shift_rotate_imm<bits<3> shift_rotate_imm:typeop = { ?, ?, ? }, bits<3> shift_rotate_imm:op = { ?, ?, ? }, bits<8> shift_rotate_imm:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, bits<4> shift_rotate_imm:isRotate = { ?, ?, ?, ? }, string shift_rotate_imm:instr_asm = ?, SDNode shift_rotate_imm:OpNode = ?, PatFrag shift_rotate_imm:PF = ?, Operand shift_rotate_imm:ImmOpnd = ?, RegisterClass shift_rotate_imm:RC = ?, bit shift_rotate_imm:isAlu = 0> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { shift_rotate_imm:typeop{2}, shift_rotate_imm:typeop{1}, shift_rotate_imm:typeop{0}, shift_rotate_imm:op{2}, shift_rotate_imm:op{1}, shift_rotate_imm:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, shift_rotate_imm:inner_op{7}, shift_rotate_imm:inner_op{6}, shift_rotate_imm:inner_op{5}, shift_rotate_imm:inner_op{4}, shift_rotate_imm:inner_op{3}, shift_rotate_imm:inner_op{2}, shift_rotate_imm:inner_op{1}, shift_rotate_imm:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins shift_rotate_imm:RC:$rb, shift_rotate_imm:ImmOpnd:$shamt);
  string AsmString = !strconcat(shift_rotate_imm:instr_asm, "	$ra, $rb, $shamt");
  list<dag> Pattern = [(set CPURegs:$ra, (shift_rotate_imm:OpNode shift_rotate_imm:RC:$rb, shift_rotate_imm:PF:$shamt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
class shift_rotate_imm32<bits<3> shift_rotate_imm32:typeop = { ?, ?, ? }, bits<3> shift_rotate_imm32:op = { ?, ?, ? }, bits<8> shift_rotate_imm32:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, bits<4> shift_rotate_imm32:isRotate = { ?, ?, ?, ? }, string shift_rotate_imm32:instr_asm = ?, SDNode shift_rotate_imm32:OpNode = ?> {	// Instruction InstDSP F_3Reg_001 shift_rotate_imm
  field bits<32> Inst = { shift_rotate_imm32:typeop{2}, shift_rotate_imm32:typeop{1}, shift_rotate_imm32:typeop{0}, shift_rotate_imm32:op{2}, shift_rotate_imm32:op{1}, shift_rotate_imm32:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, shift_rotate_imm32:inner_op{7}, shift_rotate_imm32:inner_op{6}, shift_rotate_imm32:inner_op{5}, shift_rotate_imm32:inner_op{4}, shift_rotate_imm32:inner_op{3}, shift_rotate_imm32:inner_op{2}, shift_rotate_imm32:inner_op{1}, shift_rotate_imm32:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit shift_rotate_imm:isAlu = 0;
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, shamt:$shamt);
  string AsmString = !strconcat(shift_rotate_imm32:instr_asm, "	$ra, $rb, $shamt");
  list<dag> Pattern = [(set CPURegs:$ra, (shift_rotate_imm32:OpNode CPURegs:$rb, immZExt5:$shamt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
class shift_rotate_reg<bits<3> shift_rotate_reg:typeop = { ?, ?, ? }, bits<3> shift_rotate_reg:op = { ?, ?, ? }, bits<8> shift_rotate_reg:inner_op = { ?, ?, ?, ?, ?, ?, ?, ? }, bits<4> shift_rotate_reg:isRotate = { ?, ?, ?, ? }, string shift_rotate_reg:instr_asm = ?, SDNode shift_rotate_reg:OpNode = ?, RegisterClass shift_rotate_reg:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { shift_rotate_reg:typeop{2}, shift_rotate_reg:typeop{1}, shift_rotate_reg:typeop{0}, shift_rotate_reg:op{2}, shift_rotate_reg:op{1}, shift_rotate_reg:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, shift_rotate_reg:inner_op{7}, shift_rotate_reg:inner_op{6}, shift_rotate_reg:inner_op{5}, shift_rotate_reg:inner_op{4}, shift_rotate_reg:inner_op{3}, shift_rotate_reg:inner_op{2}, shift_rotate_reg:inner_op{1}, shift_rotate_reg:inner_op{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins shift_rotate_reg:RC:$rb, shift_rotate_reg:RC:$rc);
  string AsmString = !strconcat(shift_rotate_reg:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set CPURegs:$ra, (shift_rotate_reg:OpNode shift_rotate_reg:RC:$rb, shift_rotate_reg:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeo16_fmt<bits<3> storeo16_fmt:type = { ?, ?, ? }, bits<3> storeo16_fmt:op = { ?, ?, ? }, bits<8> storeo16_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string storeo16_fmt:instr_asm = ?, InstrItinClass storeo16_fmt:itin = ?, RegisterClass storeo16_fmt:RD = ?, RegisterClass storeo16_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { storeo16_fmt:type{2}, storeo16_fmt:type{1}, storeo16_fmt:type{0}, storeo16_fmt:op{2}, storeo16_fmt:op{1}, storeo16_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, storeo16_fmt:funct{7}, storeo16_fmt:funct{6}, storeo16_fmt:funct{5}, storeo16_fmt:funct{4}, storeo16_fmt:funct{3}, storeo16_fmt:funct{2}, storeo16_fmt:funct{1}, storeo16_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storeo16_fmt:RD:$ra);
  dag InOperandList = (ins storeo16_fmt:RS:$rb, storeo16_fmt:RS:$rc);
  string AsmString = !strconcat(storeo16_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set storeo16_fmt:RD:$ra, (int_dsp_storeo_16 storeo16_fmt:RS:$rb, storeo16_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeo16_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeo32_fmt<bits<3> storeo32_fmt:type = { ?, ?, ? }, bits<3> storeo32_fmt:op = { ?, ?, ? }, bits<8> storeo32_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string storeo32_fmt:instr_asm = ?, InstrItinClass storeo32_fmt:itin = ?, RegisterClass storeo32_fmt:RD = ?, RegisterClass storeo32_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { storeo32_fmt:type{2}, storeo32_fmt:type{1}, storeo32_fmt:type{0}, storeo32_fmt:op{2}, storeo32_fmt:op{1}, storeo32_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, storeo32_fmt:funct{7}, storeo32_fmt:funct{6}, storeo32_fmt:funct{5}, storeo32_fmt:funct{4}, storeo32_fmt:funct{3}, storeo32_fmt:funct{2}, storeo32_fmt:funct{1}, storeo32_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storeo32_fmt:RD:$ra);
  dag InOperandList = (ins storeo32_fmt:RS:$rb, storeo32_fmt:RS:$rc);
  string AsmString = !strconcat(storeo32_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set storeo32_fmt:RD:$ra, (int_dsp_storeo_32 storeo32_fmt:RS:$rb, storeo32_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeo32_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeu10_fmt<bits<3> storeu10_fmt:type = { ?, ?, ? }, bits<3> storeu10_fmt:op = { ?, ?, ? }, bits<5> storeu10_fmt:funct = { ?, ?, ?, ?, ? }, string storeu10_fmt:instr_asm = ?, InstrItinClass storeu10_fmt:itin = ?, RegisterClass storeu10_fmt:RD = ?, RegisterClass storeu10_fmt:RS = ?, Operand storeu10_fmt:Od = ?, PatLeaf storeu10_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storeu10_fmt:type{2}, storeu10_fmt:type{1}, storeu10_fmt:type{0}, storeu10_fmt:op{2}, storeu10_fmt:op{1}, storeu10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storeu10_fmt:funct{4}, storeu10_fmt:funct{3}, storeu10_fmt:funct{2}, storeu10_fmt:funct{1}, storeu10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storeu10_fmt:RD:$ra);
  dag InOperandList = (ins storeu10_fmt:RS:$rb, storeu10_fmt:Od:$imm9);
  string AsmString = !strconcat(storeu10_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set storeu10_fmt:RD:$ra, (int_dsp_storeu_10 storeu10_fmt:RS:$rb, storeu10_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeu10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeu16_fmt<bits<3> storeu16_fmt:type = { ?, ?, ? }, bits<3> storeu16_fmt:op = { ?, ?, ? }, bits<5> storeu16_fmt:funct = { ?, ?, ?, ?, ? }, string storeu16_fmt:instr_asm = ?, InstrItinClass storeu16_fmt:itin = ?, RegisterClass storeu16_fmt:RD = ?, RegisterClass storeu16_fmt:RS = ?, Operand storeu16_fmt:Od = ?, PatLeaf storeu16_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storeu16_fmt:type{2}, storeu16_fmt:type{1}, storeu16_fmt:type{0}, storeu16_fmt:op{2}, storeu16_fmt:op{1}, storeu16_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storeu16_fmt:funct{4}, storeu16_fmt:funct{3}, storeu16_fmt:funct{2}, storeu16_fmt:funct{1}, storeu16_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins storeu16_fmt:RD:$ra, storeu16_fmt:RS:$rb, storeu16_fmt:Od:$imm9);
  string AsmString = !strconcat(storeu16_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(int_dsp_storeu_16 storeu16_fmt:RD:$ra, storeu16_fmt:RS:$rb, storeu16_fmt:imm_type:$imm9)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeu16_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeu20_fmt<bits<3> storeu20_fmt:type = { ?, ?, ? }, bits<3> storeu20_fmt:op = { ?, ?, ? }, bits<5> storeu20_fmt:funct = { ?, ?, ?, ?, ? }, string storeu20_fmt:instr_asm = ?, InstrItinClass storeu20_fmt:itin = ?, RegisterClass storeu20_fmt:RD = ?, RegisterClass storeu20_fmt:RS = ?, Operand storeu20_fmt:Od = ?, PatLeaf storeu20_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storeu20_fmt:type{2}, storeu20_fmt:type{1}, storeu20_fmt:type{0}, storeu20_fmt:op{2}, storeu20_fmt:op{1}, storeu20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storeu20_fmt:funct{4}, storeu20_fmt:funct{3}, storeu20_fmt:funct{2}, storeu20_fmt:funct{1}, storeu20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storeu20_fmt:RD:$ra);
  dag InOperandList = (ins storeu20_fmt:RS:$rb, storeu20_fmt:Od:$imm9);
  string AsmString = !strconcat(storeu20_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set storeu20_fmt:RD:$ra, (int_dsp_storeu_20 storeu20_fmt:RS:$rb, storeu20_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeu20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeu32_fmt<bits<3> storeu32_fmt:type = { ?, ?, ? }, bits<3> storeu32_fmt:op = { ?, ?, ? }, bits<5> storeu32_fmt:funct = { ?, ?, ?, ?, ? }, string storeu32_fmt:instr_asm = ?, InstrItinClass storeu32_fmt:itin = ?, RegisterClass storeu32_fmt:RD = ?, RegisterClass storeu32_fmt:RS = ?, Operand storeu32_fmt:Od = ?, PatLeaf storeu32_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storeu32_fmt:type{2}, storeu32_fmt:type{1}, storeu32_fmt:type{0}, storeu32_fmt:op{2}, storeu32_fmt:op{1}, storeu32_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storeu32_fmt:funct{4}, storeu32_fmt:funct{3}, storeu32_fmt:funct{2}, storeu32_fmt:funct{1}, storeu32_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins storeu32_fmt:RD:$ra, storeu32_fmt:RS:$rb, storeu32_fmt:Od:$imm9);
  string AsmString = !strconcat(storeu32_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(int_dsp_storeu_32 storeu32_fmt:RD:$ra, storeu32_fmt:RS:$rb, storeu32_fmt:imm_type:$imm9)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeu32_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeu40_fmt<bits<3> storeu40_fmt:type = { ?, ?, ? }, bits<3> storeu40_fmt:op = { ?, ?, ? }, bits<5> storeu40_fmt:funct = { ?, ?, ?, ?, ? }, string storeu40_fmt:instr_asm = ?, InstrItinClass storeu40_fmt:itin = ?, RegisterClass storeu40_fmt:RD = ?, RegisterClass storeu40_fmt:RS = ?, Operand storeu40_fmt:Od = ?, PatLeaf storeu40_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storeu40_fmt:type{2}, storeu40_fmt:type{1}, storeu40_fmt:type{0}, storeu40_fmt:op{2}, storeu40_fmt:op{1}, storeu40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storeu40_fmt:funct{4}, storeu40_fmt:funct{3}, storeu40_fmt:funct{2}, storeu40_fmt:funct{1}, storeu40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storeu40_fmt:RD:$ra);
  dag InOperandList = (ins storeu40_fmt:RS:$rb, storeu40_fmt:Od:$imm9);
  string AsmString = !strconcat(storeu40_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set storeu40_fmt:RD:$ra, (int_dsp_storeu_40 storeu40_fmt:RS:$rb, storeu40_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeu40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeu8_fmt<bits<3> storeu8_fmt:type = { ?, ?, ? }, bits<3> storeu8_fmt:op = { ?, ?, ? }, bits<5> storeu8_fmt:funct = { ?, ?, ?, ?, ? }, string storeu8_fmt:instr_asm = ?, InstrItinClass storeu8_fmt:itin = ?, RegisterClass storeu8_fmt:RD = ?, RegisterClass storeu8_fmt:RS = ?, Operand storeu8_fmt:Od = ?, PatLeaf storeu8_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storeu8_fmt:type{2}, storeu8_fmt:type{1}, storeu8_fmt:type{0}, storeu8_fmt:op{2}, storeu8_fmt:op{1}, storeu8_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storeu8_fmt:funct{4}, storeu8_fmt:funct{3}, storeu8_fmt:funct{2}, storeu8_fmt:funct{1}, storeu8_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins storeu8_fmt:RD:$ra, storeu8_fmt:RS:$rb, storeu8_fmt:Od:$imm9);
  string AsmString = !strconcat(storeu8_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(int_dsp_storeu_8 storeu8_fmt:RD:$ra, storeu8_fmt:RS:$rb, storeu8_fmt:imm_type:$imm9)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeu8_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeuvh_fmt<bits<3> storeuvh_fmt:type = { ?, ?, ? }, bits<3> storeuvh_fmt:op = { ?, ?, ? }, bits<5> storeuvh_fmt:funct = { ?, ?, ?, ?, ? }, string storeuvh_fmt:instr_asm = ?, InstrItinClass storeuvh_fmt:itin = ?, RegisterClass storeuvh_fmt:RD = ?, RegisterClass storeuvh_fmt:RS = ?, Operand storeuvh_fmt:Od = ?, PatLeaf storeuvh_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storeuvh_fmt:type{2}, storeuvh_fmt:type{1}, storeuvh_fmt:type{0}, storeuvh_fmt:op{2}, storeuvh_fmt:op{1}, storeuvh_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storeuvh_fmt:funct{4}, storeuvh_fmt:funct{3}, storeuvh_fmt:funct{2}, storeuvh_fmt:funct{1}, storeuvh_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storeuvh_fmt:RD:$ra);
  dag InOperandList = (ins storeuvh_fmt:RS:$rb, storeuvh_fmt:Od:$imm9);
  string AsmString = !strconcat(storeuvh_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set storeuvh_fmt:RD:$ra, (int_dsp_storeuvh storeuvh_fmt:RS:$rb, storeuvh_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeuvh_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storeuvl_fmt<bits<3> storeuvl_fmt:type = { ?, ?, ? }, bits<3> storeuvl_fmt:op = { ?, ?, ? }, bits<5> storeuvl_fmt:funct = { ?, ?, ?, ?, ? }, string storeuvl_fmt:instr_asm = ?, InstrItinClass storeuvl_fmt:itin = ?, RegisterClass storeuvl_fmt:RD = ?, RegisterClass storeuvl_fmt:RS = ?, Operand storeuvl_fmt:Od = ?, PatLeaf storeuvl_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storeuvl_fmt:type{2}, storeuvl_fmt:type{1}, storeuvl_fmt:type{0}, storeuvl_fmt:op{2}, storeuvl_fmt:op{1}, storeuvl_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storeuvl_fmt:funct{4}, storeuvl_fmt:funct{3}, storeuvl_fmt:funct{2}, storeuvl_fmt:funct{1}, storeuvl_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storeuvl_fmt:RD:$ra);
  dag InOperandList = (ins storeuvl_fmt:RS:$rb, storeuvl_fmt:Od:$imm9);
  string AsmString = !strconcat(storeuvl_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set storeuvl_fmt:RD:$ra, (int_dsp_storeuvl storeuvl_fmt:RS:$rb, storeuvl_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storeuvl_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storevh_fmt<bits<3> storevh_fmt:type = { ?, ?, ? }, bits<3> storevh_fmt:op = { ?, ?, ? }, bits<5> storevh_fmt:funct = { ?, ?, ?, ?, ? }, string storevh_fmt:instr_asm = ?, InstrItinClass storevh_fmt:itin = ?, RegisterClass storevh_fmt:RD = ?, RegisterClass storevh_fmt:RS = ?, Operand storevh_fmt:Od = ?, PatLeaf storevh_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storevh_fmt:type{2}, storevh_fmt:type{1}, storevh_fmt:type{0}, storevh_fmt:op{2}, storevh_fmt:op{1}, storevh_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storevh_fmt:funct{4}, storevh_fmt:funct{3}, storevh_fmt:funct{2}, storevh_fmt:funct{1}, storevh_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storevh_fmt:RD:$ra);
  dag InOperandList = (ins storevh_fmt:RS:$rb, storevh_fmt:Od:$imm9);
  string AsmString = !strconcat(storevh_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set storevh_fmt:RD:$ra, (int_dsp_storevh storevh_fmt:RS:$rb, storevh_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storevh_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class storevl_fmt<bits<3> storevl_fmt:type = { ?, ?, ? }, bits<3> storevl_fmt:op = { ?, ?, ? }, bits<5> storevl_fmt:funct = { ?, ?, ?, ?, ? }, string storevl_fmt:instr_asm = ?, InstrItinClass storevl_fmt:itin = ?, RegisterClass storevl_fmt:RD = ?, RegisterClass storevl_fmt:RS = ?, Operand storevl_fmt:Od = ?, PatLeaf storevl_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { storevl_fmt:type{2}, storevl_fmt:type{1}, storevl_fmt:type{0}, storevl_fmt:op{2}, storevl_fmt:op{1}, storevl_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, storevl_fmt:funct{4}, storevl_fmt:funct{3}, storevl_fmt:funct{2}, storevl_fmt:funct{1}, storevl_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs storevl_fmt:RD:$ra);
  dag InOperandList = (ins storevl_fmt:RS:$rb, storevl_fmt:Od:$imm9);
  string AsmString = !strconcat(storevl_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set storevl_fmt:RD:$ra, (int_dsp_storevl storevl_fmt:RS:$rb, storevl_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = storevl_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class unknown_class {
  string NAME = ?;
}
class vabs40_fmt<bits<3> vabs40_fmt:type = { ?, ?, ? }, bits<3> vabs40_fmt:op = { ?, ?, ? }, bits<8> vabs40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vabs40_fmt:instr_asm = ?, InstrItinClass vabs40_fmt:itin = ?, RegisterClass vabs40_fmt:RC = ?> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { vabs40_fmt:type{2}, vabs40_fmt:type{1}, vabs40_fmt:type{0}, vabs40_fmt:op{2}, vabs40_fmt:op{1}, vabs40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, vabs40_fmt:funct{7}, vabs40_fmt:funct{6}, vabs40_fmt:funct{5}, vabs40_fmt:funct{4}, vabs40_fmt:funct{3}, vabs40_fmt:funct{2}, vabs40_fmt:funct{1}, vabs40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vabs40_fmt:RC:$ra);
  dag InOperandList = (ins vabs40_fmt:RC:$rb);
  string AsmString = !strconcat(vabs40_fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set vabs40_fmt:RC:$ra, (int_dsp_vabs_40 vabs40_fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vabs40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vabs_10_fmt<bits<3> vabs_10_fmt:type = { ?, ?, ? }, bits<3> vabs_10_fmt:op = { ?, ?, ? }, bits<8> vabs_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vabs_10_fmt:instr_asm = ?, InstrItinClass vabs_10_fmt:itin = ?, RegisterClass vabs_10_fmt:RC = ?> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { vabs_10_fmt:type{2}, vabs_10_fmt:type{1}, vabs_10_fmt:type{0}, vabs_10_fmt:op{2}, vabs_10_fmt:op{1}, vabs_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, vabs_10_fmt:funct{7}, vabs_10_fmt:funct{6}, vabs_10_fmt:funct{5}, vabs_10_fmt:funct{4}, vabs_10_fmt:funct{3}, vabs_10_fmt:funct{2}, vabs_10_fmt:funct{1}, vabs_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vabs_10_fmt:RC:$ra);
  dag InOperandList = (ins vabs_10_fmt:RC:$rb);
  string AsmString = !strconcat(vabs_10_fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set vabs_10_fmt:RC:$ra, (int_dsp_vabs_10 vabs_10_fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vabs_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vabs_20_fmt<bits<3> vabs_20_fmt:type = { ?, ?, ? }, bits<3> vabs_20_fmt:op = { ?, ?, ? }, bits<8> vabs_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vabs_20_fmt:instr_asm = ?, InstrItinClass vabs_20_fmt:itin = ?, RegisterClass vabs_20_fmt:RC = ?> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { vabs_20_fmt:type{2}, vabs_20_fmt:type{1}, vabs_20_fmt:type{0}, vabs_20_fmt:op{2}, vabs_20_fmt:op{1}, vabs_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, vabs_20_fmt:funct{7}, vabs_20_fmt:funct{6}, vabs_20_fmt:funct{5}, vabs_20_fmt:funct{4}, vabs_20_fmt:funct{3}, vabs_20_fmt:funct{2}, vabs_20_fmt:funct{1}, vabs_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vabs_20_fmt:RC:$ra);
  dag InOperandList = (ins vabs_20_fmt:RC:$rb);
  string AsmString = !strconcat(vabs_20_fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set vabs_20_fmt:RC:$ra, (int_dsp_vabs_20 vabs_20_fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vabs_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vadd40_fmt<bits<3> vadd40_fmt:type = { ?, ?, ? }, bits<3> vadd40_fmt:op = { ?, ?, ? }, bits<8> vadd40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vadd40_fmt:instr_asm = ?, InstrItinClass vadd40_fmt:itin = ?, RegisterClass vadd40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vadd40_fmt:type{2}, vadd40_fmt:type{1}, vadd40_fmt:type{0}, vadd40_fmt:op{2}, vadd40_fmt:op{1}, vadd40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vadd40_fmt:funct{7}, vadd40_fmt:funct{6}, vadd40_fmt:funct{5}, vadd40_fmt:funct{4}, vadd40_fmt:funct{3}, vadd40_fmt:funct{2}, vadd40_fmt:funct{1}, vadd40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vadd40_fmt:RC:$ra);
  dag InOperandList = (ins vadd40_fmt:RC:$rb, vadd40_fmt:RC:$rc);
  string AsmString = !strconcat(vadd40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vadd40_fmt:RC:$ra, (int_dsp_vadd_40 vadd40_fmt:RC:$rb, vadd40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vadd40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vadd_10_fmt<bits<3> vadd_10_fmt:type = { ?, ?, ? }, bits<3> vadd_10_fmt:op = { ?, ?, ? }, bits<8> vadd_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vadd_10_fmt:instr_asm = ?, InstrItinClass vadd_10_fmt:itin = ?, RegisterClass vadd_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vadd_10_fmt:type{2}, vadd_10_fmt:type{1}, vadd_10_fmt:type{0}, vadd_10_fmt:op{2}, vadd_10_fmt:op{1}, vadd_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vadd_10_fmt:funct{7}, vadd_10_fmt:funct{6}, vadd_10_fmt:funct{5}, vadd_10_fmt:funct{4}, vadd_10_fmt:funct{3}, vadd_10_fmt:funct{2}, vadd_10_fmt:funct{1}, vadd_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vadd_10_fmt:RC:$ra);
  dag InOperandList = (ins vadd_10_fmt:RC:$rb, vadd_10_fmt:RC:$rc);
  string AsmString = !strconcat(vadd_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vadd_10_fmt:RC:$ra, (int_dsp_vadd_10 vadd_10_fmt:RC:$rb, vadd_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vadd_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vadd_20_fmt<bits<3> vadd_20_fmt:type = { ?, ?, ? }, bits<3> vadd_20_fmt:op = { ?, ?, ? }, bits<8> vadd_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vadd_20_fmt:instr_asm = ?, InstrItinClass vadd_20_fmt:itin = ?, RegisterClass vadd_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vadd_20_fmt:type{2}, vadd_20_fmt:type{1}, vadd_20_fmt:type{0}, vadd_20_fmt:op{2}, vadd_20_fmt:op{1}, vadd_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vadd_20_fmt:funct{7}, vadd_20_fmt:funct{6}, vadd_20_fmt:funct{5}, vadd_20_fmt:funct{4}, vadd_20_fmt:funct{3}, vadd_20_fmt:funct{2}, vadd_20_fmt:funct{1}, vadd_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vadd_20_fmt:RC:$ra);
  dag InOperandList = (ins vadd_20_fmt:RC:$rb, vadd_20_fmt:RC:$rc);
  string AsmString = !strconcat(vadd_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vadd_20_fmt:RC:$ra, (int_dsp_vadd_20 vadd_20_fmt:RC:$rb, vadd_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vadd_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vcmac_10_fmt<bits<3> vcmac_10_fmt:type = { ?, ?, ? }, bits<3> vcmac_10_fmt:op = { ?, ?, ? }, bits<8> vcmac_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vcmac_10_fmt:instr_asm = ?, InstrItinClass vcmac_10_fmt:itin = ?, RegisterClass vcmac_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vcmac_10_fmt:type{2}, vcmac_10_fmt:type{1}, vcmac_10_fmt:type{0}, vcmac_10_fmt:op{2}, vcmac_10_fmt:op{1}, vcmac_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vcmac_10_fmt:funct{7}, vcmac_10_fmt:funct{6}, vcmac_10_fmt:funct{5}, vcmac_10_fmt:funct{4}, vcmac_10_fmt:funct{3}, vcmac_10_fmt:funct{2}, vcmac_10_fmt:funct{1}, vcmac_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vcmac_10_fmt:RC:$ra);
  dag InOperandList = (ins vcmac_10_fmt:RC:$rb, vcmac_10_fmt:RC:$rc);
  string AsmString = !strconcat(vcmac_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vcmac_10_fmt:RC:$ra, (int_dsp_vcmac_10 vcmac_10_fmt:RC:$rb, vcmac_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vcmac_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vcmac_20_fmt<bits<3> vcmac_20_fmt:type = { ?, ?, ? }, bits<3> vcmac_20_fmt:op = { ?, ?, ? }, bits<8> vcmac_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vcmac_20_fmt:instr_asm = ?, InstrItinClass vcmac_20_fmt:itin = ?, RegisterClass vcmac_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vcmac_20_fmt:type{2}, vcmac_20_fmt:type{1}, vcmac_20_fmt:type{0}, vcmac_20_fmt:op{2}, vcmac_20_fmt:op{1}, vcmac_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vcmac_20_fmt:funct{7}, vcmac_20_fmt:funct{6}, vcmac_20_fmt:funct{5}, vcmac_20_fmt:funct{4}, vcmac_20_fmt:funct{3}, vcmac_20_fmt:funct{2}, vcmac_20_fmt:funct{1}, vcmac_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vcmac_20_fmt:RC:$ra);
  dag InOperandList = (ins vcmac_20_fmt:RC:$rb, vcmac_20_fmt:RC:$rc);
  string AsmString = !strconcat(vcmac_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vcmac_20_fmt:RC:$ra, (int_dsp_vcmac_20 vcmac_20_fmt:RC:$rb, vcmac_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vcmac_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vcmul_20_fmt<bits<3> vcmul_20_fmt:type = { ?, ?, ? }, bits<3> vcmul_20_fmt:op = { ?, ?, ? }, bits<8> vcmul_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vcmul_20_fmt:instr_asm = ?, InstrItinClass vcmul_20_fmt:itin = ?, RegisterClass vcmul_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vcmul_20_fmt:type{2}, vcmul_20_fmt:type{1}, vcmul_20_fmt:type{0}, vcmul_20_fmt:op{2}, vcmul_20_fmt:op{1}, vcmul_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vcmul_20_fmt:funct{7}, vcmul_20_fmt:funct{6}, vcmul_20_fmt:funct{5}, vcmul_20_fmt:funct{4}, vcmul_20_fmt:funct{3}, vcmul_20_fmt:funct{2}, vcmul_20_fmt:funct{1}, vcmul_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vcmul_20_fmt:RC:$ra);
  dag InOperandList = (ins vcmul_20_fmt:RC:$rb, vcmul_20_fmt:RC:$rc);
  string AsmString = !strconcat(vcmul_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vcmul_20_fmt:RC:$ra, (int_dsp_vcmul_20 vcmul_20_fmt:RC:$rb, vcmul_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vcmul_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vcmuli40_fmt<bits<3> vcmuli40_fmt:type = { ?, ?, ? }, bits<3> vcmuli40_fmt:op = { ?, ?, ? }, bits<8> vcmuli40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vcmuli40_fmt:instr_asm = ?, InstrItinClass vcmuli40_fmt:itin = ?, RegisterClass vcmuli40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vcmuli40_fmt:type{2}, vcmuli40_fmt:type{1}, vcmuli40_fmt:type{0}, vcmuli40_fmt:op{2}, vcmuli40_fmt:op{1}, vcmuli40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vcmuli40_fmt:funct{7}, vcmuli40_fmt:funct{6}, vcmuli40_fmt:funct{5}, vcmuli40_fmt:funct{4}, vcmuli40_fmt:funct{3}, vcmuli40_fmt:funct{2}, vcmuli40_fmt:funct{1}, vcmuli40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vcmuli40_fmt:RC:$ra);
  dag InOperandList = (ins vcmuli40_fmt:RC:$rb, vcmuli40_fmt:RC:$rc);
  string AsmString = !strconcat(vcmuli40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vcmuli40_fmt:RC:$ra, (int_dsp_vcmuli_40 vcmuli40_fmt:RC:$rb, vcmuli40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vcmuli40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vcmulr40_fmt<bits<3> vcmulr40_fmt:type = { ?, ?, ? }, bits<3> vcmulr40_fmt:op = { ?, ?, ? }, bits<8> vcmulr40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vcmulr40_fmt:instr_asm = ?, InstrItinClass vcmulr40_fmt:itin = ?, RegisterClass vcmulr40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vcmulr40_fmt:type{2}, vcmulr40_fmt:type{1}, vcmulr40_fmt:type{0}, vcmulr40_fmt:op{2}, vcmulr40_fmt:op{1}, vcmulr40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vcmulr40_fmt:funct{7}, vcmulr40_fmt:funct{6}, vcmulr40_fmt:funct{5}, vcmulr40_fmt:funct{4}, vcmulr40_fmt:funct{3}, vcmulr40_fmt:funct{2}, vcmulr40_fmt:funct{1}, vcmulr40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vcmulr40_fmt:RC:$ra);
  dag InOperandList = (ins vcmulr40_fmt:RC:$rb, vcmulr40_fmt:RC:$rc);
  string AsmString = !strconcat(vcmulr40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vcmulr40_fmt:RC:$ra, (int_dsp_vcmulr_40 vcmulr40_fmt:RC:$rb, vcmulr40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vcmulr40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class veq40_fmt<bits<3> veq40_fmt:type = { ?, ?, ? }, bits<3> veq40_fmt:op = { ?, ?, ? }, bits<8> veq40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string veq40_fmt:instr_asm = ?, InstrItinClass veq40_fmt:itin = ?, RegisterClass veq40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { veq40_fmt:type{2}, veq40_fmt:type{1}, veq40_fmt:type{0}, veq40_fmt:op{2}, veq40_fmt:op{1}, veq40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, veq40_fmt:funct{7}, veq40_fmt:funct{6}, veq40_fmt:funct{5}, veq40_fmt:funct{4}, veq40_fmt:funct{3}, veq40_fmt:funct{2}, veq40_fmt:funct{1}, veq40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs veq40_fmt:RC:$ra);
  dag InOperandList = (ins veq40_fmt:RC:$rb, veq40_fmt:RC:$rc);
  string AsmString = !strconcat(veq40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set veq40_fmt:RC:$ra, (int_dsp_veq_40 veq40_fmt:RC:$rb, veq40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = veq40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class veq_10_fmt<bits<3> veq_10_fmt:type = { ?, ?, ? }, bits<3> veq_10_fmt:op = { ?, ?, ? }, bits<8> veq_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string veq_10_fmt:instr_asm = ?, InstrItinClass veq_10_fmt:itin = ?, RegisterClass veq_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { veq_10_fmt:type{2}, veq_10_fmt:type{1}, veq_10_fmt:type{0}, veq_10_fmt:op{2}, veq_10_fmt:op{1}, veq_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, veq_10_fmt:funct{7}, veq_10_fmt:funct{6}, veq_10_fmt:funct{5}, veq_10_fmt:funct{4}, veq_10_fmt:funct{3}, veq_10_fmt:funct{2}, veq_10_fmt:funct{1}, veq_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs veq_10_fmt:RC:$ra);
  dag InOperandList = (ins veq_10_fmt:RC:$rb, veq_10_fmt:RC:$rc);
  string AsmString = !strconcat(veq_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set veq_10_fmt:RC:$ra, (int_dsp_veq_10 veq_10_fmt:RC:$rb, veq_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = veq_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class veq_20_fmt<bits<3> veq_20_fmt:type = { ?, ?, ? }, bits<3> veq_20_fmt:op = { ?, ?, ? }, bits<8> veq_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string veq_20_fmt:instr_asm = ?, InstrItinClass veq_20_fmt:itin = ?, RegisterClass veq_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { veq_20_fmt:type{2}, veq_20_fmt:type{1}, veq_20_fmt:type{0}, veq_20_fmt:op{2}, veq_20_fmt:op{1}, veq_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, veq_20_fmt:funct{7}, veq_20_fmt:funct{6}, veq_20_fmt:funct{5}, veq_20_fmt:funct{4}, veq_20_fmt:funct{3}, veq_20_fmt:funct{2}, veq_20_fmt:funct{1}, veq_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs veq_20_fmt:RC:$ra);
  dag InOperandList = (ins veq_20_fmt:RC:$rb, veq_20_fmt:RC:$rc);
  string AsmString = !strconcat(veq_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set veq_20_fmt:RC:$ra, (int_dsp_veq_20 veq_20_fmt:RC:$rb, veq_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = veq_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vfmac40_fmt<bits<3> vfmac40_fmt:type = { ?, ?, ? }, bits<3> vfmac40_fmt:op = { ?, ?, ? }, bits<8> vfmac40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vfmac40_fmt:instr_asm = ?, InstrItinClass vfmac40_fmt:itin = ?, RegisterClass vfmac40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vfmac40_fmt:type{2}, vfmac40_fmt:type{1}, vfmac40_fmt:type{0}, vfmac40_fmt:op{2}, vfmac40_fmt:op{1}, vfmac40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vfmac40_fmt:funct{7}, vfmac40_fmt:funct{6}, vfmac40_fmt:funct{5}, vfmac40_fmt:funct{4}, vfmac40_fmt:funct{3}, vfmac40_fmt:funct{2}, vfmac40_fmt:funct{1}, vfmac40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vfmac40_fmt:RC:$ra);
  dag InOperandList = (ins vfmac40_fmt:RC:$dst, vfmac40_fmt:RC:$rb, vfmac40_fmt:RC:$rc);
  string AsmString = !strconcat(vfmac40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vfmac40_fmt:RC:$ra, (int_dsp_vfmac_40 vfmac40_fmt:RC:$dst, vfmac40_fmt:RC:$rb, vfmac40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vfmac40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "$ra = $dst";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vfmac_10_fmt<bits<3> vfmac_10_fmt:type = { ?, ?, ? }, bits<3> vfmac_10_fmt:op = { ?, ?, ? }, bits<8> vfmac_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vfmac_10_fmt:instr_asm = ?, InstrItinClass vfmac_10_fmt:itin = ?, RegisterClass vfmac_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vfmac_10_fmt:type{2}, vfmac_10_fmt:type{1}, vfmac_10_fmt:type{0}, vfmac_10_fmt:op{2}, vfmac_10_fmt:op{1}, vfmac_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vfmac_10_fmt:funct{7}, vfmac_10_fmt:funct{6}, vfmac_10_fmt:funct{5}, vfmac_10_fmt:funct{4}, vfmac_10_fmt:funct{3}, vfmac_10_fmt:funct{2}, vfmac_10_fmt:funct{1}, vfmac_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vfmac_10_fmt:RC:$ra);
  dag InOperandList = (ins vfmac_10_fmt:RC:$rb, vfmac_10_fmt:RC:$rc);
  string AsmString = !strconcat(vfmac_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vfmac_10_fmt:RC:$ra, (int_dsp_vfmac_10 vfmac_10_fmt:RC:$rb, vfmac_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vfmac_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vfmac_20_fmt<bits<3> vfmac_20_fmt:type = { ?, ?, ? }, bits<3> vfmac_20_fmt:op = { ?, ?, ? }, bits<8> vfmac_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vfmac_20_fmt:instr_asm = ?, InstrItinClass vfmac_20_fmt:itin = ?, RegisterClass vfmac_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vfmac_20_fmt:type{2}, vfmac_20_fmt:type{1}, vfmac_20_fmt:type{0}, vfmac_20_fmt:op{2}, vfmac_20_fmt:op{1}, vfmac_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vfmac_20_fmt:funct{7}, vfmac_20_fmt:funct{6}, vfmac_20_fmt:funct{5}, vfmac_20_fmt:funct{4}, vfmac_20_fmt:funct{3}, vfmac_20_fmt:funct{2}, vfmac_20_fmt:funct{1}, vfmac_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vfmac_20_fmt:RC:$ra);
  dag InOperandList = (ins vfmac_20_fmt:RC:$rb, vfmac_20_fmt:RC:$rc);
  string AsmString = !strconcat(vfmac_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vfmac_20_fmt:RC:$ra, (int_dsp_vfmac_20 vfmac_20_fmt:RC:$rb, vfmac_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vfmac_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vfmul40_fmt<bits<3> vfmul40_fmt:type = { ?, ?, ? }, bits<3> vfmul40_fmt:op = { ?, ?, ? }, bits<8> vfmul40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vfmul40_fmt:instr_asm = ?, InstrItinClass vfmul40_fmt:itin = ?, RegisterClass vfmul40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vfmul40_fmt:type{2}, vfmul40_fmt:type{1}, vfmul40_fmt:type{0}, vfmul40_fmt:op{2}, vfmul40_fmt:op{1}, vfmul40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vfmul40_fmt:funct{7}, vfmul40_fmt:funct{6}, vfmul40_fmt:funct{5}, vfmul40_fmt:funct{4}, vfmul40_fmt:funct{3}, vfmul40_fmt:funct{2}, vfmul40_fmt:funct{1}, vfmul40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vfmul40_fmt:RC:$ra);
  dag InOperandList = (ins vfmul40_fmt:RC:$rb, vfmul40_fmt:RC:$rc);
  string AsmString = !strconcat(vfmul40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vfmul40_fmt:RC:$ra, (int_dsp_vfmul_40 vfmul40_fmt:RC:$rb, vfmul40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vfmul40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vfmul_10_fmt<bits<3> vfmul_10_fmt:type = { ?, ?, ? }, bits<3> vfmul_10_fmt:op = { ?, ?, ? }, bits<8> vfmul_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vfmul_10_fmt:instr_asm = ?, InstrItinClass vfmul_10_fmt:itin = ?, RegisterClass vfmul_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vfmul_10_fmt:type{2}, vfmul_10_fmt:type{1}, vfmul_10_fmt:type{0}, vfmul_10_fmt:op{2}, vfmul_10_fmt:op{1}, vfmul_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vfmul_10_fmt:funct{7}, vfmul_10_fmt:funct{6}, vfmul_10_fmt:funct{5}, vfmul_10_fmt:funct{4}, vfmul_10_fmt:funct{3}, vfmul_10_fmt:funct{2}, vfmul_10_fmt:funct{1}, vfmul_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vfmul_10_fmt:RC:$ra);
  dag InOperandList = (ins vfmul_10_fmt:RC:$rb, vfmul_10_fmt:RC:$rc);
  string AsmString = !strconcat(vfmul_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vfmul_10_fmt:RC:$ra, (int_dsp_vfmul_10 vfmul_10_fmt:RC:$rb, vfmul_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vfmul_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vfmul_20_fmt<bits<3> vfmul_20_fmt:type = { ?, ?, ? }, bits<3> vfmul_20_fmt:op = { ?, ?, ? }, bits<8> vfmul_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vfmul_20_fmt:instr_asm = ?, InstrItinClass vfmul_20_fmt:itin = ?, RegisterClass vfmul_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vfmul_20_fmt:type{2}, vfmul_20_fmt:type{1}, vfmul_20_fmt:type{0}, vfmul_20_fmt:op{2}, vfmul_20_fmt:op{1}, vfmul_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vfmul_20_fmt:funct{7}, vfmul_20_fmt:funct{6}, vfmul_20_fmt:funct{5}, vfmul_20_fmt:funct{4}, vfmul_20_fmt:funct{3}, vfmul_20_fmt:funct{2}, vfmul_20_fmt:funct{1}, vfmul_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vfmul_20_fmt:RC:$ra);
  dag InOperandList = (ins vfmul_20_fmt:RC:$rb, vfmul_20_fmt:RC:$rc);
  string AsmString = !strconcat(vfmul_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vfmul_20_fmt:RC:$ra, (int_dsp_vfmul_20 vfmul_20_fmt:RC:$rb, vfmul_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vfmul_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vge40_fmt<bits<3> vge40_fmt:type = { ?, ?, ? }, bits<3> vge40_fmt:op = { ?, ?, ? }, bits<8> vge40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vge40_fmt:instr_asm = ?, InstrItinClass vge40_fmt:itin = ?, RegisterClass vge40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vge40_fmt:type{2}, vge40_fmt:type{1}, vge40_fmt:type{0}, vge40_fmt:op{2}, vge40_fmt:op{1}, vge40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vge40_fmt:funct{7}, vge40_fmt:funct{6}, vge40_fmt:funct{5}, vge40_fmt:funct{4}, vge40_fmt:funct{3}, vge40_fmt:funct{2}, vge40_fmt:funct{1}, vge40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vge40_fmt:RC:$ra);
  dag InOperandList = (ins vge40_fmt:RC:$rb, vge40_fmt:RC:$rc);
  string AsmString = !strconcat(vge40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vge40_fmt:RC:$ra, (int_dsp_vge_40 vge40_fmt:RC:$rb, vge40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vge40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vge_10_fmt<bits<3> vge_10_fmt:type = { ?, ?, ? }, bits<3> vge_10_fmt:op = { ?, ?, ? }, bits<8> vge_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vge_10_fmt:instr_asm = ?, InstrItinClass vge_10_fmt:itin = ?, RegisterClass vge_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vge_10_fmt:type{2}, vge_10_fmt:type{1}, vge_10_fmt:type{0}, vge_10_fmt:op{2}, vge_10_fmt:op{1}, vge_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vge_10_fmt:funct{7}, vge_10_fmt:funct{6}, vge_10_fmt:funct{5}, vge_10_fmt:funct{4}, vge_10_fmt:funct{3}, vge_10_fmt:funct{2}, vge_10_fmt:funct{1}, vge_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vge_10_fmt:RC:$ra);
  dag InOperandList = (ins vge_10_fmt:RC:$rb, vge_10_fmt:RC:$rc);
  string AsmString = !strconcat(vge_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vge_10_fmt:RC:$ra, (int_dsp_vge_10 vge_10_fmt:RC:$rb, vge_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vge_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vge_20_fmt<bits<3> vge_20_fmt:type = { ?, ?, ? }, bits<3> vge_20_fmt:op = { ?, ?, ? }, bits<8> vge_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vge_20_fmt:instr_asm = ?, InstrItinClass vge_20_fmt:itin = ?, RegisterClass vge_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vge_20_fmt:type{2}, vge_20_fmt:type{1}, vge_20_fmt:type{0}, vge_20_fmt:op{2}, vge_20_fmt:op{1}, vge_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vge_20_fmt:funct{7}, vge_20_fmt:funct{6}, vge_20_fmt:funct{5}, vge_20_fmt:funct{4}, vge_20_fmt:funct{3}, vge_20_fmt:funct{2}, vge_20_fmt:funct{1}, vge_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vge_20_fmt:RC:$ra);
  dag InOperandList = (ins vge_20_fmt:RC:$rb, vge_20_fmt:RC:$rc);
  string AsmString = !strconcat(vge_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vge_20_fmt:RC:$ra, (int_dsp_vge_20 vge_20_fmt:RC:$rb, vge_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vge_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vgt40_fmt<bits<3> vgt40_fmt:type = { ?, ?, ? }, bits<3> vgt40_fmt:op = { ?, ?, ? }, bits<8> vgt40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vgt40_fmt:instr_asm = ?, InstrItinClass vgt40_fmt:itin = ?, RegisterClass vgt40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vgt40_fmt:type{2}, vgt40_fmt:type{1}, vgt40_fmt:type{0}, vgt40_fmt:op{2}, vgt40_fmt:op{1}, vgt40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vgt40_fmt:funct{7}, vgt40_fmt:funct{6}, vgt40_fmt:funct{5}, vgt40_fmt:funct{4}, vgt40_fmt:funct{3}, vgt40_fmt:funct{2}, vgt40_fmt:funct{1}, vgt40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vgt40_fmt:RC:$ra);
  dag InOperandList = (ins vgt40_fmt:RC:$rb, vgt40_fmt:RC:$rc);
  string AsmString = !strconcat(vgt40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vgt40_fmt:RC:$ra, (int_dsp_vgt_40 vgt40_fmt:RC:$rb, vgt40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vgt40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vgt_10_fmt<bits<3> vgt_10_fmt:type = { ?, ?, ? }, bits<3> vgt_10_fmt:op = { ?, ?, ? }, bits<8> vgt_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vgt_10_fmt:instr_asm = ?, InstrItinClass vgt_10_fmt:itin = ?, RegisterClass vgt_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vgt_10_fmt:type{2}, vgt_10_fmt:type{1}, vgt_10_fmt:type{0}, vgt_10_fmt:op{2}, vgt_10_fmt:op{1}, vgt_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vgt_10_fmt:funct{7}, vgt_10_fmt:funct{6}, vgt_10_fmt:funct{5}, vgt_10_fmt:funct{4}, vgt_10_fmt:funct{3}, vgt_10_fmt:funct{2}, vgt_10_fmt:funct{1}, vgt_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vgt_10_fmt:RC:$ra);
  dag InOperandList = (ins vgt_10_fmt:RC:$rb, vgt_10_fmt:RC:$rc);
  string AsmString = !strconcat(vgt_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vgt_10_fmt:RC:$ra, (int_dsp_vgt_10 vgt_10_fmt:RC:$rb, vgt_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vgt_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vgt_20_fmt<bits<3> vgt_20_fmt:type = { ?, ?, ? }, bits<3> vgt_20_fmt:op = { ?, ?, ? }, bits<8> vgt_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vgt_20_fmt:instr_asm = ?, InstrItinClass vgt_20_fmt:itin = ?, RegisterClass vgt_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vgt_20_fmt:type{2}, vgt_20_fmt:type{1}, vgt_20_fmt:type{0}, vgt_20_fmt:op{2}, vgt_20_fmt:op{1}, vgt_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vgt_20_fmt:funct{7}, vgt_20_fmt:funct{6}, vgt_20_fmt:funct{5}, vgt_20_fmt:funct{4}, vgt_20_fmt:funct{3}, vgt_20_fmt:funct{2}, vgt_20_fmt:funct{1}, vgt_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vgt_20_fmt:RC:$ra);
  dag InOperandList = (ins vgt_20_fmt:RC:$rb, vgt_20_fmt:RC:$rc);
  string AsmString = !strconcat(vgt_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vgt_20_fmt:RC:$ra, (int_dsp_vgt_20 vgt_20_fmt:RC:$rb, vgt_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vgt_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vle40_fmt<bits<3> vle40_fmt:type = { ?, ?, ? }, bits<3> vle40_fmt:op = { ?, ?, ? }, bits<8> vle40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vle40_fmt:instr_asm = ?, InstrItinClass vle40_fmt:itin = ?, RegisterClass vle40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vle40_fmt:type{2}, vle40_fmt:type{1}, vle40_fmt:type{0}, vle40_fmt:op{2}, vle40_fmt:op{1}, vle40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vle40_fmt:funct{7}, vle40_fmt:funct{6}, vle40_fmt:funct{5}, vle40_fmt:funct{4}, vle40_fmt:funct{3}, vle40_fmt:funct{2}, vle40_fmt:funct{1}, vle40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vle40_fmt:RC:$ra);
  dag InOperandList = (ins vle40_fmt:RC:$rb, vle40_fmt:RC:$rc);
  string AsmString = !strconcat(vle40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vle40_fmt:RC:$ra, (int_dsp_vle_40 vle40_fmt:RC:$rb, vle40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vle40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vle_10_fmt<bits<3> vle_10_fmt:type = { ?, ?, ? }, bits<3> vle_10_fmt:op = { ?, ?, ? }, bits<8> vle_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vle_10_fmt:instr_asm = ?, InstrItinClass vle_10_fmt:itin = ?, RegisterClass vle_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vle_10_fmt:type{2}, vle_10_fmt:type{1}, vle_10_fmt:type{0}, vle_10_fmt:op{2}, vle_10_fmt:op{1}, vle_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vle_10_fmt:funct{7}, vle_10_fmt:funct{6}, vle_10_fmt:funct{5}, vle_10_fmt:funct{4}, vle_10_fmt:funct{3}, vle_10_fmt:funct{2}, vle_10_fmt:funct{1}, vle_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vle_10_fmt:RC:$ra);
  dag InOperandList = (ins vle_10_fmt:RC:$rb, vle_10_fmt:RC:$rc);
  string AsmString = !strconcat(vle_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vle_10_fmt:RC:$ra, (int_dsp_vle_10 vle_10_fmt:RC:$rb, vle_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vle_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vle_20_fmt<bits<3> vle_20_fmt:type = { ?, ?, ? }, bits<3> vle_20_fmt:op = { ?, ?, ? }, bits<8> vle_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vle_20_fmt:instr_asm = ?, InstrItinClass vle_20_fmt:itin = ?, RegisterClass vle_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vle_20_fmt:type{2}, vle_20_fmt:type{1}, vle_20_fmt:type{0}, vle_20_fmt:op{2}, vle_20_fmt:op{1}, vle_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vle_20_fmt:funct{7}, vle_20_fmt:funct{6}, vle_20_fmt:funct{5}, vle_20_fmt:funct{4}, vle_20_fmt:funct{3}, vle_20_fmt:funct{2}, vle_20_fmt:funct{1}, vle_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vle_20_fmt:RC:$ra);
  dag InOperandList = (ins vle_20_fmt:RC:$rb, vle_20_fmt:RC:$rc);
  string AsmString = !strconcat(vle_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vle_20_fmt:RC:$ra, (int_dsp_vle_20 vle_20_fmt:RC:$rb, vle_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vle_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloado16_fmt<bits<3> vloado16_fmt:type = { ?, ?, ? }, bits<3> vloado16_fmt:op = { ?, ?, ? }, bits<8> vloado16_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vloado16_fmt:instr_asm = ?, InstrItinClass vloado16_fmt:itin = ?, RegisterClass vloado16_fmt:RD = ?, RegisterClass vloado16_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vloado16_fmt:type{2}, vloado16_fmt:type{1}, vloado16_fmt:type{0}, vloado16_fmt:op{2}, vloado16_fmt:op{1}, vloado16_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vloado16_fmt:funct{7}, vloado16_fmt:funct{6}, vloado16_fmt:funct{5}, vloado16_fmt:funct{4}, vloado16_fmt:funct{3}, vloado16_fmt:funct{2}, vloado16_fmt:funct{1}, vloado16_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloado16_fmt:RD:$ra);
  dag InOperandList = (ins vloado16_fmt:RS:$rb, vloado16_fmt:RS:$rc);
  string AsmString = !strconcat(vloado16_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vloado16_fmt:RD:$ra, (int_dsp_vloado_16 vloado16_fmt:RS:$rb, vloado16_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloado16_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloado32_fmt<bits<3> vloado32_fmt:type = { ?, ?, ? }, bits<3> vloado32_fmt:op = { ?, ?, ? }, bits<8> vloado32_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vloado32_fmt:instr_asm = ?, InstrItinClass vloado32_fmt:itin = ?, RegisterClass vloado32_fmt:RD = ?, RegisterClass vloado32_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vloado32_fmt:type{2}, vloado32_fmt:type{1}, vloado32_fmt:type{0}, vloado32_fmt:op{2}, vloado32_fmt:op{1}, vloado32_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vloado32_fmt:funct{7}, vloado32_fmt:funct{6}, vloado32_fmt:funct{5}, vloado32_fmt:funct{4}, vloado32_fmt:funct{3}, vloado32_fmt:funct{2}, vloado32_fmt:funct{1}, vloado32_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloado32_fmt:RD:$ra);
  dag InOperandList = (ins vloado32_fmt:RS:$rb, vloado32_fmt:RS:$rc);
  string AsmString = !strconcat(vloado32_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vloado32_fmt:RD:$ra, (int_dsp_vloado_32 vloado32_fmt:RS:$rb, vloado32_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloado32_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloado8_fmt<bits<3> vloado8_fmt:type = { ?, ?, ? }, bits<3> vloado8_fmt:op = { ?, ?, ? }, bits<8> vloado8_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vloado8_fmt:instr_asm = ?, InstrItinClass vloado8_fmt:itin = ?, RegisterClass vloado8_fmt:RD = ?, RegisterClass vloado8_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vloado8_fmt:type{2}, vloado8_fmt:type{1}, vloado8_fmt:type{0}, vloado8_fmt:op{2}, vloado8_fmt:op{1}, vloado8_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vloado8_fmt:funct{7}, vloado8_fmt:funct{6}, vloado8_fmt:funct{5}, vloado8_fmt:funct{4}, vloado8_fmt:funct{3}, vloado8_fmt:funct{2}, vloado8_fmt:funct{1}, vloado8_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloado8_fmt:RD:$ra);
  dag InOperandList = (ins vloado8_fmt:RS:$rb, vloado8_fmt:RS:$rc);
  string AsmString = !strconcat(vloado8_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vloado8_fmt:RD:$ra, (int_dsp_vloado_8 vloado8_fmt:RS:$rb, vloado8_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloado8_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadr16_fmt<bits<3> vloadr16_fmt:type = { ?, ?, ? }, bits<3> vloadr16_fmt:op = { ?, ?, ? }, bits<5> vloadr16_fmt:funct = { ?, ?, ?, ?, ? }, string vloadr16_fmt:instr_asm = ?, InstrItinClass vloadr16_fmt:itin = ?, RegisterClass vloadr16_fmt:RD = ?, RegisterClass vloadr16_fmt:RS = ?, Operand vloadr16_fmt:Od = ?, PatLeaf vloadr16_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadr16_fmt:type{2}, vloadr16_fmt:type{1}, vloadr16_fmt:type{0}, vloadr16_fmt:op{2}, vloadr16_fmt:op{1}, vloadr16_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadr16_fmt:funct{4}, vloadr16_fmt:funct{3}, vloadr16_fmt:funct{2}, vloadr16_fmt:funct{1}, vloadr16_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadr16_fmt:RD:$ra);
  dag InOperandList = (ins vloadr16_fmt:RS:$rb, vloadr16_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadr16_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadr16_fmt:RD:$ra, (int_dsp_vloadr_16 vloadr16_fmt:RS:$rb, vloadr16_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadr16_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadr32_fmt<bits<3> vloadr32_fmt:type = { ?, ?, ? }, bits<3> vloadr32_fmt:op = { ?, ?, ? }, bits<5> vloadr32_fmt:funct = { ?, ?, ?, ?, ? }, string vloadr32_fmt:instr_asm = ?, InstrItinClass vloadr32_fmt:itin = ?, RegisterClass vloadr32_fmt:RD = ?, RegisterClass vloadr32_fmt:RS = ?, Operand vloadr32_fmt:Od = ?, PatLeaf vloadr32_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadr32_fmt:type{2}, vloadr32_fmt:type{1}, vloadr32_fmt:type{0}, vloadr32_fmt:op{2}, vloadr32_fmt:op{1}, vloadr32_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadr32_fmt:funct{4}, vloadr32_fmt:funct{3}, vloadr32_fmt:funct{2}, vloadr32_fmt:funct{1}, vloadr32_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadr32_fmt:RD:$ra);
  dag InOperandList = (ins vloadr32_fmt:RS:$rb, vloadr32_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadr32_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadr32_fmt:RD:$ra, (int_dsp_vloadr_32 vloadr32_fmt:RS:$rb, vloadr32_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadr32_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadr8_fmt<bits<3> vloadr8_fmt:type = { ?, ?, ? }, bits<3> vloadr8_fmt:op = { ?, ?, ? }, bits<5> vloadr8_fmt:funct = { ?, ?, ?, ?, ? }, string vloadr8_fmt:instr_asm = ?, InstrItinClass vloadr8_fmt:itin = ?, RegisterClass vloadr8_fmt:RD = ?, RegisterClass vloadr8_fmt:RS = ?, Operand vloadr8_fmt:Od = ?, PatLeaf vloadr8_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadr8_fmt:type{2}, vloadr8_fmt:type{1}, vloadr8_fmt:type{0}, vloadr8_fmt:op{2}, vloadr8_fmt:op{1}, vloadr8_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadr8_fmt:funct{4}, vloadr8_fmt:funct{3}, vloadr8_fmt:funct{2}, vloadr8_fmt:funct{1}, vloadr8_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadr8_fmt:RD:$ra);
  dag InOperandList = (ins vloadr8_fmt:RS:$rb, vloadr8_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadr8_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadr8_fmt:RD:$ra, (int_dsp_vloadr_8 vloadr8_fmt:RS:$rb, vloadr8_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadr8_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadu16_fmt<bits<3> vloadu16_fmt:type = { ?, ?, ? }, bits<3> vloadu16_fmt:op = { ?, ?, ? }, bits<5> vloadu16_fmt:funct = { ?, ?, ?, ?, ? }, string vloadu16_fmt:instr_asm = ?, InstrItinClass vloadu16_fmt:itin = ?, RegisterClass vloadu16_fmt:RD = ?, RegisterClass vloadu16_fmt:RS = ?, Operand vloadu16_fmt:Od = ?, PatLeaf vloadu16_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadu16_fmt:type{2}, vloadu16_fmt:type{1}, vloadu16_fmt:type{0}, vloadu16_fmt:op{2}, vloadu16_fmt:op{1}, vloadu16_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadu16_fmt:funct{4}, vloadu16_fmt:funct{3}, vloadu16_fmt:funct{2}, vloadu16_fmt:funct{1}, vloadu16_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadu16_fmt:RD:$ra);
  dag InOperandList = (ins vloadu16_fmt:RS:$rb, vloadu16_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadu16_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadu16_fmt:RD:$ra, (int_dsp_vloadu_16 vloadu16_fmt:RS:$rb, vloadu16_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadu16_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadu32_fmt<bits<3> vloadu32_fmt:type = { ?, ?, ? }, bits<3> vloadu32_fmt:op = { ?, ?, ? }, bits<5> vloadu32_fmt:funct = { ?, ?, ?, ?, ? }, string vloadu32_fmt:instr_asm = ?, InstrItinClass vloadu32_fmt:itin = ?, RegisterClass vloadu32_fmt:RD = ?, RegisterClass vloadu32_fmt:RS = ?, Operand vloadu32_fmt:Od = ?, PatLeaf vloadu32_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadu32_fmt:type{2}, vloadu32_fmt:type{1}, vloadu32_fmt:type{0}, vloadu32_fmt:op{2}, vloadu32_fmt:op{1}, vloadu32_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadu32_fmt:funct{4}, vloadu32_fmt:funct{3}, vloadu32_fmt:funct{2}, vloadu32_fmt:funct{1}, vloadu32_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadu32_fmt:RD:$ra);
  dag InOperandList = (ins vloadu32_fmt:RS:$rb, vloadu32_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadu32_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadu32_fmt:RD:$ra, (int_dsp_vloadu_32 vloadu32_fmt:RS:$rb, vloadu32_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadu32_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadu8_fmt<bits<3> vloadu8_fmt:type = { ?, ?, ? }, bits<3> vloadu8_fmt:op = { ?, ?, ? }, bits<5> vloadu8_fmt:funct = { ?, ?, ?, ?, ? }, string vloadu8_fmt:instr_asm = ?, InstrItinClass vloadu8_fmt:itin = ?, RegisterClass vloadu8_fmt:RD = ?, RegisterClass vloadu8_fmt:RS = ?, Operand vloadu8_fmt:Od = ?, PatLeaf vloadu8_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadu8_fmt:type{2}, vloadu8_fmt:type{1}, vloadu8_fmt:type{0}, vloadu8_fmt:op{2}, vloadu8_fmt:op{1}, vloadu8_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadu8_fmt:funct{4}, vloadu8_fmt:funct{3}, vloadu8_fmt:funct{2}, vloadu8_fmt:funct{1}, vloadu8_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadu8_fmt:RD:$ra);
  dag InOperandList = (ins vloadu8_fmt:RS:$rb, vloadu8_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadu8_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadu8_fmt:RD:$ra, (int_dsp_vloadu_8 vloadu8_fmt:RS:$rb, vloadu8_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadu8_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadur16_fmt<bits<3> vloadur16_fmt:type = { ?, ?, ? }, bits<3> vloadur16_fmt:op = { ?, ?, ? }, bits<5> vloadur16_fmt:funct = { ?, ?, ?, ?, ? }, string vloadur16_fmt:instr_asm = ?, InstrItinClass vloadur16_fmt:itin = ?, RegisterClass vloadur16_fmt:RD = ?, RegisterClass vloadur16_fmt:RS = ?, Operand vloadur16_fmt:Od = ?, PatLeaf vloadur16_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadur16_fmt:type{2}, vloadur16_fmt:type{1}, vloadur16_fmt:type{0}, vloadur16_fmt:op{2}, vloadur16_fmt:op{1}, vloadur16_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadur16_fmt:funct{4}, vloadur16_fmt:funct{3}, vloadur16_fmt:funct{2}, vloadur16_fmt:funct{1}, vloadur16_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadur16_fmt:RD:$ra);
  dag InOperandList = (ins vloadur16_fmt:RS:$rb, vloadur16_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadur16_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadur16_fmt:RD:$ra, (int_dsp_vloadur_16 vloadur16_fmt:RS:$rb, vloadur16_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadur16_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadur32_fmt<bits<3> vloadur32_fmt:type = { ?, ?, ? }, bits<3> vloadur32_fmt:op = { ?, ?, ? }, bits<5> vloadur32_fmt:funct = { ?, ?, ?, ?, ? }, string vloadur32_fmt:instr_asm = ?, InstrItinClass vloadur32_fmt:itin = ?, RegisterClass vloadur32_fmt:RD = ?, RegisterClass vloadur32_fmt:RS = ?, Operand vloadur32_fmt:Od = ?, PatLeaf vloadur32_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadur32_fmt:type{2}, vloadur32_fmt:type{1}, vloadur32_fmt:type{0}, vloadur32_fmt:op{2}, vloadur32_fmt:op{1}, vloadur32_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadur32_fmt:funct{4}, vloadur32_fmt:funct{3}, vloadur32_fmt:funct{2}, vloadur32_fmt:funct{1}, vloadur32_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadur32_fmt:RD:$ra);
  dag InOperandList = (ins vloadur32_fmt:RS:$rb, vloadur32_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadur32_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadur32_fmt:RD:$ra, (int_dsp_vloadur_32 vloadur32_fmt:RS:$rb, vloadur32_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadur32_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vloadur8_fmt<bits<3> vloadur8_fmt:type = { ?, ?, ? }, bits<3> vloadur8_fmt:op = { ?, ?, ? }, bits<5> vloadur8_fmt:funct = { ?, ?, ?, ?, ? }, string vloadur8_fmt:instr_asm = ?, InstrItinClass vloadur8_fmt:itin = ?, RegisterClass vloadur8_fmt:RD = ?, RegisterClass vloadur8_fmt:RS = ?, Operand vloadur8_fmt:Od = ?, PatLeaf vloadur8_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vloadur8_fmt:type{2}, vloadur8_fmt:type{1}, vloadur8_fmt:type{0}, vloadur8_fmt:op{2}, vloadur8_fmt:op{1}, vloadur8_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vloadur8_fmt:funct{4}, vloadur8_fmt:funct{3}, vloadur8_fmt:funct{2}, vloadur8_fmt:funct{1}, vloadur8_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vloadur8_fmt:RD:$ra);
  dag InOperandList = (ins vloadur8_fmt:RS:$rb, vloadur8_fmt:Od:$imm9);
  string AsmString = !strconcat(vloadur8_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vloadur8_fmt:RD:$ra, (int_dsp_vloadur_8 vloadur8_fmt:RS:$rb, vloadur8_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vloadur8_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vlt40_fmt<bits<3> vlt40_fmt:type = { ?, ?, ? }, bits<3> vlt40_fmt:op = { ?, ?, ? }, bits<8> vlt40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vlt40_fmt:instr_asm = ?, InstrItinClass vlt40_fmt:itin = ?, RegisterClass vlt40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vlt40_fmt:type{2}, vlt40_fmt:type{1}, vlt40_fmt:type{0}, vlt40_fmt:op{2}, vlt40_fmt:op{1}, vlt40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vlt40_fmt:funct{7}, vlt40_fmt:funct{6}, vlt40_fmt:funct{5}, vlt40_fmt:funct{4}, vlt40_fmt:funct{3}, vlt40_fmt:funct{2}, vlt40_fmt:funct{1}, vlt40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vlt40_fmt:RC:$ra);
  dag InOperandList = (ins vlt40_fmt:RC:$rb, vlt40_fmt:RC:$rc);
  string AsmString = !strconcat(vlt40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vlt40_fmt:RC:$ra, (int_dsp_vlt_40 vlt40_fmt:RC:$rb, vlt40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vlt40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vlt_10_fmt<bits<3> vlt_10_fmt:type = { ?, ?, ? }, bits<3> vlt_10_fmt:op = { ?, ?, ? }, bits<8> vlt_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vlt_10_fmt:instr_asm = ?, InstrItinClass vlt_10_fmt:itin = ?, RegisterClass vlt_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vlt_10_fmt:type{2}, vlt_10_fmt:type{1}, vlt_10_fmt:type{0}, vlt_10_fmt:op{2}, vlt_10_fmt:op{1}, vlt_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vlt_10_fmt:funct{7}, vlt_10_fmt:funct{6}, vlt_10_fmt:funct{5}, vlt_10_fmt:funct{4}, vlt_10_fmt:funct{3}, vlt_10_fmt:funct{2}, vlt_10_fmt:funct{1}, vlt_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vlt_10_fmt:RC:$ra);
  dag InOperandList = (ins vlt_10_fmt:RC:$rb, vlt_10_fmt:RC:$rc);
  string AsmString = !strconcat(vlt_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vlt_10_fmt:RC:$ra, (int_dsp_vlt_10 vlt_10_fmt:RC:$rb, vlt_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vlt_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vlt_20_fmt<bits<3> vlt_20_fmt:type = { ?, ?, ? }, bits<3> vlt_20_fmt:op = { ?, ?, ? }, bits<8> vlt_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vlt_20_fmt:instr_asm = ?, InstrItinClass vlt_20_fmt:itin = ?, RegisterClass vlt_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vlt_20_fmt:type{2}, vlt_20_fmt:type{1}, vlt_20_fmt:type{0}, vlt_20_fmt:op{2}, vlt_20_fmt:op{1}, vlt_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vlt_20_fmt:funct{7}, vlt_20_fmt:funct{6}, vlt_20_fmt:funct{5}, vlt_20_fmt:funct{4}, vlt_20_fmt:funct{3}, vlt_20_fmt:funct{2}, vlt_20_fmt:funct{1}, vlt_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vlt_20_fmt:RC:$ra);
  dag InOperandList = (ins vlt_20_fmt:RC:$rb, vlt_20_fmt:RC:$rc);
  string AsmString = !strconcat(vlt_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vlt_20_fmt:RC:$ra, (int_dsp_vlt_20 vlt_20_fmt:RC:$rb, vlt_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vlt_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsl40_fmt<bits<3> vsl40_fmt:type = { ?, ?, ? }, bits<3> vsl40_fmt:op = { ?, ?, ? }, bits<8> vsl40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsl40_fmt:instr_asm = ?, InstrItinClass vsl40_fmt:itin = ?, RegisterClass vsl40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsl40_fmt:type{2}, vsl40_fmt:type{1}, vsl40_fmt:type{0}, vsl40_fmt:op{2}, vsl40_fmt:op{1}, vsl40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsl40_fmt:funct{7}, vsl40_fmt:funct{6}, vsl40_fmt:funct{5}, vsl40_fmt:funct{4}, vsl40_fmt:funct{3}, vsl40_fmt:funct{2}, vsl40_fmt:funct{1}, vsl40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsl40_fmt:RC:$ra);
  dag InOperandList = (ins vsl40_fmt:RC:$rb, vsl40_fmt:RC:$rc);
  string AsmString = !strconcat(vsl40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsl40_fmt:RC:$ra, (int_dsp_vsl_40 vsl40_fmt:RC:$rb, vsl40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsl40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsl_10_fmt<bits<3> vsl_10_fmt:type = { ?, ?, ? }, bits<3> vsl_10_fmt:op = { ?, ?, ? }, bits<8> vsl_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsl_10_fmt:instr_asm = ?, InstrItinClass vsl_10_fmt:itin = ?, RegisterClass vsl_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsl_10_fmt:type{2}, vsl_10_fmt:type{1}, vsl_10_fmt:type{0}, vsl_10_fmt:op{2}, vsl_10_fmt:op{1}, vsl_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsl_10_fmt:funct{7}, vsl_10_fmt:funct{6}, vsl_10_fmt:funct{5}, vsl_10_fmt:funct{4}, vsl_10_fmt:funct{3}, vsl_10_fmt:funct{2}, vsl_10_fmt:funct{1}, vsl_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsl_10_fmt:RC:$ra);
  dag InOperandList = (ins vsl_10_fmt:RC:$rb, vsl_10_fmt:RC:$rc);
  string AsmString = !strconcat(vsl_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsl_10_fmt:RC:$ra, (int_dsp_vsl_10 vsl_10_fmt:RC:$rb, vsl_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsl_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsl_20_fmt<bits<3> vsl_20_fmt:type = { ?, ?, ? }, bits<3> vsl_20_fmt:op = { ?, ?, ? }, bits<8> vsl_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsl_20_fmt:instr_asm = ?, InstrItinClass vsl_20_fmt:itin = ?, RegisterClass vsl_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsl_20_fmt:type{2}, vsl_20_fmt:type{1}, vsl_20_fmt:type{0}, vsl_20_fmt:op{2}, vsl_20_fmt:op{1}, vsl_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsl_20_fmt:funct{7}, vsl_20_fmt:funct{6}, vsl_20_fmt:funct{5}, vsl_20_fmt:funct{4}, vsl_20_fmt:funct{3}, vsl_20_fmt:funct{2}, vsl_20_fmt:funct{1}, vsl_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsl_20_fmt:RC:$ra);
  dag InOperandList = (ins vsl_20_fmt:RC:$rb, vsl_20_fmt:RC:$rc);
  string AsmString = !strconcat(vsl_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsl_20_fmt:RC:$ra, (int_dsp_vsl_20 vsl_20_fmt:RC:$rb, vsl_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsl_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsls40_fmt<bits<3> vsls40_fmt:type = { ?, ?, ? }, bits<3> vsls40_fmt:op = { ?, ?, ? }, bits<8> vsls40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsls40_fmt:instr_asm = ?, InstrItinClass vsls40_fmt:itin = ?, RegisterClass vsls40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsls40_fmt:type{2}, vsls40_fmt:type{1}, vsls40_fmt:type{0}, vsls40_fmt:op{2}, vsls40_fmt:op{1}, vsls40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsls40_fmt:funct{7}, vsls40_fmt:funct{6}, vsls40_fmt:funct{5}, vsls40_fmt:funct{4}, vsls40_fmt:funct{3}, vsls40_fmt:funct{2}, vsls40_fmt:funct{1}, vsls40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsls40_fmt:RC:$ra);
  dag InOperandList = (ins vsls40_fmt:RC:$rb, vsls40_fmt:RC:$rc);
  string AsmString = !strconcat(vsls40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsls40_fmt:RC:$ra, (int_dsp_vsls_40 vsls40_fmt:RC:$rb, vsls40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsls40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsls_10_fmt<bits<3> vsls_10_fmt:type = { ?, ?, ? }, bits<3> vsls_10_fmt:op = { ?, ?, ? }, bits<8> vsls_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsls_10_fmt:instr_asm = ?, InstrItinClass vsls_10_fmt:itin = ?, RegisterClass vsls_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsls_10_fmt:type{2}, vsls_10_fmt:type{1}, vsls_10_fmt:type{0}, vsls_10_fmt:op{2}, vsls_10_fmt:op{1}, vsls_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsls_10_fmt:funct{7}, vsls_10_fmt:funct{6}, vsls_10_fmt:funct{5}, vsls_10_fmt:funct{4}, vsls_10_fmt:funct{3}, vsls_10_fmt:funct{2}, vsls_10_fmt:funct{1}, vsls_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsls_10_fmt:RC:$ra);
  dag InOperandList = (ins vsls_10_fmt:RC:$rb, vsls_10_fmt:RC:$rc);
  string AsmString = !strconcat(vsls_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsls_10_fmt:RC:$ra, (int_dsp_vsls_10 vsls_10_fmt:RC:$rb, vsls_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsls_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsls_20_fmt<bits<3> vsls_20_fmt:type = { ?, ?, ? }, bits<3> vsls_20_fmt:op = { ?, ?, ? }, bits<8> vsls_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsls_20_fmt:instr_asm = ?, InstrItinClass vsls_20_fmt:itin = ?, RegisterClass vsls_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsls_20_fmt:type{2}, vsls_20_fmt:type{1}, vsls_20_fmt:type{0}, vsls_20_fmt:op{2}, vsls_20_fmt:op{1}, vsls_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsls_20_fmt:funct{7}, vsls_20_fmt:funct{6}, vsls_20_fmt:funct{5}, vsls_20_fmt:funct{4}, vsls_20_fmt:funct{3}, vsls_20_fmt:funct{2}, vsls_20_fmt:funct{1}, vsls_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsls_20_fmt:RC:$ra);
  dag InOperandList = (ins vsls_20_fmt:RC:$rb, vsls_20_fmt:RC:$rc);
  string AsmString = !strconcat(vsls_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsls_20_fmt:RC:$ra, (int_dsp_vsls_20 vsls_20_fmt:RC:$rb, vsls_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsls_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsra40_fmt<bits<3> vsra40_fmt:type = { ?, ?, ? }, bits<3> vsra40_fmt:op = { ?, ?, ? }, bits<8> vsra40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsra40_fmt:instr_asm = ?, InstrItinClass vsra40_fmt:itin = ?, RegisterClass vsra40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsra40_fmt:type{2}, vsra40_fmt:type{1}, vsra40_fmt:type{0}, vsra40_fmt:op{2}, vsra40_fmt:op{1}, vsra40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsra40_fmt:funct{7}, vsra40_fmt:funct{6}, vsra40_fmt:funct{5}, vsra40_fmt:funct{4}, vsra40_fmt:funct{3}, vsra40_fmt:funct{2}, vsra40_fmt:funct{1}, vsra40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsra40_fmt:RC:$ra);
  dag InOperandList = (ins vsra40_fmt:RC:$rb, vsra40_fmt:RC:$rc);
  string AsmString = !strconcat(vsra40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsra40_fmt:RC:$ra, (int_dsp_vsra_40 vsra40_fmt:RC:$rb, vsra40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsra40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsra_10_fmt<bits<3> vsra_10_fmt:type = { ?, ?, ? }, bits<3> vsra_10_fmt:op = { ?, ?, ? }, bits<8> vsra_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsra_10_fmt:instr_asm = ?, InstrItinClass vsra_10_fmt:itin = ?, RegisterClass vsra_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsra_10_fmt:type{2}, vsra_10_fmt:type{1}, vsra_10_fmt:type{0}, vsra_10_fmt:op{2}, vsra_10_fmt:op{1}, vsra_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsra_10_fmt:funct{7}, vsra_10_fmt:funct{6}, vsra_10_fmt:funct{5}, vsra_10_fmt:funct{4}, vsra_10_fmt:funct{3}, vsra_10_fmt:funct{2}, vsra_10_fmt:funct{1}, vsra_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsra_10_fmt:RC:$ra);
  dag InOperandList = (ins vsra_10_fmt:RC:$rb, vsra_10_fmt:RC:$rc);
  string AsmString = !strconcat(vsra_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsra_10_fmt:RC:$ra, (int_dsp_vsra_10 vsra_10_fmt:RC:$rb, vsra_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsra_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsra_20_fmt<bits<3> vsra_20_fmt:type = { ?, ?, ? }, bits<3> vsra_20_fmt:op = { ?, ?, ? }, bits<8> vsra_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsra_20_fmt:instr_asm = ?, InstrItinClass vsra_20_fmt:itin = ?, RegisterClass vsra_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsra_20_fmt:type{2}, vsra_20_fmt:type{1}, vsra_20_fmt:type{0}, vsra_20_fmt:op{2}, vsra_20_fmt:op{1}, vsra_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsra_20_fmt:funct{7}, vsra_20_fmt:funct{6}, vsra_20_fmt:funct{5}, vsra_20_fmt:funct{4}, vsra_20_fmt:funct{3}, vsra_20_fmt:funct{2}, vsra_20_fmt:funct{1}, vsra_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsra_20_fmt:RC:$ra);
  dag InOperandList = (ins vsra_20_fmt:RC:$rb, vsra_20_fmt:RC:$rc);
  string AsmString = !strconcat(vsra_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsra_20_fmt:RC:$ra, (int_dsp_vsra_20 vsra_20_fmt:RC:$rb, vsra_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsra_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsrl40_fmt<bits<3> vsrl40_fmt:type = { ?, ?, ? }, bits<3> vsrl40_fmt:op = { ?, ?, ? }, bits<8> vsrl40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsrl40_fmt:instr_asm = ?, InstrItinClass vsrl40_fmt:itin = ?, RegisterClass vsrl40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsrl40_fmt:type{2}, vsrl40_fmt:type{1}, vsrl40_fmt:type{0}, vsrl40_fmt:op{2}, vsrl40_fmt:op{1}, vsrl40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsrl40_fmt:funct{7}, vsrl40_fmt:funct{6}, vsrl40_fmt:funct{5}, vsrl40_fmt:funct{4}, vsrl40_fmt:funct{3}, vsrl40_fmt:funct{2}, vsrl40_fmt:funct{1}, vsrl40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsrl40_fmt:RC:$ra);
  dag InOperandList = (ins vsrl40_fmt:RC:$rb, vsrl40_fmt:RC:$rc);
  string AsmString = !strconcat(vsrl40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsrl40_fmt:RC:$ra, (int_dsp_vsrl_40 vsrl40_fmt:RC:$rb, vsrl40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsrl40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsrl_10_fmt<bits<3> vsrl_10_fmt:type = { ?, ?, ? }, bits<3> vsrl_10_fmt:op = { ?, ?, ? }, bits<8> vsrl_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsrl_10_fmt:instr_asm = ?, InstrItinClass vsrl_10_fmt:itin = ?, RegisterClass vsrl_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsrl_10_fmt:type{2}, vsrl_10_fmt:type{1}, vsrl_10_fmt:type{0}, vsrl_10_fmt:op{2}, vsrl_10_fmt:op{1}, vsrl_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsrl_10_fmt:funct{7}, vsrl_10_fmt:funct{6}, vsrl_10_fmt:funct{5}, vsrl_10_fmt:funct{4}, vsrl_10_fmt:funct{3}, vsrl_10_fmt:funct{2}, vsrl_10_fmt:funct{1}, vsrl_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsrl_10_fmt:RC:$ra);
  dag InOperandList = (ins vsrl_10_fmt:RC:$rb, vsrl_10_fmt:RC:$rc);
  string AsmString = !strconcat(vsrl_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsrl_10_fmt:RC:$ra, (int_dsp_vsrl_10 vsrl_10_fmt:RC:$rb, vsrl_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsrl_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsrl_20_fmt<bits<3> vsrl_20_fmt:type = { ?, ?, ? }, bits<3> vsrl_20_fmt:op = { ?, ?, ? }, bits<8> vsrl_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsrl_20_fmt:instr_asm = ?, InstrItinClass vsrl_20_fmt:itin = ?, RegisterClass vsrl_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsrl_20_fmt:type{2}, vsrl_20_fmt:type{1}, vsrl_20_fmt:type{0}, vsrl_20_fmt:op{2}, vsrl_20_fmt:op{1}, vsrl_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsrl_20_fmt:funct{7}, vsrl_20_fmt:funct{6}, vsrl_20_fmt:funct{5}, vsrl_20_fmt:funct{4}, vsrl_20_fmt:funct{3}, vsrl_20_fmt:funct{2}, vsrl_20_fmt:funct{1}, vsrl_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsrl_20_fmt:RC:$ra);
  dag InOperandList = (ins vsrl_20_fmt:RC:$rb, vsrl_20_fmt:RC:$rc);
  string AsmString = !strconcat(vsrl_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsrl_20_fmt:RC:$ra, (int_dsp_vsrl_20 vsrl_20_fmt:RC:$rb, vsrl_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsrl_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vstoreo10_fmt<bits<3> vstoreo10_fmt:type = { ?, ?, ? }, bits<3> vstoreo10_fmt:op = { ?, ?, ? }, bits<8> vstoreo10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vstoreo10_fmt:instr_asm = ?, InstrItinClass vstoreo10_fmt:itin = ?, RegisterClass vstoreo10_fmt:RD = ?, RegisterClass vstoreo10_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vstoreo10_fmt:type{2}, vstoreo10_fmt:type{1}, vstoreo10_fmt:type{0}, vstoreo10_fmt:op{2}, vstoreo10_fmt:op{1}, vstoreo10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vstoreo10_fmt:funct{7}, vstoreo10_fmt:funct{6}, vstoreo10_fmt:funct{5}, vstoreo10_fmt:funct{4}, vstoreo10_fmt:funct{3}, vstoreo10_fmt:funct{2}, vstoreo10_fmt:funct{1}, vstoreo10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vstoreo10_fmt:RD:$ra);
  dag InOperandList = (ins vstoreo10_fmt:RS:$rb, vstoreo10_fmt:RS:$rc);
  string AsmString = !strconcat(vstoreo10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vstoreo10_fmt:RD:$ra, (int_dsp_vstoreo_10 vstoreo10_fmt:RS:$rb, vstoreo10_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vstoreo10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vstoreo20_fmt<bits<3> vstoreo20_fmt:type = { ?, ?, ? }, bits<3> vstoreo20_fmt:op = { ?, ?, ? }, bits<8> vstoreo20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vstoreo20_fmt:instr_asm = ?, InstrItinClass vstoreo20_fmt:itin = ?, RegisterClass vstoreo20_fmt:RD = ?, RegisterClass vstoreo20_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vstoreo20_fmt:type{2}, vstoreo20_fmt:type{1}, vstoreo20_fmt:type{0}, vstoreo20_fmt:op{2}, vstoreo20_fmt:op{1}, vstoreo20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vstoreo20_fmt:funct{7}, vstoreo20_fmt:funct{6}, vstoreo20_fmt:funct{5}, vstoreo20_fmt:funct{4}, vstoreo20_fmt:funct{3}, vstoreo20_fmt:funct{2}, vstoreo20_fmt:funct{1}, vstoreo20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vstoreo20_fmt:RD:$ra);
  dag InOperandList = (ins vstoreo20_fmt:RS:$rb, vstoreo20_fmt:RS:$rc);
  string AsmString = !strconcat(vstoreo20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vstoreo20_fmt:RD:$ra, (int_dsp_vstoreo_20 vstoreo20_fmt:RS:$rb, vstoreo20_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vstoreo20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vstoreo40_fmt<bits<3> vstoreo40_fmt:type = { ?, ?, ? }, bits<3> vstoreo40_fmt:op = { ?, ?, ? }, bits<8> vstoreo40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vstoreo40_fmt:instr_asm = ?, InstrItinClass vstoreo40_fmt:itin = ?, RegisterClass vstoreo40_fmt:RD = ?, RegisterClass vstoreo40_fmt:RS = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vstoreo40_fmt:type{2}, vstoreo40_fmt:type{1}, vstoreo40_fmt:type{0}, vstoreo40_fmt:op{2}, vstoreo40_fmt:op{1}, vstoreo40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vstoreo40_fmt:funct{7}, vstoreo40_fmt:funct{6}, vstoreo40_fmt:funct{5}, vstoreo40_fmt:funct{4}, vstoreo40_fmt:funct{3}, vstoreo40_fmt:funct{2}, vstoreo40_fmt:funct{1}, vstoreo40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vstoreo40_fmt:RD:$ra);
  dag InOperandList = (ins vstoreo40_fmt:RS:$rb, vstoreo40_fmt:RS:$rc);
  string AsmString = !strconcat(vstoreo40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vstoreo40_fmt:RD:$ra, (int_dsp_vstoreo_40 vstoreo40_fmt:RS:$rb, vstoreo40_fmt:RS:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vstoreo40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vstoreu10_fmt<bits<3> vstoreu10_fmt:type = { ?, ?, ? }, bits<3> vstoreu10_fmt:op = { ?, ?, ? }, bits<5> vstoreu10_fmt:funct = { ?, ?, ?, ?, ? }, string vstoreu10_fmt:instr_asm = ?, InstrItinClass vstoreu10_fmt:itin = ?, RegisterClass vstoreu10_fmt:RD = ?, RegisterClass vstoreu10_fmt:RS = ?, Operand vstoreu10_fmt:Od = ?, PatLeaf vstoreu10_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vstoreu10_fmt:type{2}, vstoreu10_fmt:type{1}, vstoreu10_fmt:type{0}, vstoreu10_fmt:op{2}, vstoreu10_fmt:op{1}, vstoreu10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vstoreu10_fmt:funct{4}, vstoreu10_fmt:funct{3}, vstoreu10_fmt:funct{2}, vstoreu10_fmt:funct{1}, vstoreu10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vstoreu10_fmt:RD:$ra);
  dag InOperandList = (ins vstoreu10_fmt:RS:$rb, vstoreu10_fmt:Od:$imm9);
  string AsmString = !strconcat(vstoreu10_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vstoreu10_fmt:RD:$ra, (int_dsp_vstoreu_10 vstoreu10_fmt:RS:$rb, vstoreu10_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vstoreu10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vstoreu20_fmt<bits<3> vstoreu20_fmt:type = { ?, ?, ? }, bits<3> vstoreu20_fmt:op = { ?, ?, ? }, bits<5> vstoreu20_fmt:funct = { ?, ?, ?, ?, ? }, string vstoreu20_fmt:instr_asm = ?, InstrItinClass vstoreu20_fmt:itin = ?, RegisterClass vstoreu20_fmt:RD = ?, RegisterClass vstoreu20_fmt:RS = ?, Operand vstoreu20_fmt:Od = ?, PatLeaf vstoreu20_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vstoreu20_fmt:type{2}, vstoreu20_fmt:type{1}, vstoreu20_fmt:type{0}, vstoreu20_fmt:op{2}, vstoreu20_fmt:op{1}, vstoreu20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vstoreu20_fmt:funct{4}, vstoreu20_fmt:funct{3}, vstoreu20_fmt:funct{2}, vstoreu20_fmt:funct{1}, vstoreu20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vstoreu20_fmt:RD:$ra);
  dag InOperandList = (ins vstoreu20_fmt:RS:$rb, vstoreu20_fmt:Od:$imm9);
  string AsmString = !strconcat(vstoreu20_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vstoreu20_fmt:RD:$ra, (int_dsp_vstoreu_20 vstoreu20_fmt:RS:$rb, vstoreu20_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vstoreu20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vstoreu40_fmt<bits<3> vstoreu40_fmt:type = { ?, ?, ? }, bits<3> vstoreu40_fmt:op = { ?, ?, ? }, bits<5> vstoreu40_fmt:funct = { ?, ?, ?, ?, ? }, string vstoreu40_fmt:instr_asm = ?, InstrItinClass vstoreu40_fmt:itin = ?, RegisterClass vstoreu40_fmt:RD = ?, RegisterClass vstoreu40_fmt:RS = ?, Operand vstoreu40_fmt:Od = ?, PatLeaf vstoreu40_fmt:imm_type = ?> {	// Instruction InstDSP F_LS_2Reg_imm9
  field bits<32> Inst = { vstoreu40_fmt:type{2}, vstoreu40_fmt:type{1}, vstoreu40_fmt:type{0}, vstoreu40_fmt:op{2}, vstoreu40_fmt:op{1}, vstoreu40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, vstoreu40_fmt:funct{4}, vstoreu40_fmt:funct{3}, vstoreu40_fmt:funct{2}, vstoreu40_fmt:funct{1}, vstoreu40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vstoreu40_fmt:RD:$ra);
  dag InOperandList = (ins vstoreu40_fmt:RS:$rb, vstoreu40_fmt:Od:$imm9);
  string AsmString = !strconcat(vstoreu40_fmt:instr_asm, "	$ra, $rb, $imm9");
  list<dag> Pattern = [(set vstoreu40_fmt:RD:$ra, (int_dsp_vstoreu_40 vstoreu40_fmt:RS:$rb, vstoreu40_fmt:imm_type:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vstoreu40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsub40_fmt<bits<3> vsub40_fmt:type = { ?, ?, ? }, bits<3> vsub40_fmt:op = { ?, ?, ? }, bits<8> vsub40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsub40_fmt:instr_asm = ?, InstrItinClass vsub40_fmt:itin = ?, RegisterClass vsub40_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsub40_fmt:type{2}, vsub40_fmt:type{1}, vsub40_fmt:type{0}, vsub40_fmt:op{2}, vsub40_fmt:op{1}, vsub40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsub40_fmt:funct{7}, vsub40_fmt:funct{6}, vsub40_fmt:funct{5}, vsub40_fmt:funct{4}, vsub40_fmt:funct{3}, vsub40_fmt:funct{2}, vsub40_fmt:funct{1}, vsub40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsub40_fmt:RC:$ra);
  dag InOperandList = (ins vsub40_fmt:RC:$rb, vsub40_fmt:RC:$rc);
  string AsmString = !strconcat(vsub40_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsub40_fmt:RC:$ra, (int_dsp_vsub_40 vsub40_fmt:RC:$rb, vsub40_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsub40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsub_10_fmt<bits<3> vsub_10_fmt:type = { ?, ?, ? }, bits<3> vsub_10_fmt:op = { ?, ?, ? }, bits<8> vsub_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsub_10_fmt:instr_asm = ?, InstrItinClass vsub_10_fmt:itin = ?, RegisterClass vsub_10_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsub_10_fmt:type{2}, vsub_10_fmt:type{1}, vsub_10_fmt:type{0}, vsub_10_fmt:op{2}, vsub_10_fmt:op{1}, vsub_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsub_10_fmt:funct{7}, vsub_10_fmt:funct{6}, vsub_10_fmt:funct{5}, vsub_10_fmt:funct{4}, vsub_10_fmt:funct{3}, vsub_10_fmt:funct{2}, vsub_10_fmt:funct{1}, vsub_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsub_10_fmt:RC:$ra);
  dag InOperandList = (ins vsub_10_fmt:RC:$rb, vsub_10_fmt:RC:$rc);
  string AsmString = !strconcat(vsub_10_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsub_10_fmt:RC:$ra, (int_dsp_vsub_10 vsub_10_fmt:RC:$rb, vsub_10_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsub_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsub_20_fmt<bits<3> vsub_20_fmt:type = { ?, ?, ? }, bits<3> vsub_20_fmt:op = { ?, ?, ? }, bits<8> vsub_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsub_20_fmt:instr_asm = ?, InstrItinClass vsub_20_fmt:itin = ?, RegisterClass vsub_20_fmt:RC = ?> {	// Instruction InstDSP F_3Reg_001
  field bits<32> Inst = { vsub_20_fmt:type{2}, vsub_20_fmt:type{1}, vsub_20_fmt:type{0}, vsub_20_fmt:op{2}, vsub_20_fmt:op{1}, vsub_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, vsub_20_fmt:funct{7}, vsub_20_fmt:funct{6}, vsub_20_fmt:funct{5}, vsub_20_fmt:funct{4}, vsub_20_fmt:funct{3}, vsub_20_fmt:funct{2}, vsub_20_fmt:funct{1}, vsub_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsub_20_fmt:RC:$ra);
  dag InOperandList = (ins vsub_20_fmt:RC:$rb, vsub_20_fmt:RC:$rc);
  string AsmString = !strconcat(vsub_20_fmt:instr_asm, "	$ra, $rb, $rc");
  list<dag> Pattern = [(set vsub_20_fmt:RC:$ra, (int_dsp_vsub_20 vsub_20_fmt:RC:$rb, vsub_20_fmt:RC:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsub_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsum40_fmt<bits<3> vsum40_fmt:type = { ?, ?, ? }, bits<3> vsum40_fmt:op = { ?, ?, ? }, bits<8> vsum40_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsum40_fmt:instr_asm = ?, InstrItinClass vsum40_fmt:itin = ?, RegisterClass vsum40_fmt:RC = ?> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { vsum40_fmt:type{2}, vsum40_fmt:type{1}, vsum40_fmt:type{0}, vsum40_fmt:op{2}, vsum40_fmt:op{1}, vsum40_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, vsum40_fmt:funct{7}, vsum40_fmt:funct{6}, vsum40_fmt:funct{5}, vsum40_fmt:funct{4}, vsum40_fmt:funct{3}, vsum40_fmt:funct{2}, vsum40_fmt:funct{1}, vsum40_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsum40_fmt:RC:$ra);
  dag InOperandList = (ins vsum40_fmt:RC:$rb);
  string AsmString = !strconcat(vsum40_fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set vsum40_fmt:RC:$ra, (int_dsp_vsum_40 vsum40_fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsum40_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsum_10_fmt<bits<3> vsum_10_fmt:type = { ?, ?, ? }, bits<3> vsum_10_fmt:op = { ?, ?, ? }, bits<8> vsum_10_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsum_10_fmt:instr_asm = ?, InstrItinClass vsum_10_fmt:itin = ?, RegisterClass vsum_10_fmt:RC = ?> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { vsum_10_fmt:type{2}, vsum_10_fmt:type{1}, vsum_10_fmt:type{0}, vsum_10_fmt:op{2}, vsum_10_fmt:op{1}, vsum_10_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, vsum_10_fmt:funct{7}, vsum_10_fmt:funct{6}, vsum_10_fmt:funct{5}, vsum_10_fmt:funct{4}, vsum_10_fmt:funct{3}, vsum_10_fmt:funct{2}, vsum_10_fmt:funct{1}, vsum_10_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsum_10_fmt:RC:$ra);
  dag InOperandList = (ins vsum_10_fmt:RC:$rb);
  string AsmString = !strconcat(vsum_10_fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set vsum_10_fmt:RC:$ra, (int_dsp_vsum_10 vsum_10_fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsum_10_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
class vsum_20_fmt<bits<3> vsum_20_fmt:type = { ?, ?, ? }, bits<3> vsum_20_fmt:op = { ?, ?, ? }, bits<8> vsum_20_fmt:funct = { ?, ?, ?, ?, ?, ?, ?, ? }, string vsum_20_fmt:instr_asm = ?, InstrItinClass vsum_20_fmt:itin = ?, RegisterClass vsum_20_fmt:RC = ?> {	// Instruction InstDSP F_2Reg_2
  field bits<32> Inst = { vsum_20_fmt:type{2}, vsum_20_fmt:type{1}, vsum_20_fmt:type{0}, vsum_20_fmt:op{2}, vsum_20_fmt:op{1}, vsum_20_fmt:op{0}, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, vsum_20_fmt:funct{7}, vsum_20_fmt:funct{6}, vsum_20_fmt:funct{5}, vsum_20_fmt:funct{4}, vsum_20_fmt:funct{3}, vsum_20_fmt:funct{2}, vsum_20_fmt:funct{1}, vsum_20_fmt:funct{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs vsum_20_fmt:RC:$ra);
  dag InOperandList = (ins vsum_20_fmt:RC:$rb);
  string AsmString = !strconcat(vsum_20_fmt:instr_asm, "	$ra, $rb");
  list<dag> Pattern = [(set vsum_20_fmt:RC:$ra, (int_dsp_vsum_20 vsum_20_fmt:RC:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = vsum_20_fmt:itin;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Start{0}, Slots.Value{0}, Slots.Value{1}, Slots.Value{2}, isFP{0}, isTaken{0}, 0, accessSize{2}, accessSize{1}, accessSize{0}, addrMode{2}, addrMode{1}, addrMode{0}, 0, 0, validSubTargets{3}, validSubTargets{2}, validSubTargets{1}, validSubTargets{0}, opExtentAlign{1}, opExtentAlign{0}, opExtentBits{4}, opExtentBits{3}, opExtentBits{2}, opExtentBits{1}, opExtentBits{0}, isExtentSigned{0}, opExtendable{2}, opExtendable{1}, opExtendable{0}, isExtended{0}, isExtendable{0}, isCVLoad{0}, isCVLoadable{0}, isNVStore{0}, isNVStorable{0}, opNewValue{2}, opNewValue{1}, opNewValue{0}, hasNewValue{0}, isNewValue{0}, isPredicateLate{0}, isPredicatedNew{0}, isPredicatedFalse{0}, isPredicated{0}, isSoloAin1{0}, isSoloAX{0}, isSolo{0}, Type{4}, Type{3}, Type{2}, Type{1}, Type{0} };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
------------- Defs -----------------
def A0 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR4";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [4];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };
  string NAME = ?;
}
def A1 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR5";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [5];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1 };
  string NAME = ?;
}
def A2 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR6";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [6];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 };
  string NAME = ?;
}
def A3 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR7";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [7];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
  string NAME = ?;
}
def ABS {	// Instruction InstDSP F_2Reg_2 Abs_Fmt
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb);
  string AsmString = "abs	$ra, $rb";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_abs_qb CPURegs:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def ADDiu {	// Instruction InstDSP F_2Reg_imm11 ArithLogicI
  field bits<32> Inst = { 1, 0, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm11{10}, imm11{9}, imm11{8}, imm11{7}, imm11{6}, imm11{5}, imm11{4}, imm11{3}, imm11{2}, imm11{1}, imm11{0}, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm11:$imm11);
  string AsmString = "addi	$ra, $rb, $imm11";
  list<dag> Pattern = [(set CPURegs:$ra, (add CPURegs:$rb, immSExt11:$imm11))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<11> imm11 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def ADDu {	// Instruction InstDSP F_3Reg_001 ArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit ArithLogicR:isAlu = 1;
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "add	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (add CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def ADJCALLSTACKDOWN {	// Instruction InstDSP DSPPseudo
  field bits<32> Inst = { 0, 0, 0, 0, 0, 0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins uimm16:$amt);
  string AsmString = "!ADJCALLSTACKDOWN $amt";
  list<dag> Pattern = [(callseq_start timm:$amt)];
  list<Register> Uses = [SP];
  list<Register> Defs = [SP];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = PSEUDO;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def ADJCALLSTACKUP {	// Instruction InstDSP DSPPseudo
  field bits<32> Inst = { 0, 0, 0, 0, 0, 0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins uimm16:$amt1, uimm16:$amt2);
  string AsmString = "!ADJCALLSTACKUP $amt1";
  list<dag> Pattern = [(callseq_end timm:$amt1, timm:$amt2)];
  list<Register> Uses = [SP];
  list<Register> Defs = [SP];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = PSEUDO;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def ALU {	// FuncUnit
  string NAME = ?;
}
def ALU32_S_SLOT0167 {	// InstrItinClass
  string NAME = ?;
}
def ALU32_S_SLOT06 {	// InstrItinClass
  string NAME = ?;
}
def ALU32_V_SLOT23 {	// InstrItinClass
  string NAME = ?;
}
def AND {	// Instruction InstDSP F_3Reg_001 ArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit ArithLogicR:isAlu = 1;
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "and	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (and CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def AT {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR1";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [1];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
  string NAME = ?;
}
def BAR0 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "BAR0";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [40];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };
  string NAME = ?;
}
def BAR1 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "BAR1";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [41];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1 };
  string NAME = ?;
}
def BAR2 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "BAR2";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [42];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 };
  string NAME = ?;
}
def BAR3 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "BAR3";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [43];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
  string NAME = ?;
}
def BCLR {	// Instruction InstDSP F_2Reg_2imm5 bfst_fmt
  field bits<32> Inst = { 1, 0, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ro);
  dag InOperandList = (ins CPURegs:$ra, CPURegs:$rb, simm5:$imm5_2, simm5:$imm5_1);
  string AsmString = "bclr	$ra, $rb, $imm5_2, $imm5_1";
  list<dag> Pattern = [(set CPURegs:$ro, (int_dsp_bfst_qb CPURegs:$ra, CPURegs:$rb, immSExt5:$imm5_2, immSExt5:$imm5_1))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
def BFEXT {	// Instruction InstDSP F_2Reg_2imm5 bfext_fmt
  field bits<32> Inst = { 1, 0, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm5:$imm5_2, simm5:$imm5_1);
  string AsmString = "bfext	$ra, $rb, $imm5_2, $imm5_1";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_bfext_qb CPURegs:$rb, immSExt5:$imm5_2, immSExt5:$imm5_1))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
def BFEXTU {	// Instruction InstDSP F_2Reg_2imm5 bfextu_fmt
  field bits<32> Inst = { 1, 0, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm5:$imm5_2, simm5:$imm5_1);
  string AsmString = "bfextu	$ra, $rb, $imm5_2, $imm5_1";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_bfextu_qb CPURegs:$rb, immSExt5:$imm5_2, immSExt5:$imm5_1))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
def BFST {	// Instruction InstDSP F_2Reg_2imm5 bfst_fmt
  field bits<32> Inst = { 1, 0, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ro);
  dag InOperandList = (ins CPURegs:$ra, CPURegs:$rb, simm5:$imm5_2, simm5:$imm5_1);
  string AsmString = "bfst	$ra, $rb, $imm5_2, $imm5_1";
  list<dag> Pattern = [(set CPURegs:$ro, (int_dsp_bfst_qb CPURegs:$ra, CPURegs:$rb, immSExt5:$imm5_2, immSExt5:$imm5_1))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
def BST {	// Instruction InstDSP F_2Reg_2imm5 bfst_fmt
  field bits<32> Inst = { 1, 0, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm5_2{4}, imm5_2{3}, imm5_2{2}, imm5_2{1}, imm5_2{0}, imm5_1{4}, imm5_1{3}, imm5_1{2}, imm5_1{1}, imm5_1{0}, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ro);
  dag InOperandList = (ins CPURegs:$ra, CPURegs:$rb, simm5:$imm5_2, simm5:$imm5_1);
  string AsmString = "bst	$ra, $rb, $imm5_2, $imm5_1";
  list<dag> Pattern = [(set CPURegs:$ro, (int_dsp_bfst_qb CPURegs:$ra, CPURegs:$rb, immSExt5:$imm5_2, immSExt5:$imm5_1))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<5> imm5_2 = { ?, ?, ?, ?, ? };
  bits<5> imm5_1 = { ?, ?, ?, ?, ? };
  string NAME = ?;
}
def BUNDLE {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins variable_ops);
  string AsmString = "BUNDLE";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def C0Regs {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [i32];
  int Size = 0;
  int Alignment = 32;
  int CopyCost = 1;
  dag MemberList = (add PC, EPC);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def CALL {	// Instruction InstDSP F_Special_imm21 JumpLink
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, imm21{20}, imm21{19}, imm21{18}, imm21{17}, imm21{16}, imm21{15}, imm21{14}, imm21{13}, imm21{12}, imm21{11}, imm21{10}, imm21{9}, imm21{8}, imm21{7}, imm21{6}, imm21{5}, imm21{4}, imm21{3}, imm21{2}, imm21{1}, imm21{0}, 0, 1, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins calltarget:$target, variable_ops);
  string AsmString = "call	$target";
  list<dag> Pattern = [(DSPJmpLink imm:$target)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 1;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<21> imm21 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def CALLR {	// Instruction InstDSP F_Special_1Reg_1 JumpLinkReg
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, rs{5}, rs{4}, rs{3}, rs{2}, rs{1}, rs{0}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$rs, variable_ops);
  string AsmString = "callr	$rs";
  list<dag> Pattern = [(DSPJmpLink CPURegs:$rs)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 1;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rs = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def CBW {	// Instruction InstDSP F_2Reg_2 Cbw_Fmt
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb);
  string AsmString = "cbw	$ra, $rb";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_cbw_qb CPURegs:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def CFI_INSTRUCTION {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins i32imm:$id);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 1;
  bit isNotDuplicable = 1;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def CHW {	// Instruction InstDSP F_2Reg_2 Chw_Fmt
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb);
  string AsmString = "chw	$ra, $rb";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_chw_qb CPURegs:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def COPY {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs unknown:$dst);
  dag InOperandList = (ins unknown:$src);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 1;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def COPY_TO_REGCLASS {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs unknown:$dst);
  dag InOperandList = (ins unknown:$src, i32imm:$regclass);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 1;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def CPRESTORE {	// Instruction InstDSP DSPPseudo
  field bits<32> Inst = { 0, 0, 0, 0, 0, 0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins i32imm:$loc, CPURegs:$gp);
  string AsmString = ".cprestore	$loc";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = PSEUDO;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def CPU128Regs {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [v16i8, v8i16, v4i32];
  int Size = 0;
  int Alignment = 128;
  int CopyCost = 1;
  dag MemberList = (add VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9, VR10, VR11, VR12, VR13, VR14, VR15);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def CPURegs {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [i32];
  int Size = 0;
  int Alignment = 32;
  int CopyCost = 1;
  dag MemberList = (add ZERO, AT, V0, V1, A0, A1, A2, A3, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, S0, S1, S2, S3, S4, S5, S6, S7, GP, FP, LR, SP, RA, SW);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def CSR_O32 {	// CalleeSavedRegs
  dag SaveList = (add LR);
  dag OtherPreserved = ?;
  string NAME = ?;
}
def Commutative {	// IntrinsicProperty
  string NAME = ?;
}
def ControlFlow_SLOT01 {	// InstrItinClass
  string NAME = ?;
}
def DBG_VALUE {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins variable_ops);
  string AsmString = "DBG_VALUE";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def DSP {	// Target
  InstrInfo InstructionSet = DSPInstrInfo;
  list<AsmParser> AssemblyParsers = [DefaultAsmParser];
  list<AsmParserVariant> AssemblyParserVariants = [DefaultAsmParserVariant];
  list<AsmWriter> AssemblyWriters = [DefaultAsmWriter];
  string NAME = ?;
}
def DSPAsmParser {	// AsmParser
  string AsmParserClassName = "AsmParser";
  string AsmParserInstCleanup = "";
  bit ShouldEmitMatchRegisterName = 0;
  bit MnemonicContainsDot = 0;
  string NAME = ?;
}
def DSPAsmParserVariant {	// AsmParserVariant
  int Variant = 0;
  string Name = "";
  string CommentDelimiter = "";
  string RegisterPrefix = "$";
  string NAME = ?;
}
def DSPGPRel {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::GPRel";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def DSPGenericItineraries {	// ProcessorItineraries
  list<FuncUnit> FU = [SLOT0, SLOT1, SLOT2, SLOT3, SLOT4, SLOT5, SLOT6, SLOT7];
  list<Bypass> BP = [];
  list<InstrItinData> IID = [anonymous_428, anonymous_430, anonymous_432, anonymous_434, anonymous_436, anonymous_438, anonymous_440, anonymous_442, anonymous_444, anonymous_446, anonymous_448, anonymous_450, anonymous_452];
  string NAME = ?;
}
def DSPHi {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::Hi";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def DSPInstrInfo {	// InstrInfo
  bit isLittleEndianEncoding = 0;
  bit guessInstructionProperties = 1;
  bit decodePositionallyEncodedOperands = 0;
  bit noNamedPositionallyEncodedOperands = 0;
  string NAME = ?;
}
def DSPJmpLink {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::JmpLink";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPOutGlue, SDNPOptInGlue, SDNPVariadic];
  SDTypeProfile TypeProfile = SDT_DSPJmpLink;
  string NAME = ?;
}
def DSPLo {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::Lo";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def DSPMAX {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::MAX";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def DSPMIN {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::MIN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def DSPModel {	// SchedMachineModel
  int IssueWidth = 4;
  int MinLatency = -1;
  int MicroOpBufferSize = -1;
  int LoopMicroOpBufferSize = -1;
  int LoadLatency = 1;
  int HighLatency = -1;
  int MispredictPenalty = -1;
  ProcessorItineraries Itineraries = DSPGenericItineraries;
  bit PostRAScheduler = 0;
  bit CompleteModel = 1;
  bit NoModel = 0;
  string NAME = ?;
}
def DSPMovGR {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::MovGR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def DSPRet {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::RET";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPOptInGlue, SDNPVariadic];
  SDTypeProfile TypeProfile = SDTNone;
  string NAME = ?;
}
def DSPVMAX {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::VMAX";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTDSPVecOp;
  string NAME = ?;
}
def DSPVMIN {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::VMIN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTDSPVecOp;
  string NAME = ?;
}
def DSPVecInsert16 {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::InsertVE16";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDT_DSPVecInsert;
  string NAME = ?;
}
def DSPVecInsert8 {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::InsertVE8";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDT_DSPVecInsert;
  string NAME = ?;
}
def DSPWrapper {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "DSPISD::Wrapper";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDT_DSPWrapper;
  string NAME = ?;
}
def Data_Transmission_0_SLOT01 {	// InstrItinClass
  string NAME = ?;
}
def Data_Transmission_1_SLOT67 {	// InstrItinClass
  string NAME = ?;
}
def Data_Transmission_2_SLOT24567 {	// InstrItinClass
  string NAME = ?;
}
def Data_Transmission_3_SLOT014567 {	// InstrItinClass
  string NAME = ?;
}
def Data_Transmission_4_SLOT2 {	// InstrItinClass
  string NAME = ?;
}
def DefaultAsmParser {	// AsmParser
  string AsmParserClassName = "AsmParser";
  string AsmParserInstCleanup = "";
  bit ShouldEmitMatchRegisterName = 1;
  bit MnemonicContainsDot = 0;
  string NAME = ?;
}
def DefaultAsmParserVariant {	// AsmParserVariant
  int Variant = 0;
  string Name = "";
  string CommentDelimiter = "";
  string RegisterPrefix = "";
  string NAME = ?;
}
def DefaultAsmWriter {	// AsmWriter
  string AsmWriterClassName = "InstPrinter";
  int Variant = 0;
  int OperandSpacing = -1;
  string NAME = ?;
}
def EH_LABEL {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins i32imm:$id);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 1;
  bit isNotDuplicable = 1;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def ENDLOOP {	// Instruction InstDSP F_Special_0Reg
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins);
  string AsmString = "endloop";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 1;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def EPC {	// Register DSPReg DSPC0Reg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "epc";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [35];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
  string NAME = ?;
}
def EQ {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "eq	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (seteq CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def EQI {	// Instruction InstDSP F_1Reg_imm9 SetCC_RI
  field bits<32> Inst = { 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$rs);
  dag InOperandList = (ins CPURegs:$ra, simm16:$imm9);
  string AsmString = "eqi	 $ra, $imm9";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def EXTRACT_SUBREG {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs unknown:$dst);
  dag InOperandList = (ins unknown:$supersrc, i32imm:$subidx);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def EponymousProcResourceKind {	// ProcResourceKind
  string NAME = ?;
}
def FP {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR29";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [29];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1 };
  string NAME = ?;
}
def FeatureDSPSE {	// SubtargetFeature
  list<SubtargetFeature> SubtargetFeature:i = [];
  string Name = "dspse";
  string Attribute = "DSPArchVersion";
  string Value = "DSPSE";
  string Desc = "DSP 1.0 version";
  list<SubtargetFeature> Implies = [];
  string NAME = ?;
}
def FeatureO32 {	// SubtargetFeature
  list<SubtargetFeature> SubtargetFeature:i = [];
  string Name = "o32";
  string Attribute = "DSPABI";
  string Value = "O32";
  string Desc = "Enable o32 ABI";
  list<SubtargetFeature> Implies = [];
  string NAME = ?;
}
def FlagVT {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 55;
  string NAME = ?;
}
def Frm10 {	// Format
  bits<5> Value = { 0, 1, 0, 1, 0 };
  string NAME = ?;
}
def Frm11 {	// Format
  bits<5> Value = { 0, 1, 0, 1, 1 };
  string NAME = ?;
}
def Frm12 {	// Format
  bits<5> Value = { 0, 1, 1, 0, 0 };
  string NAME = ?;
}
def Frm13 {	// Format
  bits<5> Value = { 0, 1, 1, 0, 1 };
  string NAME = ?;
}
def Frm14 {	// Format
  bits<5> Value = { 0, 1, 1, 1, 0 };
  string NAME = ?;
}
def Frm5 {	// Format
  bits<5> Value = { 0, 0, 1, 0, 1 };
  string NAME = ?;
}
def Frm6 {	// Format
  bits<5> Value = { 0, 0, 1, 1, 0 };
  string NAME = ?;
}
def Frm7 {	// Format
  bits<5> Value = { 0, 0, 1, 1, 1 };
  string NAME = ?;
}
def Frm8 {	// Format
  bits<5> Value = { 0, 1, 0, 0, 0 };
  string NAME = ?;
}
def Frm9 {	// Format
  bits<5> Value = { 0, 1, 0, 0, 1 };
  string NAME = ?;
}
def FrmENDLOOP {	// Format
  bits<5> Value = { 1, 1, 1, 1, 1 };
  string NAME = ?;
}
def FrmOther {	// Format
  bits<5> Value = { 0, 1, 1, 1, 1 };
  string NAME = ?;
}
def FrmR0 {	// Format
  bits<5> Value = { 0, 0, 0, 0, 1 };
  string NAME = ?;
}
def FrmR1 {	// Format
  bits<5> Value = { 0, 0, 0, 1, 0 };
  string NAME = ?;
}
def FrmR2 {	// Format
  bits<5> Value = { 0, 0, 0, 1, 1 };
  string NAME = ?;
}
def FrmR3 {	// Format
  bits<5> Value = { 0, 0, 1, 0, 0 };
  string NAME = ?;
}
def GC_LABEL {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins i32imm:$id);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 1;
  bit isNotDuplicable = 1;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def GE {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "ge	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setge CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def GEI {	// Instruction InstDSP F_1Reg_imm9 SetCC_RI
  field bits<32> Inst = { 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, 1, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$rs);
  dag InOperandList = (ins CPURegs:$ra, simm16:$imm9);
  string AsmString = "gei	 $ra, $imm9";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def GEU {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "geu	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setuge CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def GP {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR28";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [28];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0 };
  string NAME = ?;
}
def GPROut {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [i32];
  int Size = 0;
  int Alignment = 32;
  int CopyCost = 1;
  dag MemberList = (add (sub CPURegs, SW));
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def GT {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "gt	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setgt CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def GTI {	// Instruction InstDSP F_1Reg_imm9 SetCC_RI
  field bits<32> Inst = { 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, 0, 1, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$rs);
  dag InOperandList = (ins CPURegs:$ra, simm16:$imm9);
  string AsmString = "gti	 $ra, $imm9";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def GTU {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "gtu	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setugt CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def HI {	// Register DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "hi";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [32];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
def HI16 {	// SDNodeXForm
  SDNode Opcode = imm;
  string XFormFunction = "
return getImm(N, (N->getZExtValue() >> 16) & 0xffff);
";
  string NAME = ?;
}
def HILO {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [i32];
  int Size = 0;
  int Alignment = 32;
  int CopyCost = 1;
  dag MemberList = (add HI, LO);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def IIAlu {	// InstrItinClass
  string NAME = ?;
}
def IIBranch {	// InstrItinClass
  string NAME = ?;
}
def IIHiLo {	// InstrItinClass
  string NAME = ?;
}
def IIIdiv {	// InstrItinClass
  string NAME = ?;
}
def IIImul {	// InstrItinClass
  string NAME = ?;
}
def IILoad {	// InstrItinClass
  string NAME = ?;
}
def IIPseudo {	// InstrItinClass
  string NAME = ?;
}
def IIStore {	// InstrItinClass
  string NAME = ?;
}
def IIVLoad {	// InstrItinClass
  string NAME = ?;
}
def IIVMax {	// InstrItinClass
  string NAME = ?;
}
def IIVStore {	// InstrItinClass
  string NAME = ?;
}
def II_CLO {	// InstrItinClass
  string NAME = ?;
}
def II_CLZ {	// InstrItinClass
  string NAME = ?;
}
def IMPLICIT_DEF {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs unknown:$dst);
  dag InOperandList = (ins);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 1;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def IMULDIV {	// FuncUnit
  string NAME = ?;
}
def INLINEASM {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins variable_ops);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def INSERT_SUBREG {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs unknown:$dst);
  dag InOperandList = (ins unknown:$supersrc, unknown:$subsrc, i32imm:$subidx);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "$supersrc = $dst";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def ImmAsmOperand {	// AsmOperandClass
  string Name = "Imm";
  list<AsmOperandClass> SuperClasses = [];
  string PredicateMethod = ?;
  string RenderMethod = ?;
  string ParserMethod = ?;
  string DiagnosticType = "";
  string NAME = ?;
}
def IntrNoDuplicate {	// IntrinsicProperty
  string NAME = ?;
}
def IntrNoMem {	// IntrinsicProperty
  string NAME = ?;
}
def IntrNoReturn {	// IntrinsicProperty
  string NAME = ?;
}
def IntrReadArgMem {	// IntrinsicProperty
  string NAME = ?;
}
def IntrReadMem {	// IntrinsicProperty
  string NAME = ?;
}
def IntrReadWriteArgMem {	// IntrinsicProperty
  string NAME = ?;
}
def JC {	// Instruction InstDSP F_Special_imm21 CBranch
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, imm21{20}, imm21{19}, imm21{18}, imm21{17}, imm21{16}, imm21{15}, imm21{14}, imm21{13}, imm21{12}, imm21{11}, imm21{10}, imm21{9}, imm21{8}, imm21{7}, imm21{6}, imm21{5}, imm21{4}, imm21{3}, imm21{2}, imm21{1}, imm21{0}, 0, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$rt, brtarget:$imm21);
  string AsmString = "jc	 $imm21";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 1;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<21> imm21 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def JNC {	// Instruction InstDSP F_Special_imm21 CBranch
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, imm21{20}, imm21{19}, imm21{18}, imm21{17}, imm21{16}, imm21{15}, imm21{14}, imm21{13}, imm21{12}, imm21{11}, imm21{10}, imm21{9}, imm21{8}, imm21{7}, imm21{6}, imm21{5}, imm21{4}, imm21{3}, imm21{2}, imm21{1}, imm21{0}, 0, 1, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$rt, brtarget:$imm21);
  string AsmString = "jnc	 $imm21";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 1;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<21> imm21 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def Jmp {	// Instruction InstDSP F_Special_imm21 UncondBranch
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, imm21{20}, imm21{19}, imm21{18}, imm21{17}, imm21{16}, imm21{15}, imm21{14}, imm21{13}, imm21{12}, imm21{11}, imm21{10}, imm21{9}, imm21{8}, imm21{7}, imm21{6}, imm21{5}, imm21{4}, imm21{3}, imm21{2}, imm21{1}, imm21{0}, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins brtarget:$imm21);
  string AsmString = "jmp	$imm21";
  list<dag> Pattern = [(br bb:$imm21)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 1;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<21> imm21 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def KILL {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins variable_ops);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def LD {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM !strconcat(NAME, "")
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins mem:$addr);
  string AsmString = "load32	$ra, $addr";
  list<dag> Pattern = [(set CPURegs:$ra, (load_a addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  bit LoadM32::Pseudo = 0;
  string NAME = "LD";
}
def LDBS {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM !strconcat(NAME, "")
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins memh:$addr);
  string AsmString = "load8	$ra, $addr";
  list<dag> Pattern = [(set CPURegs:$ra, (sextloadi8 addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  bit LoadM16::Pseudo = 0;
  string NAME = "LDBS";
}
def LDBZ {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM !strconcat(NAME, "")
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins memh:$addr);
  string AsmString = "load8	$ra, $addr";
  list<dag> Pattern = [(set CPURegs:$ra, (zextloadi8 addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  bit LoadM16::Pseudo = 0;
  string NAME = "LDBZ";
}
def LDHS {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM !strconcat(NAME, "")
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins memh:$addr);
  string AsmString = "load16	$ra, $addr";
  list<dag> Pattern = [(set CPURegs:$ra, (sextloadi16 addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  bit LoadM16::Pseudo = 0;
  string NAME = "LDHS";
}
def LDHZ {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM !strconcat(NAME, "")
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins memh:$addr);
  string AsmString = "load16	$ra, $addr";
  list<dag> Pattern = [(set CPURegs:$ra, (zextloadi16 addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  bit LoadM16::Pseudo = 0;
  string NAME = "LDHZ";
}
def LD_Ins_SLOT45 {	// InstrItinClass
  string NAME = ?;
}
def LE {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "le	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setle CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def LEA {	// Instruction InstDSP DSPPseudo
  field bits<32> Inst = { 0, 0, 0, 0, 0, 0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins mem:$addr);
  string AsmString = "";
  list<dag> Pattern = [(set CPURegs:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = PSEUDO;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def LEI {	// Instruction InstDSP F_1Reg_imm9 SetCC_RI
  field bits<32> Inst = { 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, 1, 0, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$rs);
  dag InOperandList = (ins CPURegs:$ra, simm16:$imm9);
  string AsmString = "lei	 $ra, $imm9";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def LEU {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "leu	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setule CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def LIFETIME_END {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins i32imm:$id);
  string AsmString = "LIFETIME_END";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def LIFETIME_START {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins i32imm:$id);
  string AsmString = "LIFETIME_START";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def LO {	// Register DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "lo";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [33];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
def LO16 {	// SDNodeXForm
  SDNode Opcode = imm;
  string XFormFunction = "
return getImm(N, N->getZExtValue() & 0xffff);
";
  string NAME = ?;
}
def LR {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR31";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [31];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 };
  string NAME = ?;
}
def LT {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "lt	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setlt CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def LTI {	// Instruction InstDSP F_1Reg_imm9 SetCC_RI
  field bits<32> Inst = { 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, 0, 1, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$rs);
  dag InOperandList = (ins CPURegs:$ra, simm16:$imm9);
  string AsmString = "lti	 $ra, $imm9";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def LTU {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "ltu	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setult CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def LU {	// Instruction InstDSP DSPPseudo
  field bits<32> Inst = { 0, 0, 0, 0, 0, 0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins uimm16:$in);
  string AsmString = "";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = PSEUDO;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def LUi {	// Instruction InstDSP R2i5 LoadUpper
  field bits<32> Inst = { 0, 0, 0, 0, 0, 0, rd{5}, rd{4}, rd{3}, rd{2}, rd{1}, rd{0}, 0, 0, 0, 0, 0, 0, imm{8}, imm{7}, imm{6}, imm{5}, imm{4}, imm{3}, imm{2}, imm{1}, imm{0}, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins uimm16:$imm16);
  string AsmString = "lui	$ra, $imm16";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> rd = { ?, ?, ?, ?, ?, ? };
  bits<6> rs = { 0, 0, 0, 0, 0, 0 };
  bits<9> imm = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def Loop {	// Instruction InstDSP F_1Reg_imm16 LoopBase
  field bits<32> Inst = { 1, 0, 0, 1, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm16{15}, imm16{14}, imm16{13}, imm16{12}, imm16{11}, imm16{10}, imm16{9}, imm16{8}, imm16{7}, imm16{6}, imm16{5}, imm16{4}, imm16{3}, imm16{2}, imm16{1}, imm16{0}, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, brtarget:$imm16);
  string AsmString = "loop	 $ra, $imm16";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<16> imm16 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def MAX {	// Instruction InstDSP F_3Reg_001 MMBase
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rt);
  string AsmString = "max	$ra, $rb, $rt";
  list<dag> Pattern = [(set CPURegs:$ra, (DSPMAX CPURegs:$rb, CPURegs:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def MIN {	// Instruction InstDSP F_3Reg_001 MMBase
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rt);
  string AsmString = "min	$ra, $rb, $rt";
  list<dag> Pattern = [(set CPURegs:$ra, (DSPMIN CPURegs:$rb, CPURegs:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def MORegs {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [i32];
  int Size = 0;
  int Alignment = 32;
  int CopyCost = 1;
  dag MemberList = (add OFF0, OFF1, OFF2, OFF3, BAR0, BAR1, BAR2, BAR3, MR0, MR1, MR2, MR3);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def MR0 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "MR0";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [44];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
  string NAME = ?;
}
def MR1 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "MR1";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [45];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1 };
  string NAME = ?;
}
def MR2 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "MR2";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [46];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0 };
  string NAME = ?;
}
def MR3 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "MR3";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [47];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1 };
  string NAME = ?;
}
def MUL {	// Instruction InstDSP F_3Reg_001 ArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit ArithLogicR:isAlu = 1;
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "mul32	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (mul CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def MetadataVT {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 250;
  string NAME = ?;
}
def MovG2G {	// Instruction InstDSP F_2Reg_2 RMovBase
  field bits<32> Inst = { 1, 1, 1, 1, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, CPURegs:$rb);
  string AsmString = "movg2g	$ra,$rb";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_3_SLOT014567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def MovG2V10 {	// Instruction InstDSP F_2Reg_imm4 MovBase
  field bits<32> Inst = { 1, 1, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$rd);
  dag InOperandList = (ins VPR16Out:$ra, CPURegs:$rb, uimm16:$imm);
  string AsmString = "movg2v10	$ra,$rb,$imm";
  list<dag> Pattern = [(set VPR16Out:$rd, (DSPVecInsert8 VPR16Out:$ra, CPURegs:$rb, immZExt16:$imm))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_2_SLOT24567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
def MovG2V20 {	// Instruction InstDSP F_2Reg_imm4 MovBase
  field bits<32> Inst = { 1, 1, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPU128Regs:$rd);
  dag InOperandList = (ins CPU128Regs:$ra, CPURegs:$rb, uimm16:$imm);
  string AsmString = "movg2v20	$ra,$rb,$imm";
  list<dag> Pattern = [(set CPU128Regs:$rd, (insertelt CPU128Regs:$ra, CPURegs:$rb, immZExt16:$imm))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_2_SLOT24567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
def MovG2V40 {	// Instruction InstDSP F_2Reg_imm4 MovBase
  field bits<32> Inst = { 1, 1, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$rd);
  dag InOperandList = (ins VPR4Out:$ra, CPURegs:$rb, uimm16:$imm);
  string AsmString = "movg2v40	$ra,$rb,$imm";
  list<dag> Pattern = [(set VPR4Out:$rd, (insertelt VPR4Out:$ra, CPURegs:$rb, immZExt16:$imm))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_2_SLOT24567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
def MovGR {	// Instruction InstDSP DSPPseudo
  field bits<32> Inst = { 0, 0, 0, 0, 0, 0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rs, simm32:$in);
  string AsmString = "";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = PSEUDO;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def MovIGH {	// Instruction InstDSP F_1Reg_imm16 SMovBase
  field bits<32> Inst = { 1, 1, 1, 1, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm16{15}, imm16{14}, imm16{13}, imm16{12}, imm16{11}, imm16{10}, imm16{9}, imm16{8}, imm16{7}, imm16{6}, imm16{5}, imm16{4}, imm16{3}, imm16{2}, imm16{1}, imm16{0}, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm16:$imm16);
  string AsmString = "movigh	$ra,$imm16";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_3_SLOT014567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<16> imm16 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def MovIGL {	// Instruction InstDSP F_1Reg_imm16 SMovBase
  field bits<32> Inst = { 1, 1, 1, 1, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm16{15}, imm16{14}, imm16{13}, imm16{12}, imm16{11}, imm16{10}, imm16{9}, imm16{8}, imm16{7}, imm16{6}, imm16{5}, imm16{4}, imm16{3}, imm16{2}, imm16{1}, imm16{0}, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm16:$imm16);
  string AsmString = "movigl	$ra,$imm16";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_3_SLOT014567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "$ra = $rb";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<16> imm16 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def MovV2G10 {	// Instruction InstDSP F_2Reg_imm4 VMovBase
  field bits<32> Inst = { 1, 1, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins VPR16Out:$rb, uimm16:$imm);
  string AsmString = "movv2g10	$ra,$rb,$imm";
  list<dag> Pattern = [(set CPURegs:$ra, (vector_extract VPR16Out:$rb, immZExt16:$imm))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_2_SLOT24567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
def MovV2G20 {	// Instruction InstDSP F_2Reg_imm4 VMovBase
  field bits<32> Inst = { 1, 1, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins VPR8Out:$rb, uimm16:$imm);
  string AsmString = "movv2g20	$ra,$rb,$imm";
  list<dag> Pattern = [(set CPURegs:$ra, (vector_extract VPR8Out:$rb, immZExt16:$imm))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_2_SLOT24567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
def MovV2G40 {	// Instruction InstDSP F_2Reg_imm4 VMovBase
  field bits<32> Inst = { 1, 1, 1, 1, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, imm4{3}, imm4{2}, imm4{1}, imm4{0}, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins VPR4Out:$rb, uimm16:$imm);
  string AsmString = "movv2g40	$ra,$rb,$imm";
  list<dag> Pattern = [(set CPURegs:$ra, (extractelt VPR4Out:$rb, immZExt16:$imm))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_2_SLOT24567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<4> imm4 = { ?, ?, ?, ? };
  string NAME = ?;
}
def NEQ {	// Instruction InstDSP F_3Reg_001 SetCC_R
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "neq	 $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (setne CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def NEQI {	// Instruction InstDSP F_1Reg_imm9 SetCC_RI
  field bits<32> Inst = { 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, imm9{8}, imm9{7}, imm9{6}, imm9{5}, imm9{4}, imm9{3}, imm9{2}, imm9{1}, imm9{0}, 0, 0, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$rs);
  dag InOperandList = (ins CPURegs:$ra, simm16:$imm9);
  string AsmString = "neqi	 $ra, $imm9";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 1;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<9> imm9 = { ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def NOOP_SDNodeXForm {	// SDNodeXForm
  SDNode Opcode = imm;
  string XFormFunction = "";
  string NAME = ?;
}
def NOP {	// Instruction InstDSP F_Special_0Reg
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins);
  string AsmString = "nop";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NOP_SLOT01234567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def NOP_S {	// Instruction InstDSP F_Special_0Reg
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins);
  string AsmString = "nops";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NOP_SLOT01234567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def NOP_SLOT01234567 {	// InstrItinClass
  string NAME = ?;
}
def NoBypass {	// Bypass
  string NAME = ?;
}
def NoHonorSignDependentRounding {	// Predicate
  string CondString = "!TM.Options.HonorSignDependentRoundingFPMath()";
  bit AssemblerMatcherPredicate = 0;
  string AssemblerCondString = "";
  string PredicateName = "";
  string NAME = ?;
}
def NoItineraries {	// ProcessorItineraries
  list<FuncUnit> FU = [];
  list<Bypass> BP = [];
  list<InstrItinData> IID = [];
  string NAME = ?;
}
def NoItinerary {	// InstrItinClass
  string NAME = ?;
}
def NoReadAdvance {	// SchedReadWrite SchedRead ProcReadAdvance SchedReadAdvance
  list<SchedWrite> SchedReadAdvance:writes = [];
  int Cycles = 0;
  list<SchedWrite> ValidWrites = [];
  bit Unsupported = 0;
  SchedMachineModel SchedModel = ?;
  string NAME = ?;
}
def NoRegAltName {	// RegAltNameIndex
  string Namespace = "";
  string NAME = ?;
}
def NoSchedModel {	// SchedMachineModel
  int IssueWidth = -1;
  int MinLatency = -1;
  int MicroOpBufferSize = -1;
  int LoopMicroOpBufferSize = -1;
  int LoadLatency = -1;
  int HighLatency = -1;
  int MispredictPenalty = -1;
  ProcessorItineraries Itineraries = NoItineraries;
  bit PostRAScheduler = 0;
  bit CompleteModel = 1;
  bit NoModel = 1;
  string NAME = ?;
}
def NoSchedPred {	// SchedPredicate
  SchedMachineModel SchedModel = ?;
  string Predicate = "true";
  string NAME = ?;
}
def NoWrite {	// SchedReadWrite SchedWrite
  string NAME = ?;
}
def OFF0 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "OFF0";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [36];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
def OFF1 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "OFF1";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [37];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
  string NAME = ?;
}
def OFF2 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "OFF2";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [38];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
  string NAME = ?;
}
def OFF3 {	// Register DSPReg DSPMORReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "OFF3";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [39];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
  string NAME = ?;
}
def ORu {	// Instruction InstDSP F_3Reg_001 ArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit ArithLogicR:isAlu = 1;
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "or	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (or CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def OtherVT {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 0;
  string NAME = ?;
}
def PATCHPOINT {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs unknown:$dst);
  dag InOperandList = (ins i64imm:$id, i32imm:$nbytes, unknown:$callee, i32imm:$nargs, i32imm:$cc, variable_ops);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 1;
  bit canFoldAsLoad = 0;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 1;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def PC {	// Register DSPReg DSPC0Reg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "pc";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [34];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
def PHI {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins variable_ops);
  string AsmString = "PHINODE";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def PSEUDO {	// InstrItinClass
  string NAME = ?;
}
def Plus1 {	// SDNodeXForm
  SDNode Opcode = imm;
  string XFormFunction = " return getImm(N, N->getSExtValue() + 1); ";
  string NAME = ?;
}
def Pseudo {	// Format
  bits<5> Value = { 0, 0, 0, 0, 0 };
  string NAME = ?;
}
def RA {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR26";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [26];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0 };
  string NAME = ?;
}
def REG_SEQUENCE {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs unknown:$dst);
  dag InOperandList = (ins variable_ops);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 1;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def ReadDefault {	// SchedReadWrite SchedRead
  string NAME = ?;
}
def Required {	// ReservationKind
  int Value = 0;
  string NAME = ?;
}
def Reserved {	// ReservationKind
  int Value = 1;
  string NAME = ?;
}
def Ret {	// Instruction InstDSP F_Special_0Reg JumpFR RetBase
  field bits<32> Inst = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra);
  string AsmString = "ret	$ra";
  list<dag> Pattern = [(brind CPURegs:$ra)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 1;
  bit isBranch = 1;
  bit isIndirectBranch = 1;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 1;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 1;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ControlFlow_SLOT01;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def RetCC_DSP {	// CallingConv
  list<CCAction> Actions = [anonymous_510];
  string NAME = ?;
}
def RetCC_DSPCommon {	// CallingConv
  list<CCAction> Actions = [anonymous_497, anonymous_499, anonymous_501, anonymous_503, anonymous_505, anonymous_507, anonymous_509];
  string NAME = ?;
}
def RetLR {	// Instruction InstDSP DSPPseudo
  field bits<32> Inst = { 0, 0, 0, 0, 0, 0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins);
  string AsmString = "";
  list<dag> Pattern = [(DSPRet)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 1;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 1;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 1;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 1;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = PSEUDO;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  string NAME = ?;
}
def S0 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR16";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [16];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
  string NAME = ?;
}
def S1 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR17";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [17];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1 };
  string NAME = ?;
}
def S2 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR18";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [18];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0 };
  string NAME = ?;
}
def S3 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR19";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [19];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1 };
  string NAME = ?;
}
def S4 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR20";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [20];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0 };
  string NAME = ?;
}
def S5 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR21";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [21];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1 };
  string NAME = ?;
}
def S6 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR22";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [22];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0 };
  string NAME = ?;
}
def S7 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR23";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [23];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1 };
  string NAME = ?;
}
def SDNPAssociative {	// SDNodeProperty
  string NAME = ?;
}
def SDNPCommutative {	// SDNodeProperty
  string NAME = ?;
}
def SDNPHasChain {	// SDNodeProperty
  string NAME = ?;
}
def SDNPInGlue {	// SDNodeProperty
  string NAME = ?;
}
def SDNPMayLoad {	// SDNodeProperty
  string NAME = ?;
}
def SDNPMayStore {	// SDNodeProperty
  string NAME = ?;
}
def SDNPMemOperand {	// SDNodeProperty
  string NAME = ?;
}
def SDNPOptInGlue {	// SDNodeProperty
  string NAME = ?;
}
def SDNPOutGlue {	// SDNodeProperty
  string NAME = ?;
}
def SDNPSideEffect {	// SDNodeProperty
  string NAME = ?;
}
def SDNPVariadic {	// SDNodeProperty
  string NAME = ?;
}
def SDNPWantParent {	// SDNodeProperty
  string NAME = ?;
}
def SDNPWantRoot {	// SDNodeProperty
  string NAME = ?;
}
def SDTAtomic2 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_393, anonymous_394, anonymous_395];
  string NAME = ?;
}
def SDTAtomic3 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_389, anonymous_390, anonymous_391, anonymous_392];
  string NAME = ?;
}
def SDTAtomicFence {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_387, anonymous_388];
  string NAME = ?;
}
def SDTAtomicLoad {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_398, anonymous_399];
  string NAME = ?;
}
def SDTAtomicStore {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_396, anonymous_397];
  string NAME = ?;
}
def SDTBr {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_357];
  string NAME = ?;
}
def SDTBrcond {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_358, anonymous_359];
  string NAME = ?;
}
def SDTBrind {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_360];
  string NAME = ?;
}
def SDTConvertOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 5;
  list<SDTypeConstraint> Constraints = [anonymous_400, anonymous_401, anonymous_402, anonymous_403];
  string NAME = ?;
}
def SDTDSPVecOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_457, anonymous_458];
  string NAME = ?;
}
def SDTExtInreg {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_340, anonymous_341, anonymous_342, anonymous_343];
  string NAME = ?;
}
def SDTFPBinOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_310, anonymous_311, anonymous_312];
  string NAME = ?;
}
def SDTFPExtendOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_333, anonymous_334, anonymous_335];
  string NAME = ?;
}
def SDTFPLeaf {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 0;
  list<SDTypeConstraint> Constraints = [anonymous_297];
  string NAME = ?;
}
def SDTFPRoundOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_330, anonymous_331, anonymous_332];
  string NAME = ?;
}
def SDTFPSignOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_313, anonymous_314, anonymous_315];
  string NAME = ?;
}
def SDTFPTernaryOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_316, anonymous_317, anonymous_318, anonymous_319];
  string NAME = ?;
}
def SDTFPToIntOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_338, anonymous_339];
  string NAME = ?;
}
def SDTFPUnaryOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_328, anonymous_329];
  string NAME = ?;
}
def SDTIStore {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_363, anonymous_364, anonymous_365];
  string NAME = ?;
}
def SDTIntBinHiLoOp {	// SDTypeProfile
  int NumResults = 2;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_306, anonymous_307, anonymous_308, anonymous_309];
  string NAME = ?;
}
def SDTIntBinOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_300, anonymous_301, anonymous_302];
  string NAME = ?;
}
def SDTIntExtendOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_322, anonymous_323, anonymous_324];
  string NAME = ?;
}
def SDTIntLeaf {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 0;
  list<SDTypeConstraint> Constraints = [anonymous_296];
  string NAME = ?;
}
def SDTIntShiftOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_303, anonymous_304, anonymous_305];
  string NAME = ?;
}
def SDTIntToFPOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_336, anonymous_337];
  string NAME = ?;
}
def SDTIntTruncOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_325, anonymous_326, anonymous_327];
  string NAME = ?;
}
def SDTIntUnaryOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_320, anonymous_321];
  string NAME = ?;
}
def SDTLoad {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_361];
  string NAME = ?;
}
def SDTMemBarrier {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 5;
  list<SDTypeConstraint> Constraints = [anonymous_382, anonymous_383, anonymous_384, anonymous_385, anonymous_386];
  string NAME = ?;
}
def SDTNone {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 0;
  list<SDTypeConstraint> Constraints = [];
  string NAME = ?;
}
def SDTOther {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 0;
  list<SDTypeConstraint> Constraints = [anonymous_299];
  string NAME = ?;
}
def SDTPrefetch {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 4;
  list<SDTypeConstraint> Constraints = [anonymous_378, anonymous_379, anonymous_380, anonymous_381];
  string NAME = ?;
}
def SDTPtrLeaf {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 0;
  list<SDTypeConstraint> Constraints = [anonymous_298];
  string NAME = ?;
}
def SDTSelect {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_347, anonymous_348, anonymous_349];
  string NAME = ?;
}
def SDTSelectCC {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 5;
  list<SDTypeConstraint> Constraints = [anonymous_353, anonymous_354, anonymous_355, anonymous_356];
  string NAME = ?;
}
def SDTSetCC {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_344, anonymous_345, anonymous_346];
  string NAME = ?;
}
def SDTStore {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_362];
  string NAME = ?;
}
def SDTSubVecExtract {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_373, anonymous_374];
  string NAME = ?;
}
def SDTSubVecInsert {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_375, anonymous_376, anonymous_377];
  string NAME = ?;
}
def SDTUNDEF {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 0;
  list<SDTypeConstraint> Constraints = [];
  string NAME = ?;
}
def SDTUnaryOp {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [];
  string NAME = ?;
}
def SDTVSelect {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_350, anonymous_351, anonymous_352];
  string NAME = ?;
}
def SDTVecExtract {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_368, anonymous_369];
  string NAME = ?;
}
def SDTVecInsert {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_370, anonymous_371, anonymous_372];
  string NAME = ?;
}
def SDTVecShuffle {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_366, anonymous_367];
  string NAME = ?;
}
def SDT_DSPCallSeqEnd {	// SDTypeProfile SDCallSeqEnd
  int NumResults = 0;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_463, anonymous_464];
  string NAME = ?;
}
def SDT_DSPCallSeqStart {	// SDTypeProfile SDCallSeqStart
  int NumResults = 0;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_462];
  string NAME = ?;
}
def SDT_DSPJmpLink {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_461];
  string NAME = ?;
}
def SDT_DSPRet {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_453];
  string NAME = ?;
}
def SDT_DSPVecInsert {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_454, anonymous_455, anonymous_456];
  string NAME = ?;
}
def SDT_DSPWrapper {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_459, anonymous_460];
  string NAME = ?;
}
def SDT_assertext {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [anonymous_424, anonymous_425, anonymous_426];
  string NAME = ?;
}
def SETEQ {	// CondCode
  string NAME = ?;
}
def SETGE {	// CondCode
  string NAME = ?;
}
def SETGT {	// CondCode
  string NAME = ?;
}
def SETLE {	// CondCode
  string NAME = ?;
}
def SETLT {	// CondCode
  string NAME = ?;
}
def SETNE {	// CondCode
  string NAME = ?;
}
def SETO {	// CondCode
  string NAME = ?;
}
def SETOEQ {	// CondCode
  string NAME = ?;
}
def SETOGE {	// CondCode
  string NAME = ?;
}
def SETOGT {	// CondCode
  string NAME = ?;
}
def SETOLE {	// CondCode
  string NAME = ?;
}
def SETOLT {	// CondCode
  string NAME = ?;
}
def SETONE {	// CondCode
  string NAME = ?;
}
def SETUEQ {	// CondCode
  string NAME = ?;
}
def SETUGE {	// CondCode
  string NAME = ?;
}
def SETUGT {	// CondCode
  string NAME = ?;
}
def SETULE {	// CondCode
  string NAME = ?;
}
def SETULT {	// CondCode
  string NAME = ?;
}
def SETUNE {	// CondCode
  string NAME = ?;
}
def SETUO {	// CondCode
  string NAME = ?;
}
def SHL {	// Instruction InstDSP F_3Reg_001 shift_rotate_reg
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "sl	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (shl CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def SLOT0 {	// FuncUnit
  string NAME = ?;
}
def SLOT1 {	// FuncUnit
  string NAME = ?;
}
def SLOT2 {	// FuncUnit
  string NAME = ?;
}
def SLOT3 {	// FuncUnit
  string NAME = ?;
}
def SLOT4 {	// FuncUnit
  string NAME = ?;
}
def SLOT5 {	// FuncUnit
  string NAME = ?;
}
def SLOT6 {	// FuncUnit
  string NAME = ?;
}
def SLOT7 {	// FuncUnit
  string NAME = ?;
}
def SP {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR30";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [30];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0 };
  string NAME = ?;
}
def SR {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [i32];
  int Size = 0;
  int Alignment = 32;
  int CopyCost = 1;
  dag MemberList = (add SW);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def SRA {	// Instruction InstDSP F_3Reg_001 shift_rotate_reg
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "sra	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (sra CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def SRL {	// Instruction InstDSP F_3Reg_001 shift_rotate_reg
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 1, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "srl	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (srl CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def ST {	// Instruction InstDSP F_LS_2Reg_imm9 FMem StoreM !strconcat(NAME, "")
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, mem:$addr);
  string AsmString = "store32	$ra, $addr";
  list<dag> Pattern = [(store_a CPURegs:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  bit StoreM32::Pseudo = 0;
  string NAME = "ST";
}
def STACKMAP {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs);
  dag InOperandList = (ins i64imm:$id, i32imm:$nbytes, variable_ops);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 1;
  bit canFoldAsLoad = 0;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 1;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def STH {	// Instruction InstDSP F_LS_2Reg_imm9 FMem StoreM !strconcat(NAME, "")
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, memh:$addr);
  string AsmString = "store16	$ra, $addr";
  list<dag> Pattern = [(truncstorei16 CPURegs:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  bit StoreM16::Pseudo = 0;
  string NAME = "STH";
}
def ST_Ins_SLOT67 {	// InstrItinClass
  string NAME = ?;
}
def SUBREG_TO_REG {	// Instruction
  string Namespace = "TargetOpcode";
  dag OutOperandList = (outs unknown:$dst);
  dag InOperandList = (ins unknown:$implsrc, unknown:$subsrc, i32imm:$subidx);
  string AsmString = "";
  list<dag> Pattern = ?;
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 0;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 1;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 1;
  bit isCodeGenOnly = 1;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  string NAME = ?;
}
def SUBu {	// Instruction InstDSP F_3Reg_001 ArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit ArithLogicR:isAlu = 1;
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "sub	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (sub CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def SW {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR27";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [27];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1 };
  string NAME = ?;
}
def Slot0 {	// SlotMode
  bits<3> Value = { 0, 0, 0 };
  string NAME = ?;
}
def Slot1 {	// SlotMode
  bits<3> Value = { 0, 0, 1 };
  string NAME = ?;
}
def Slot2 {	// SlotMode
  bits<3> Value = { 0, 1, 0 };
  string NAME = ?;
}
def Slot3 {	// SlotMode
  bits<3> Value = { 0, 1, 1 };
  string NAME = ?;
}
def Slot4 {	// SlotMode
  bits<3> Value = { 1, 0, 0 };
  string NAME = ?;
}
def Slot5 {	// SlotMode
  bits<3> Value = { 1, 0, 1 };
  string NAME = ?;
}
def Slot6 {	// SlotMode
  bits<3> Value = { 1, 1, 0 };
  string NAME = ?;
}
def Slot7 {	// SlotMode
  bits<3> Value = { 1, 1, 1 };
  string NAME = ?;
}
def Special_Zero {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [i32];
  int Size = 0;
  int Alignment = 32;
  int CopyCost = 1;
  dag MemberList = (add ZERO);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def T0 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR8";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [8];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
  string NAME = ?;
}
def T1 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR9";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [9];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1 };
  string NAME = ?;
}
def T2 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR10";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [10];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0 };
  string NAME = ?;
}
def T3 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR11";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [11];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1 };
  string NAME = ?;
}
def T4 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR12";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [12];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0 };
  string NAME = ?;
}
def T5 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR13";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [13];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1 };
  string NAME = ?;
}
def T6 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR14";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [14];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0 };
  string NAME = ?;
}
def T7 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR15";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [15];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1 };
  string NAME = ?;
}
def T8 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR24";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [24];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 };
  string NAME = ?;
}
def T9 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR25";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [25];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1 };
  string NAME = ?;
}
def TEST {	// Instruction InstDSP F_3Reg_001 Test_Fmt
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 0, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "test	$rb $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_test_qb CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def TESTI {	// Instruction InstDSP F_2Reg_2 Testi_Fmt
  field bits<32> Inst = { 1, 0, 1, 1, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm5:$imm5);
  string AsmString = "testi	$rb $imm5";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_testi_qb CPURegs:$rb, immSExt5:$imm5))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def Throws {	// IntrinsicProperty
  string NAME = ?;
}
def V0 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR2";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [2];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
  string NAME = ?;
}
def V1 {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR3";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [3];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
  string NAME = ?;
}
def VADD16 {	// Instruction InstDSP F_3Reg_001 VArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vadd20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (add VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VADD32 {	// Instruction InstDSP F_3Reg_001 VArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vadd40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (add VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VADD8 {	// Instruction InstDSP F_3Reg_001 VArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vadd10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (add VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VLOAD16 {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM LoadM128_16
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit LoadM128_16:Pseudo = 0;
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins mem:$addr);
  string AsmString = "vload16	$ra, $addr";
  list<dag> Pattern = [(set VPR8Out:$ra, (load_a addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VLOAD32 {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM LoadM128
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit LoadM128:Pseudo = 0;
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins mem:$addr);
  string AsmString = "vload32	$ra, $addr";
  list<dag> Pattern = [(set VPR4Out:$ra, (load_a addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VLOAD8 {	// Instruction InstDSP F_LS_2Reg_imm9 FMem LoadM LoadM128_8
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit LoadM128_8:Pseudo = 0;
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins mem:$addr);
  string AsmString = "vload8	$ra, $addr";
  list<dag> Pattern = [(set VPR16Out:$ra, (load_a addr:$addr))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 1;
  bit mayLoad = 1;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 1;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VMAX10 {	// Instruction InstDSP F_3Reg_001 VMMBase
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 1, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rt);
  string AsmString = "vmax10	$ra, $rb, $rt";
  list<dag> Pattern = [(set VPR16Out:$ra, (DSPVMAX VPR16Out:$rb, VPR16Out:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VMAX20 {	// Instruction InstDSP F_3Reg_001 VMMBase
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 1, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rt);
  string AsmString = "vmax20	$ra, $rb, $rt";
  list<dag> Pattern = [(set VPR8Out:$ra, (DSPVMAX VPR8Out:$rb, VPR8Out:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VMAX40 {	// Instruction InstDSP F_3Reg_001 VMMBase
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 1, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rt);
  string AsmString = "vmax40	$ra, $rb, $rt";
  list<dag> Pattern = [(set VPR4Out:$ra, (DSPVMAX VPR4Out:$rb, VPR4Out:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VMIN10 {	// Instruction InstDSP F_3Reg_001 VMMBase
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 1, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rt);
  string AsmString = "vmin10	$ra, $rb, $rt";
  list<dag> Pattern = [(set VPR16Out:$ra, (DSPVMIN VPR16Out:$rb, VPR16Out:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VMIN20 {	// Instruction InstDSP F_3Reg_001 VMMBase
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 1, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rt);
  string AsmString = "vmin20	$ra, $rb, $rt";
  list<dag> Pattern = [(set VPR8Out:$ra, (DSPVMIN VPR8Out:$rb, VPR8Out:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VMIN40 {	// Instruction InstDSP F_3Reg_001 VMMBase
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 1, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rt);
  string AsmString = "vmin40	$ra, $rb, $rt";
  list<dag> Pattern = [(set VPR4Out:$ra, (DSPVMIN VPR4Out:$rb, VPR4Out:$rt))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VMovG2V40 {	// Instruction InstDSP F_2Reg_2 RMovBase
  field bits<32> Inst = { 1, 1, 1, 1, 0, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins VPR4Out:$ra, CPURegs:$rb);
  string AsmString = "vmovrg2v40	$ra,$rb";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = Data_Transmission_2_SLOT24567;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VPR16Out {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [v16i8];
  int Size = 0;
  int Alignment = 128;
  int CopyCost = 1;
  dag MemberList = (add CPU128Regs);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def VPR4Out {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [v4i32];
  int Size = 0;
  int Alignment = 128;
  int CopyCost = 1;
  dag MemberList = (add CPU128Regs);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def VPR8Out {	// DAGOperand RegisterClass
  RegAltNameIndex RegisterClass:idx = NoRegAltName;
  string Namespace = "DSP";
  list<ValueType> RegTypes = [v8i16];
  int Size = 0;
  int Alignment = 128;
  int CopyCost = 1;
  dag MemberList = (add CPU128Regs);
  RegAltNameIndex altNameIndex = NoRegAltName;
  bit isAllocatable = 1;
  list<dag> AltOrders = [];
  string AltOrderSelect = "";
  string NAME = ?;
}
def VR0 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR0";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [T0];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [48];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
def VR1 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR1";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [T1];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [49];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
  string NAME = ?;
}
def VR10 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR10";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [S2];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [58];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0 };
  string NAME = ?;
}
def VR11 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR11";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [S3];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [59];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1 };
  string NAME = ?;
}
def VR12 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR12";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [S4];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [60];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0 };
  string NAME = ?;
}
def VR13 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR13";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [S5];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [61];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1 };
  string NAME = ?;
}
def VR14 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR14";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [S6];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [62];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0 };
  string NAME = ?;
}
def VR15 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR15";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [S7];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [63];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1 };
  string NAME = ?;
}
def VR2 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR2";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [T2];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [50];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
  string NAME = ?;
}
def VR3 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR3";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [T3];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [51];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
  string NAME = ?;
}
def VR4 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR4";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [T4];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [52];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };
  string NAME = ?;
}
def VR5 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR5";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [T5];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [53];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1 };
  string NAME = ?;
}
def VR6 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR6";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [T6];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [54];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 };
  string NAME = ?;
}
def VR7 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR7";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [T7];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [55];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
  string NAME = ?;
}
def VR8 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR8";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [S0];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [56];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
  string NAME = ?;
}
def VR9 {	// Register RegisterWithSubRegs DSPRegWithSubRegs DSPVRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "VR9";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [S1];
  list<SubRegIndex> SubRegIndices = [sub_32];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [57];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1 };
  string NAME = ?;
}
def VSTORE16 {	// Instruction InstDSP F_LS_2Reg_imm9 FMem StoreM StoreM128_16
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit StoreM128_16:Pseudo = 0;
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins VPR8Out:$ra, mem:$addr);
  string AsmString = "vstore20	$ra, $addr";
  list<dag> Pattern = [(store_a VPR8Out:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VSTORE32 {	// Instruction InstDSP F_LS_2Reg_imm9 FMem StoreM StoreM128
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit StoreM128:Pseudo = 0;
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins VPR4Out:$ra, mem:$addr);
  string AsmString = "vstore40	$ra, $addr";
  list<dag> Pattern = [(store_a VPR4Out:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VSTORE8 {	// Instruction InstDSP F_LS_2Reg_imm9 FMem StoreM StoreM128_8
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit StoreM128_8:Pseudo = 0;
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins VPR16Out:$ra, mem:$addr);
  string AsmString = "vstore10	$ra, $addr";
  list<dag> Pattern = [(store_a VPR16Out:$ra, addr:$addr)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VSUB16 {	// Instruction InstDSP F_3Reg_001 VArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vsub20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (sub VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VSUB32 {	// Instruction InstDSP F_3Reg_001 VArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vsub40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (sub VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def VSUB8 {	// Instruction InstDSP F_3Reg_001 VArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 1, 0, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vsub10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (sub VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def XORu {	// Instruction InstDSP F_3Reg_001 ArithLogicR
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 0, 0, 0, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bit ArithLogicR:isAlu = 1;
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "xor	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (xor CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 1;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_S_SLOT0167;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def ZERO {	// Register DSPReg DSPGPRReg DwarfRegNum
  list<string> Register:altNames = [];
  string Namespace = "DSP";
  string AsmName = "GR0";
  list<string> AltNames = [];
  list<Register> Aliases = [];
  list<Register> SubRegs = [];
  list<SubRegIndex> SubRegIndices = [];
  list<RegAltNameIndex> RegAltNameIndices = [];
  list<int> DwarfNumbers = [0];
  int CostPerUse = 0;
  bit CoveredBySubRegs = 0;
  bits<16> HWEncoding = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string NAME = ?;
}
def add {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ADD";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative, SDNPAssociative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def addc {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ADDC";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative, SDNPOutGlue];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def adde {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ADDE";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative, SDNPOutGlue, SDNPInGlue];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def addr {	// ComplexPattern
  ValueType Ty = iPTR;
  int NumOperands = 2;
  string SelectFunc = "SelectAddr";
  list<SDNode> RootNodes = [frameindex];
  list<SDNodeProperty> Properties = [SDNPWantParent];
  string NAME = ?;
}
def and {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::AND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative, SDNPAssociative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def anonymous_0 {	// IntrinsicProperty NoCapture
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_1 {	// IntrinsicProperty NoCapture
  int ArgNo = 2;
  string NAME = ?;
}
def anonymous_10 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_100 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_101 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_102 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_103 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_104 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_105 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_106 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_107 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_108 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_109 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_11 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_110 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_111 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_112 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_113 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_114 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_115 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_116 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_117 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_118 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_119 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_12 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_120 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_121 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_122 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_123 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_124 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_125 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_126 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_127 {	// LLVMType LLVMMatchType LLVMExtendedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_128 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_129 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_13 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_130 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_131 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_132 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_133 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_134 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 1;
  string NAME = ?;
}
def anonymous_135 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 1;
  string NAME = ?;
}
def anonymous_136 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_137 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_138 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_139 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_14 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_140 {	// LLVMType LLVMMatchType LLVMExtendedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_141 {	// LLVMType LLVMMatchType LLVMExtendedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_142 {	// LLVMType LLVMMatchType LLVMExtendedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_143 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_144 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_145 {	// LLVMType LLVMMatchType LLVMHalfElementsVectorType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_146 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_147 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_148 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_149 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_15 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_150 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_151 {	// LLVMType LLVMMatchType LLVMHalfElementsVectorType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_152 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 1;
  string NAME = ?;
}
def anonymous_153 {	// LLVMType LLVMMatchType LLVMHalfElementsVectorType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_154 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_155 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_156 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_155;
  string NAME = ?;
}
def anonymous_157 {	// IntrinsicProperty NoCapture
  int ArgNo = 2;
  string NAME = ?;
}
def anonymous_158 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_159 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_16 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_160 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_159;
  string NAME = ?;
}
def anonymous_161 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_162 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_163 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_164 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_165 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_166 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_165;
  string NAME = ?;
}
def anonymous_167 {	// IntrinsicProperty NoCapture
  int ArgNo = 2;
  string NAME = ?;
}
def anonymous_168 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_169 {	// IntrinsicProperty NoCapture
  int ArgNo = 3;
  string NAME = ?;
}
def anonymous_17 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_170 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_171 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_172 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_173 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_172;
  string NAME = ?;
}
def anonymous_174 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_175 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_176 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_177 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_178 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_179 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_18 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_180 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_181 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_182 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_181;
  string NAME = ?;
}
def anonymous_183 {	// IntrinsicProperty NoCapture
  int ArgNo = 3;
  string NAME = ?;
}
def anonymous_184 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_185 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_186 {	// IntrinsicProperty NoCapture
  int ArgNo = 4;
  string NAME = ?;
}
def anonymous_187 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_188 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_189 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_19 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_190 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_191 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_190;
  string NAME = ?;
}
def anonymous_192 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_193 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_194 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_195 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_196 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_197 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_198 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_199 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_2 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_20 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_200 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_201 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_202 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_203 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_202;
  string NAME = ?;
}
def anonymous_204 {	// IntrinsicProperty NoCapture
  int ArgNo = 4;
  string NAME = ?;
}
def anonymous_205 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_206 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_207 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_208 {	// IntrinsicProperty NoCapture
  int ArgNo = 5;
  string NAME = ?;
}
def anonymous_209 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_21 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_210 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_211 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_212 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_213 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_214 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_215 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_216 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_217 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_218 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_219 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_22 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_220 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_221 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_222 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_223 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_224 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_225 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_226 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_227 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_228 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_229 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_23 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_230 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_231 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_232 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_233 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_234 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_235 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_236 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_237 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_238 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_239 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_24 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_240 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_241 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_242 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_243 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_244 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_245 {	// IntrinsicProperty NoCapture
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_246 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_247 {	// IntrinsicProperty NoCapture
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_248 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_249 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_25 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_250 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_251 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_252 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_253 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_254 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_255 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_256 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_257 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_258 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_259 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = llvm_float_ty;
  string NAME = ?;
}
def anonymous_26 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_260 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_261 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = llvm_i32_ty;
  string NAME = ?;
}
def anonymous_262 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_263 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = llvm_i32_ty;
  string NAME = ?;
}
def anonymous_264 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_265 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_266 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_265;
  string NAME = ?;
}
def anonymous_267 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_268 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_269 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_268;
  string NAME = ?;
}
def anonymous_27 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_270 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_271 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_272 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_271;
  string NAME = ?;
}
def anonymous_273 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_274 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_275 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_274;
  string NAME = ?;
}
def anonymous_276 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_277 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_278 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_277;
  string NAME = ?;
}
def anonymous_279 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_28 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_280 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_281 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = anonymous_280;
  string NAME = ?;
}
def anonymous_282 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_283 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_284 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_285 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_286 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_287 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_288 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_289 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_29 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_290 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_291 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_292 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_293 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_294 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_295 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_296 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_297 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_298 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_299 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 0;
  ValueType VT = OtherVT;
  string NAME = ?;
}
def anonymous_3 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_30 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_300 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_301 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_302 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_303 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_304 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_305 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 2;
  string NAME = ?;
}
def anonymous_306 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_307 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_308 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 3;
  string NAME = ?;
}
def anonymous_309 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_31 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_310 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_311 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_312 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_313 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_314 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_315 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 2;
  string NAME = ?;
}
def anonymous_316 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_317 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_318 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 3;
  string NAME = ?;
}
def anonymous_319 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_32 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_320 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_321 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_322 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_323 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_324 {	// SDTypeConstraint SDTCisOpSmallerThanOp
  int OperandNum = 1;
  int BigOperandNum = 0;
  string NAME = ?;
}
def anonymous_325 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_326 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_327 {	// SDTypeConstraint SDTCisOpSmallerThanOp
  int OperandNum = 0;
  int BigOperandNum = 1;
  string NAME = ?;
}
def anonymous_328 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_329 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_33 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_330 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_331 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_332 {	// SDTypeConstraint SDTCisOpSmallerThanOp
  int OperandNum = 0;
  int BigOperandNum = 1;
  string NAME = ?;
}
def anonymous_333 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_334 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_335 {	// SDTypeConstraint SDTCisOpSmallerThanOp
  int OperandNum = 1;
  int BigOperandNum = 0;
  string NAME = ?;
}
def anonymous_336 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_337 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_338 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_339 {	// SDTypeConstraint SDTCisFP
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_34 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_340 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_341 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_342 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 2;
  ValueType VT = OtherVT;
  string NAME = ?;
}
def anonymous_343 {	// SDTypeConstraint SDTCisVTSmallerThanOp
  int OperandNum = 2;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_344 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_345 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 1;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_346 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 3;
  ValueType VT = OtherVT;
  string NAME = ?;
}
def anonymous_347 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_348 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_349 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 2;
  int OtherOperandNum = 3;
  string NAME = ?;
}
def anonymous_35 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_350 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_351 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_352 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 2;
  int OtherOperandNum = 3;
  string NAME = ?;
}
def anonymous_353 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 1;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_354 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 3;
  int OtherOperandNum = 4;
  string NAME = ?;
}
def anonymous_355 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 3;
  string NAME = ?;
}
def anonymous_356 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 5;
  ValueType VT = OtherVT;
  string NAME = ?;
}
def anonymous_357 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 0;
  ValueType VT = OtherVT;
  string NAME = ?;
}
def anonymous_358 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_359 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 1;
  ValueType VT = OtherVT;
  string NAME = ?;
}
def anonymous_36 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_360 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_361 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_362 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_363 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_364 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_365 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 3;
  string NAME = ?;
}
def anonymous_366 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_367 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 1;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_368 {	// SDTypeConstraint SDTCisEltOfVec
  int OperandNum = 0;
  int OtherOpNum = 1;
  string NAME = ?;
}
def anonymous_369 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 2;
  string NAME = ?;
}
def anonymous_37 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_370 {	// SDTypeConstraint SDTCisEltOfVec
  int OperandNum = 2;
  int OtherOpNum = 1;
  string NAME = ?;
}
def anonymous_371 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_372 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 3;
  string NAME = ?;
}
def anonymous_373 {	// SDTypeConstraint SDTCisSubVecOfVec
  int OperandNum = 0;
  int OtherOpNum = 1;
  string NAME = ?;
}
def anonymous_374 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 2;
  string NAME = ?;
}
def anonymous_375 {	// SDTypeConstraint SDTCisSubVecOfVec
  int OperandNum = 2;
  int OtherOpNum = 1;
  string NAME = ?;
}
def anonymous_376 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_377 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 3;
  string NAME = ?;
}
def anonymous_378 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_379 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 1;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_38 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_380 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 1;
  int OtherOperandNum = 3;
  string NAME = ?;
}
def anonymous_381 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_382 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_383 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_384 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 3;
  string NAME = ?;
}
def anonymous_385 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 4;
  string NAME = ?;
}
def anonymous_386 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_387 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_388 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_389 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_39 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_390 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 3;
  string NAME = ?;
}
def anonymous_391 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_392 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_393 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_394 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_395 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_396 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_397 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_398 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_399 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_4 {	// IntrinsicProperty NoCapture
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_40 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_400 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 2;
  ValueType VT = OtherVT;
  string NAME = ?;
}
def anonymous_401 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 3;
  ValueType VT = OtherVT;
  string NAME = ?;
}
def anonymous_402 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 4;
  string NAME = ?;
}
def anonymous_403 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 5;
  string NAME = ?;
}
def anonymous_404 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = -1;
  list<SDTypeConstraint> Constraints = [];
  string NAME = ?;
}
def anonymous_405 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 1;
  list<SDTypeConstraint> Constraints = [];
  string NAME = ?;
}
def anonymous_406 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 2;
  string NAME = ?;
}
def anonymous_407 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_406];
  string NAME = ?;
}
def anonymous_408 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_409 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 3;
  string NAME = ?;
}
def anonymous_41 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_410 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 3;
  list<SDTypeConstraint> Constraints = [anonymous_408, anonymous_409];
  string NAME = ?;
}
def anonymous_411 {	// SDTypeConstraint SDTCisSubVecOfVec
  int OperandNum = 1;
  int OtherOpNum = 0;
  string NAME = ?;
}
def anonymous_412 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 1;
  int OtherOperandNum = 2;
  string NAME = ?;
}
def anonymous_413 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_411, anonymous_412];
  string NAME = ?;
}
def anonymous_414 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 2;
  string NAME = ?;
}
def anonymous_415 {	// SDTypeConstraint SDTCisVec
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_416 {	// SDTypeConstraint SDTCisVec
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_417 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = 2;
  list<SDTypeConstraint> Constraints = [anonymous_414, anonymous_415, anonymous_416];
  string NAME = ?;
}
def anonymous_418 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_419 {	// SDTypeProfile
  int NumResults = 0;
  int NumOperands = -1;
  list<SDTypeConstraint> Constraints = [anonymous_418];
  string NAME = ?;
}
def anonymous_42 {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = llvm_anyint_ty;
  string NAME = ?;
}
def anonymous_420 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_421 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = -1;
  list<SDTypeConstraint> Constraints = [anonymous_420];
  string NAME = ?;
}
def anonymous_422 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_423 {	// SDTypeProfile
  int NumResults = 1;
  int NumOperands = -1;
  list<SDTypeConstraint> Constraints = [anonymous_422];
  string NAME = ?;
}
def anonymous_424 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_425 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_426 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 1;
  int OtherOperandNum = 0;
  string NAME = ?;
}
def anonymous_427 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT0, SLOT1, SLOT2, SLOT3, SLOT4, SLOT5, SLOT6, SLOT7];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_428 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = NOP_SLOT01234567;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_427];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_429 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT0, SLOT6];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_43 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_430 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = ALU32_S_SLOT06;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_429];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_431 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT0, SLOT1, SLOT6, SLOT7];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_432 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = ALU32_S_SLOT0167;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_431];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_433 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT2, SLOT3];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_434 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = ALU32_V_SLOT23;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_433];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_435 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT0, SLOT1];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_436 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = ControlFlow_SLOT01;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_435];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_437 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT0, SLOT1];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_438 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = Data_Transmission_0_SLOT01;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_437];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_439 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT6, SLOT7];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_44 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_440 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = Data_Transmission_1_SLOT67;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_439];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_441 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT2, SLOT4, SLOT5, SLOT6, SLOT7];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_442 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = Data_Transmission_2_SLOT24567;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_441];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_443 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT0, SLOT1, SLOT4, SLOT5, SLOT6, SLOT7];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_444 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = Data_Transmission_3_SLOT014567;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_443];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_445 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT2];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_446 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = Data_Transmission_4_SLOT2;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_445];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_447 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT4, SLOT5];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_448 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = LD_Ins_SLOT45;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_447];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_449 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT6, SLOT7];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_45 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_450 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = ST_Ins_SLOT67;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_449];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_451 {	// InstrStage
  int InstrStage:timeinc = -1;
  ReservationKind InstrStage:kind = Required;
  int Cycles = 1;
  list<FuncUnit> Units = [SLOT0, SLOT1, SLOT2, SLOT3, SLOT4, SLOT5, SLOT6, SLOT7];
  int TimeInc = -1;
  int Kind = 0;
  string NAME = ?;
}
def anonymous_452 {	// InstrItinData
  list<int> InstrItinData:operandcycles = [];
  list<Bypass> InstrItinData:bypasses = [];
  int InstrItinData:uops = 1;
  InstrItinClass TheClass = PSEUDO;
  int NumMicroOps = 1;
  list<InstrStage> Stages = [anonymous_451];
  list<int> OperandCycles = [];
  list<Bypass> Bypasses = [];
  string NAME = ?;
}
def anonymous_453 {	// SDTypeConstraint SDTCisInt
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_454 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 3;
  string NAME = ?;
}
def anonymous_455 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 1;
  int OtherOperandNum = 0;
  string NAME = ?;
}
def anonymous_456 {	// SDTypeConstraint SDTCisVec
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_457 {	// SDTypeConstraint SDTCisVec
  int OperandNum = 1;
  string NAME = ?;
}
def anonymous_458 {	// SDTypeConstraint SDTCisVec
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_459 {	// SDTypeConstraint SDTCisSameAs
  int OperandNum = 0;
  int OtherOperandNum = 1;
  string NAME = ?;
}
def anonymous_46 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_460 {	// SDTypeConstraint SDTCisPtrTy
  int OperandNum = 0;
  string NAME = ?;
}
def anonymous_461 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 0;
  ValueType VT = iPTR;
  string NAME = ?;
}
def anonymous_462 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 0;
  ValueType VT = i32;
  string NAME = ?;
}
def anonymous_463 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 0;
  ValueType VT = i32;
  string NAME = ?;
}
def anonymous_464 {	// SDTypeConstraint SDTCisVT
  int OperandNum = 1;
  ValueType VT = i32;
  string NAME = ?;
}
def anonymous_465 {	// Pattern Pat
  dag PatternToMatch = (i32 immSExt32:$in);
  list<dag> ResultInstrs = [(MovGR ZERO, imm:$in)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_466 {	// Pattern Pat
  dag PatternToMatch = (truncstorei16 (i32 CPURegs:$src1), addr:$addr);
  list<dag> ResultInstrs = [(STH CPURegs:$src1, addr:$addr)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_467 {	// Pattern Pat
  dag PatternToMatch = (i32 (DSPHi tglobaladdr:$in));
  list<dag> ResultInstrs = [(MovIGH ZERO, tglobaladdr:$in)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_468 {	// Pattern Pat
  dag PatternToMatch = (add CPURegs:$hi, (DSPLo tglobaladdr:$lo));
  list<dag> ResultInstrs = [(MovIGL CPURegs:$hi, tglobaladdr:$lo)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_469 {	// Pattern Pat
  dag PatternToMatch = (add CPURegs:$gp, (DSPGPRel tglobaladdr:$in));
  list<dag> ResultInstrs = [(ADDiu CPURegs:$gp, tglobaladdr:$in)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_47 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_470 {	// Pattern Pat
  dag PatternToMatch = (DSPHi tconstpool:$in);
  list<dag> ResultInstrs = [(MovIGH ZERO, tconstpool:$in)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_471 {	// Pattern Pat
  dag PatternToMatch = (add CPURegs:$hi, (DSPLo tconstpool:$lo));
  list<dag> ResultInstrs = [(MovIGL CPURegs:$hi, tconstpool:$lo)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_478anonymous_472 {	// Pattern Pat anonymous_472
  dag PatternToMatch = (brcond (i32 (setgt CPURegs:$lhs, immSExt16Plus1:$rhs)), bb:$dst);
  list<dag> ResultInstrs = [(JNC (LTI CPURegs:$lhs, (Plus1 imm:$rhs)), bb:$dst)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_478";
}
def anonymous_478anonymous_473 {	// Pattern Pat anonymous_473
  dag PatternToMatch = (brcond (i32 (setugt CPURegs:$lhs, immSExt16Plus1:$rhs)), bb:$dst);
  list<dag> ResultInstrs = [(JNC (LTI CPURegs:$lhs, (Plus1 imm:$rhs)), bb:$dst)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_478";
}
def anonymous_478anonymous_474 {	// Pattern Pat anonymous_474
  dag PatternToMatch = (brcond (i32 (seteq CPURegs:$lhs, immSExt16:$imm16)), bb:$dst);
  list<dag> ResultInstrs = [(JC (EQI CPURegs:$lhs, immSExt16:$imm16), bb:$dst)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_478";
}
def anonymous_478anonymous_475 {	// Pattern Pat anonymous_475
  dag PatternToMatch = (brcond (i32 (setne CPURegs:$lhs, immSExt16:$imm16)), bb:$dst);
  list<dag> ResultInstrs = [(JC (NEQI CPURegs:$lhs, immSExt16:$imm16), bb:$dst)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_478";
}
def anonymous_478anonymous_476 {	// Pattern Pat anonymous_476
  dag PatternToMatch = (brcond (i32 (setle CPURegs:$lhs, immSExt9:$imm9)), bb:$dst);
  list<dag> ResultInstrs = [(JC (LEI CPURegs:$lhs, immSExt9:$imm9), bb:$dst)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_478";
}
def anonymous_478anonymous_477 {	// Pattern Pat anonymous_477
  dag PatternToMatch = (brcond CPURegs:$cond, bb:$dst);
  list<dag> ResultInstrs = [(JC CPURegs:$cond, bb:$dst)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_478";
}
def anonymous_479 {	// Pattern Pat
  dag PatternToMatch = (DSPJmpLink (i32 tglobaladdr:$dst));
  list<dag> ResultInstrs = [(CALL tglobaladdr:$dst)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_48 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_480 {	// Pattern Pat
  dag PatternToMatch = (DSPJmpLink texternalsym:$dst);
  list<dag> ResultInstrs = [(CALL texternalsym:$dst)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = ?;
}
def anonymous_49 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_491anonymous_481 {	// Pattern Pat anonymous_481
  dag PatternToMatch = (seteq CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(EQ CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_491";
}
def anonymous_491anonymous_482 {	// Pattern Pat anonymous_482
  dag PatternToMatch = (setne CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(NEQ CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_491";
}
def anonymous_492anonymous_483 {	// Pattern Pat anonymous_483
  dag PatternToMatch = (setlt CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(LT CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_492";
}
def anonymous_492anonymous_484 {	// Pattern Pat anonymous_484
  dag PatternToMatch = (setult CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(LTU CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_492";
}
def anonymous_493anonymous_485 {	// Pattern Pat anonymous_485
  dag PatternToMatch = (setle CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(LE CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_493";
}
def anonymous_493anonymous_486 {	// Pattern Pat anonymous_486
  dag PatternToMatch = (setule CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(LEU CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_493";
}
def anonymous_494anonymous_487 {	// Pattern Pat anonymous_487
  dag PatternToMatch = (setgt CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(GT CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_494";
}
def anonymous_494anonymous_488 {	// Pattern Pat anonymous_488
  dag PatternToMatch = (setugt CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(GTU CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_494";
}
def anonymous_495anonymous_489 {	// Pattern Pat anonymous_489
  dag PatternToMatch = (setge CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(GE CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_495";
}
def anonymous_495anonymous_490 {	// Pattern Pat anonymous_490
  dag PatternToMatch = (setuge CPURegs:$lhs, CPURegs:$rhs);
  list<dag> ResultInstrs = [(GEU CPURegs:$lhs, CPURegs:$rhs)];
  list<Predicate> Predicates = [];
  int AddedComplexity = 0;
  string NAME = "anonymous_495";
}
def anonymous_496 {	// CCAction CCAssignToReg
  list<Register> RegList = [V0, V1];
  string NAME = ?;
}
def anonymous_497 {	// CCAction CCPredicateAction CCIfType
  CCAction SubAction = anonymous_496;
  list<ValueType> VTs = [i32];
  string NAME = ?;
}
def anonymous_498 {	// CCAction CCAssignToReg
  list<Register> RegList = [VR0];
  string NAME = ?;
}
def anonymous_499 {	// CCAction CCPredicateAction CCIfType
  CCAction SubAction = anonymous_498;
  list<ValueType> VTs = [v16i8, v8i16, v4i32];
  string NAME = ?;
}
def anonymous_5 {	// IntrinsicProperty ReadOnly
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_50 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_500 {	// CCAction CCPromoteToType
  ValueType DestTy = i32;
  string NAME = ?;
}
def anonymous_501 {	// CCAction CCPredicateAction CCIfType
  CCAction SubAction = anonymous_500;
  list<ValueType> VTs = [i8, i16];
  string NAME = ?;
}
def anonymous_502 {	// CCAction CCAssignToRegWithShadow
  list<Register> RegList = [A0, A1, A2, A3, T0, T1];
  list<Register> ShadowRegList = [T2, T3, T4, T5, T6, T7];
  string NAME = ?;
}
def anonymous_503 {	// CCAction CCPredicateAction CCIfType
  CCAction SubAction = anonymous_502;
  list<ValueType> VTs = [i32];
  string NAME = ?;
}
def anonymous_504 {	// CCAction CCAssignToRegWithShadow
  list<Register> RegList = [VR2, VR3, VR4, VR5];
  list<Register> ShadowRegList = [VR6, VR7, VR8, VR9];
  string NAME = ?;
}
def anonymous_505 {	// CCAction CCPredicateAction CCIfType
  CCAction SubAction = anonymous_504;
  list<ValueType> VTs = [v16i8, v8i16, v4i32];
  string NAME = ?;
}
def anonymous_506 {	// CCAction CCAssignToStack
  int Size = 4;
  int Align = 4;
  string NAME = ?;
}
def anonymous_507 {	// CCAction CCPredicateAction CCIfType
  CCAction SubAction = anonymous_506;
  list<ValueType> VTs = [i32];
  string NAME = ?;
}
def anonymous_508 {	// CCAction CCAssignToStack
  int Size = 16;
  int Align = 16;
  string NAME = ?;
}
def anonymous_509 {	// CCAction CCPredicateAction CCIfType
  CCAction SubAction = anonymous_508;
  list<ValueType> VTs = [v16i8, v8i16, v4i32];
  string NAME = ?;
}
def anonymous_51 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_510 {	// CCAction CCDelegateTo
  CallingConv CC = RetCC_DSPCommon;
  string NAME = ?;
}
def anonymous_511 {	// Processor ProcessorModel Proc
  string Name = "dspse";
  SchedMachineModel SchedModel = DSPModel;
  ProcessorItineraries ProcItin = NoItineraries;
  list<SubtargetFeature> Features = [FeatureDSPSE, FeatureO32];
  string NAME = ?;
}
def anonymous_52 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_53 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_54 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_55 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_56 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_57 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_58 {	// IntrinsicProperty NoCapture
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_59 {	// IntrinsicProperty NoCapture
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_6 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_60 {	// IntrinsicProperty NoCapture
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_61 {	// IntrinsicProperty NoCapture
  int ArgNo = 2;
  string NAME = ?;
}
def anonymous_62 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_63 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_64 {	// LLVMType LLVMMatchType LLVMExtendedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_65 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_66 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_67 {	// LLVMType LLVMMatchType LLVMExtendedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_68 {	// LLVMType LLVMMatchType LLVMExtendedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_69 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_7 {	// IntrinsicProperty NoCapture
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_70 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_71 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_72 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_73 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_74 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_75 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_76 {	// LLVMType LLVMMatchType LLVMTruncatedType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_77 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 1;
  string NAME = ?;
}
def anonymous_78 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_79 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_8 {	// IntrinsicProperty ReadOnly
  int ArgNo = 1;
  string NAME = ?;
}
def anonymous_80 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_81 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_82 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_83 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_84 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_85 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_86 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_87 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_88 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_89 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_9 {	// IntrinsicProperty NoCapture
  int ArgNo = 0;
  string NAME = ?;
}
def anonymous_90 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_91 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_92 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_93 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_94 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_95 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_96 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_97 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_98 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anonymous_99 {	// LLVMType LLVMMatchType
  ValueType VT = OtherVT;
  int Number = 0;
  string NAME = ?;
}
def anyext {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ANY_EXTEND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntExtendOp;
  string NAME = ?;
}
def assertsext {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::AssertSext";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDT_assertext;
  string NAME = ?;
}
def assertzext {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::AssertZext";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDT_assertext;
  string NAME = ?;
}
def atomic_cmp_swap {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_CMP_SWAP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic3;
  string NAME = ?;
}
def atomic_cmp_swap_16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$cmp, node:$swap);
  dag Fragment = (atomic_cmp_swap node:$ptr, node:$cmp, node:$swap);
  string PredicateCode = "
  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def atomic_cmp_swap_32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$cmp, node:$swap);
  dag Fragment = (atomic_cmp_swap node:$ptr, node:$cmp, node:$swap);
  string PredicateCode = "
  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def atomic_cmp_swap_64 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$cmp, node:$swap);
  dag Fragment = (atomic_cmp_swap node:$ptr, node:$cmp, node:$swap);
  string PredicateCode = "
  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def atomic_cmp_swap_8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$cmp, node:$swap);
  dag Fragment = (atomic_cmp_swap node:$ptr, node:$cmp, node:$swap);
  string PredicateCode = "
  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def atomic_fence {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_FENCE";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPSideEffect];
  SDTypeProfile TypeProfile = SDTAtomicFence;
  string NAME = ?;
}
def atomic_load {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomicLoad;
  string NAME = ?;
}
def atomic_load_16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (atomic_load node:$ptr);
  string PredicateCode = "
  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def atomic_load_32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (atomic_load node:$ptr);
  string PredicateCode = "
  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def atomic_load_64 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (atomic_load node:$ptr);
  string PredicateCode = "
  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def atomic_load_8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (atomic_load node:$ptr);
  string PredicateCode = "
  return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def atomic_load_add {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_ADD";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_add_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_add node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_add";
}
def atomic_load_add_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_add node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_add";
}
def atomic_load_add_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_add node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_add";
}
def atomic_load_add_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_add node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_add";
}
def atomic_load_and {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_AND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_and_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_and node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_and";
}
def atomic_load_and_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_and node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_and";
}
def atomic_load_and_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_and node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_and";
}
def atomic_load_and_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_and node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_and";
}
def atomic_load_max {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_MAX";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_max_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_max node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_max";
}
def atomic_load_max_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_max node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_max";
}
def atomic_load_max_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_max node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_max";
}
def atomic_load_max_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_max node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_max";
}
def atomic_load_min {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_MIN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_min_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_min node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_min";
}
def atomic_load_min_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_min node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_min";
}
def atomic_load_min_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_min node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_min";
}
def atomic_load_min_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_min node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_min";
}
def atomic_load_nand {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_NAND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_nand_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_nand node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_nand";
}
def atomic_load_nand_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_nand node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_nand";
}
def atomic_load_nand_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_nand node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_nand";
}
def atomic_load_nand_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_nand node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_nand";
}
def atomic_load_or {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_OR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_or_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_or node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_or";
}
def atomic_load_or_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_or node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_or";
}
def atomic_load_or_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_or node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_or";
}
def atomic_load_or_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_or node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_or";
}
def atomic_load_sub {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_SUB";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_sub_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_sub node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_sub";
}
def atomic_load_sub_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_sub node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_sub";
}
def atomic_load_sub_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_sub node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_sub";
}
def atomic_load_sub_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_sub node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_sub";
}
def atomic_load_umax {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_UMAX";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_umax_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_umax node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_umax";
}
def atomic_load_umax_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_umax node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_umax";
}
def atomic_load_umax_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_umax node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_umax";
}
def atomic_load_umax_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_umax node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_umax";
}
def atomic_load_umin {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_UMIN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_umin_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_umin node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_umin";
}
def atomic_load_umin_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_umin node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_umin";
}
def atomic_load_umin_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_umin node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_umin";
}
def atomic_load_umin_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_umin node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_umin";
}
def atomic_load_xor {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_LOAD_XOR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_load_xor_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_xor node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_xor";
}
def atomic_load_xor_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_xor node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_xor";
}
def atomic_load_xor_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_xor node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_xor";
}
def atomic_load_xor_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_load_xor node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_load_xor";
}
def atomic_store {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_STORE";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomicStore;
  string NAME = ?;
}
def atomic_store_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_store node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_store";
}
def atomic_store_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_store node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_store";
}
def atomic_store_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_store node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_store";
}
def atomic_store_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_store node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_store";
}
def atomic_swap {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ATOMIC_SWAP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTAtomic2;
  string NAME = ?;
}
def atomic_swap_16 {	// SDPatternOperator PatFrag _16
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_swap node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i16;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_swap";
}
def atomic_swap_32 {	// SDPatternOperator PatFrag _32
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_swap node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i32;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_swap";
}
def atomic_swap_64 {	// SDPatternOperator PatFrag _64
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_swap node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i64;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_swap";
}
def atomic_swap_8 {	// SDPatternOperator PatFrag _8
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr, node:$val);
  dag Fragment = (atomic_swap node:$ptr, node:$val);
  string PredicateCode = "
    return cast<AtomicSDNode>(N)->getMemoryVT() == MVT::i8;
  ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = "atomic_swap";
}
def bb {	// SDPatternOperator SDNode
  string Opcode = "ISD::BasicBlock";
  string SDClass = "BasicBlockSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTOther;
  string NAME = ?;
}
def bitconvert {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::BITCAST";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTUnaryOp;
  string NAME = ?;
}
def blockaddress {	// SDPatternOperator SDNode
  string Opcode = "ISD::BlockAddress";
  string SDClass = "BlockAddressSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def br {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::BR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain];
  SDTypeProfile TypeProfile = SDTBr;
  string NAME = ?;
}
def brcond {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::BRCOND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain];
  SDTypeProfile TypeProfile = SDTBrcond;
  string NAME = ?;
}
def brind {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::BRIND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain];
  SDTypeProfile TypeProfile = SDTBrind;
  string NAME = ?;
}
def brtarget {	// DAGOperand Operand
  ValueType Type = OtherVT;
  string PrintMethod = "printOperand";
  string EncoderMethod = "getBranchTargetOpValue";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_PCREL";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def bswap {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::BSWAP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def build_vector {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::BUILD_VECTOR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = anonymous_404;
  string NAME = ?;
}
def callseq_end {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CALLSEQ_END";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPOptInGlue, SDNPOutGlue];
  SDTypeProfile TypeProfile = SDT_DSPCallSeqEnd;
  string NAME = ?;
}
def callseq_start {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CALLSEQ_START";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPOutGlue];
  SDTypeProfile TypeProfile = SDT_DSPCallSeqStart;
  string NAME = ?;
}
def calltarget {	// DAGOperand Operand
  ValueType Type = iPTR;
  string PrintMethod = "printOperand";
  string EncoderMethod = "getJumpTargetOpValue";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def concat_vectors {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CONCAT_VECTORS";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = anonymous_413;
  string NAME = ?;
}
def cond {	// SDPatternOperator SDNode
  string Opcode = "ISD::CONDCODE";
  string SDClass = "CondCodeSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTOther;
  string NAME = ?;
}
def constpool {	// SDPatternOperator SDNode
  string Opcode = "ISD::ConstantPool";
  string SDClass = "ConstantPoolSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def ctlz {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CTLZ";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def ctlz_zero_undef {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CTLZ_ZERO_UNDEF";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def ctpop {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CTPOP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def cttz {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CTTZ";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def cttz_zero_undef {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CTTZ_ZERO_UNDEF";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntUnaryOp;
  string NAME = ?;
}
def cvt {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::CONVERT_RNDSAT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTConvertOp;
  string NAME = ?;
}
def cvtff {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_FF;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def cvtfs {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_FS;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def cvtfu {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_FU;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def cvtsf {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_SF;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def cvtss {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_SS;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def cvtsu {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_SU;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def cvtuf {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_UF;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def cvtus {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_US;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def cvtuu {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  dag Fragment = (cvt node:$val, node:$dty, node:$sty, node:$rd, node:$sat);
  string PredicateCode = "
       return cast<CvtRndSatSDNode>(N)->getCvtCode() == ISD::CVT_UU;
    ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def debugtrap {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::DEBUGTRAP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPSideEffect];
  SDTypeProfile TypeProfile = SDTNone;
  string NAME = ?;
}
def decimate {
  string NAME = ?;
}
def defaultOp {	// OpFormat
  bits<3> Value = { 1, 1, 1 };
  string NAME = ?;
}
def externalsym {	// SDPatternOperator SDNode
  string Opcode = "ISD::ExternalSymbol";
  string SDClass = "ExternalSymbolSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def extload {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (unindexedload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getExtensionType() == ISD::EXTLOAD;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadf32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::f32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadf64 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::f64;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadi1 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i1;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadi16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadi32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadi8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadvf32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::f32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadvf64 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::f64;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadvi1 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i1;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadvi16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadvi32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extloadvi8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (extload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def extract_subvector {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::EXTRACT_SUBVECTOR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTSubVecExtract;
  string NAME = ?;
}
def extractelt {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::EXTRACT_VECTOR_ELT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTVecExtract;
  string NAME = ?;
}
def f128 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 11;
  string NAME = ?;
}
def f16 {	// ValueType
  string Namespace = "MVT";
  int Size = 16;
  int Value = 7;
  string NAME = ?;
}
def f16_to_fp {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FP16_TO_FP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntToFPOp;
  string NAME = ?;
}
def f32 {	// ValueType
  string Namespace = "MVT";
  int Size = 32;
  int Value = 8;
  string NAME = ?;
}
def f32imm {	// DAGOperand Operand
  ValueType Type = f32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_IMMEDIATE";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def f64 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 9;
  string NAME = ?;
}
def f64imm {	// DAGOperand Operand
  ValueType Type = f64;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_IMMEDIATE";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def f80 {	// ValueType
  string Namespace = "MVT";
  int Size = 80;
  int Value = 10;
  string NAME = ?;
}
def fAny {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 253;
  string NAME = ?;
}
def fabs {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FABS";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fadd {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FADD";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTFPBinOp;
  string NAME = ?;
}
def fceil {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FCEIL";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fcopysign {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FCOPYSIGN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPSignOp;
  string NAME = ?;
}
def fcos {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FCOS";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fdiv {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FDIV";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPBinOp;
  string NAME = ?;
}
def fexp2 {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FEXP2";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fextend {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FP_EXTEND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPExtendOp;
  string NAME = ?;
}
def ffloor {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FFLOOR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fgetsign {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FGETSIGN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPToIntOp;
  string NAME = ?;
}
def flog2 {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FLOG2";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fma {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FMA";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPTernaryOp;
  string NAME = ?;
}
def fmul {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FMUL";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTFPBinOp;
  string NAME = ?;
}
def fnearbyint {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FNEARBYINT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fneg {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FNEG";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fp_to_f16 {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FP_TO_FP16";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPToIntOp;
  string NAME = ?;
}
def fp_to_sint {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FP_TO_SINT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPToIntOp;
  string NAME = ?;
}
def fp_to_uint {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FP_TO_UINT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPToIntOp;
  string NAME = ?;
}
def fpimm {	// SDPatternOperator SDNode
  string Opcode = "ISD::ConstantFP";
  string SDClass = "ConstantFPSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPLeaf;
  string NAME = ?;
}
def fpow {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FPOW";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPBinOp;
  string NAME = ?;
}
def frameindex {	// SDPatternOperator SDNode
  string Opcode = "ISD::FrameIndex";
  string SDClass = "FrameIndexSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def frem {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FREM";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPBinOp;
  string NAME = ?;
}
def frint {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FRINT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def frnd {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FROUND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fround {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FP_ROUND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPRoundOp;
  string NAME = ?;
}
def fsin {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FSIN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fsqrt {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FSQRT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def fsub {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FSUB";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPBinOp;
  string NAME = ?;
}
def ftrunc {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::FTRUNC";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTFPUnaryOp;
  string NAME = ?;
}
def globaladdr {	// SDPatternOperator SDNode
  string Opcode = "ISD::GlobalAddress";
  string SDClass = "GlobalAddressSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def globaltlsaddr {	// SDPatternOperator SDNode
  string Opcode = "ISD::GlobalTLSAddress";
  string SDClass = "GlobalAddressSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def i1 {	// ValueType
  string Namespace = "MVT";
  int Size = 1;
  int Value = 1;
  string NAME = ?;
}
def i128 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 6;
  string NAME = ?;
}
def i16 {	// ValueType
  string Namespace = "MVT";
  int Size = 16;
  int Value = 3;
  string NAME = ?;
}
def i16imm {	// DAGOperand Operand
  ValueType Type = i16;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_IMMEDIATE";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def i1imm {	// DAGOperand Operand
  ValueType Type = i1;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_IMMEDIATE";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def i32 {	// ValueType
  string Namespace = "MVT";
  int Size = 32;
  int Value = 4;
  string NAME = ?;
}
def i32imm {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_IMMEDIATE";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def i64 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 5;
  string NAME = ?;
}
def i64imm {	// DAGOperand Operand
  ValueType Type = i64;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_IMMEDIATE";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def i8 {	// ValueType
  string Namespace = "MVT";
  int Size = 8;
  int Value = 2;
  string NAME = ?;
}
def i8imm {	// DAGOperand Operand
  ValueType Type = i8;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_IMMEDIATE";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def iAny {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 254;
  string NAME = ?;
}
def iPTR {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 255;
  string NAME = ?;
}
def iPTRAny {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 251;
  string NAME = ?;
}
def imm {	// SDPatternOperator SDNode
  string Opcode = "ISD::Constant";
  string SDClass = "ConstantSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntLeaf;
  string NAME = ?;
}
def immAllOnesV {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (build_vector);
  string PredicateCode = "
  return ISD::isBuildVectorAllOnes(N);
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immAllZerosV {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (build_vector);
  string PredicateCode = "
  return ISD::isBuildVectorAllZeros(N);
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immLow16Zero {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = "
int64_t Val = N->getSExtValue();
return isInt<32>(Val) && !(Val & 0xffff);
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immSExt10 {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = " return isInt<10>(N->getSExtValue()); ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immSExt11 {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = " return isInt<11>(N->getSExtValue()); ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immSExt16 {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = " return isInt<16>(N->getSExtValue()); ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immSExt16Plus1 {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = "
  return isInt<17>(N->getSExtValue()) && isInt<16>(N->getSExtValue() + 1);
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immSExt32 {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = "return isInt<32>(N->getSExtValue());";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immSExt5 {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = " return isInt<5>(N->getSExtValue()); ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immSExt9 {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = " return isInt<9>(N->getSExtValue()); ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immSExt9Plus1 {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = "
  return isInt<10>(N->getSExtValue()) && isInt<10>(N->getSExtValue() + 1);
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def immZExt16 {	// SDPatternOperator PatFrag PatLeaf
  dag Operands = (ops);
  dag Fragment = (imm);
  string PredicateCode = "
if (N->getValueType(0) == MVT::i32)
return (uint32_t)N->getZExtValue() == (unsigned short)N->getZExtValue();
else
return (uint64_t)N->getZExtValue() == (unsigned short)N->getZExtValue();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = LO16;
  string NAME = ?;
}
def immZExt5 {	// SDPatternOperator PatFrag ImmLeaf
  SDNodeXForm ImmLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (i32 imm);
  string PredicateCode = "";
  string ImmediateCode = "return Imm == (Imm & 0x1f);";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  bit FastIselShouldIgnore = 0;
  string NAME = ?;
}
def immZExt8 {	// SDPatternOperator PatFrag ImmLeaf
  SDNodeXForm ImmLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (i32 imm);
  string PredicateCode = "";
  string ImmediateCode = "return isUInt<8>(Imm);";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  bit FastIselShouldIgnore = 0;
  string NAME = ?;
}
def implicit {
  string NAME = ?;
}
def ineg {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$in);
  dag Fragment = (sub 0, node:$in);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def ins {
  string NAME = ?;
}
def insert_subvector {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::INSERT_SUBVECTOR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTSubVecInsert;
  string NAME = ?;
}
def insertelt {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::INSERT_VECTOR_ELT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTVecInsert;
  string NAME = ?;
}
def instregex {
  string NAME = ?;
}
def instrs {
  string NAME = ?;
}
def int_AMDGPU_div_fixup {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_amdgpu_div_fixup";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "AMDGPU";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_289, anonymous_290, anonymous_291];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_AMDGPU_div_fmas {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_amdgpu_div_fmas";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "AMDGPU";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_286, anonymous_287, anonymous_288];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_AMDGPU_div_scale {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_amdgpu_div_scale";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "AMDGPU";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty, llvm_i1_ty];
  list<LLVMType> ParamTypes = [anonymous_284, anonymous_285, llvm_i1_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_AMDGPU_rcp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_amdgpu_rcp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "AMDGPU";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_293];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_AMDGPU_rsq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_amdgpu_rsq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "AMDGPU";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_294];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_AMDGPU_rsq_clamped {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_amdgpu_rsq_clamped";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "AMDGPU";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_295];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_AMDGPU_trig_preop {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_amdgpu_trig_preop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "AMDGPU";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_292, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_clrex {	// SDPatternOperator Intrinsic
  list<LLVMType> Intrinsic:param_types = [];
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crc32b {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crc32cb {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crc32ch {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crc32cw {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crc32cx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crc32h {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crc32w {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crc32x {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_aesd {	// SDPatternOperator Intrinsic Crypto_AES_DataKey_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_aese {	// SDPatternOperator Intrinsic Crypto_AES_DataKey_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_aesimc {	// SDPatternOperator Intrinsic Crypto_AES_Data_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_aesmc {	// SDPatternOperator Intrinsic Crypto_AES_Data_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha1c {	// SDPatternOperator Intrinsic Crypto_SHA_5Hash4Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha1h {	// SDPatternOperator Intrinsic Crypto_SHA_1Hash_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha1m {	// SDPatternOperator Intrinsic Crypto_SHA_5Hash4Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha1p {	// SDPatternOperator Intrinsic Crypto_SHA_5Hash4Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha1su0 {	// SDPatternOperator Intrinsic Crypto_SHA_12Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha1su1 {	// SDPatternOperator Intrinsic Crypto_SHA_8Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha256h {	// SDPatternOperator Intrinsic Crypto_SHA_8Hash4Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha256h2 {	// SDPatternOperator Intrinsic Crypto_SHA_8Hash4Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha256su0 {	// SDPatternOperator Intrinsic Crypto_SHA_8Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_crypto_sha256su1 {	// SDPatternOperator Intrinsic Crypto_SHA_12Schedule_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_dmb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_dmb";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_dsb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_dsb";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_hint {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_isb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_isb";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_ldaxp {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_ldaxr {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_ldxp {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_ldxr {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_abs {	// SDPatternOperator Intrinsic AdvSIMD_1IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_123];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_addhn {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_140, anonymous_141];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_addp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_cls {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_125];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fabd {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_facge {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_FloatCompare_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, anonymous_135];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_facgt {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_FloatCompare_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, anonymous_135];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_faddv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Float_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtas {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtau {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtms {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtmu {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtns {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtnu {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtps {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtpu {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtxn {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Expand_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtzs {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fcvtzu {	// SDPatternOperator Intrinsic AdvSIMD_FPToIntRounding_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fmax {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fmaxnm {	// SDPatternOperator Intrinsic AdvSIMD_2FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_130, anonymous_131];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fmaxnmp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fmaxnmv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Float_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fmaxp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fmaxv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Float_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fmin {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fminnm {	// SDPatternOperator Intrinsic AdvSIMD_2FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_130, anonymous_131];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fminnmp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fminnmv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Float_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fminp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fminv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Float_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_fmulx {	// SDPatternOperator Intrinsic AdvSIMD_2FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_130, anonymous_131];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_frecpe {	// SDPatternOperator Intrinsic AdvSIMD_1FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_124];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_frecps {	// SDPatternOperator Intrinsic AdvSIMD_2FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_130, anonymous_131];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_frecpx {	// SDPatternOperator Intrinsic AdvSIMD_1FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_124];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_frintn {	// SDPatternOperator Intrinsic AdvSIMD_1FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_124];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_frsqrte {	// SDPatternOperator Intrinsic AdvSIMD_1FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_124];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_frsqrts {	// SDPatternOperator Intrinsic AdvSIMD_2FloatArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_130, anonymous_131];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld1x2 {	// SDPatternOperator Intrinsic AdvSIMD_2Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_158];
  list<LLVMType> ParamTypes = [anonymous_160];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld1x3 {	// SDPatternOperator Intrinsic AdvSIMD_3Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_170, anonymous_171];
  list<LLVMType> ParamTypes = [anonymous_173];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld1x4 {	// SDPatternOperator Intrinsic AdvSIMD_4Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_187, anonymous_188, anonymous_189];
  list<LLVMType> ParamTypes = [anonymous_191];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld2 {	// SDPatternOperator Intrinsic AdvSIMD_2Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_158];
  list<LLVMType> ParamTypes = [anonymous_160];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld2lane {	// SDPatternOperator Intrinsic AdvSIMD_2Vec_Load_Lane_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_161];
  list<LLVMType> ParamTypes = [anonymous_162, anonymous_163, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld2r {	// SDPatternOperator Intrinsic AdvSIMD_2Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_158];
  list<LLVMType> ParamTypes = [anonymous_160];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld3 {	// SDPatternOperator Intrinsic AdvSIMD_3Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_170, anonymous_171];
  list<LLVMType> ParamTypes = [anonymous_173];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld3lane {	// SDPatternOperator Intrinsic AdvSIMD_3Vec_Load_Lane_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_174, anonymous_175];
  list<LLVMType> ParamTypes = [anonymous_176, anonymous_177, anonymous_178, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld3r {	// SDPatternOperator Intrinsic AdvSIMD_3Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_170, anonymous_171];
  list<LLVMType> ParamTypes = [anonymous_173];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld4 {	// SDPatternOperator Intrinsic AdvSIMD_4Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_187, anonymous_188, anonymous_189];
  list<LLVMType> ParamTypes = [anonymous_191];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld4lane {	// SDPatternOperator Intrinsic AdvSIMD_4Vec_Load_Lane_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_192, anonymous_193, anonymous_194];
  list<LLVMType> ParamTypes = [anonymous_195, anonymous_196, anonymous_197, anonymous_198, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ld4r {	// SDPatternOperator Intrinsic AdvSIMD_4Vec_Load_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_187, anonymous_188, anonymous_189];
  list<LLVMType> ParamTypes = [anonymous_191];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_pmul {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_pmull {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Long_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_136, anonymous_137];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_pmull64 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_raddhn {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_140, anonymous_141];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_rbit {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_125];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_rshrn {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_Scalar_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_142, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_rsubhn {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_140, anonymous_141];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sabd {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_saddlp {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Expand_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_saddlv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Int_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_saddv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Int_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_scalar_sqxtn {	// SDPatternOperator Intrinsic AdvSIMD_1IntArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_scalar_sqxtun {	// SDPatternOperator Intrinsic AdvSIMD_1IntArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_scalar_uqxtn {	// SDPatternOperator Intrinsic AdvSIMD_1IntArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_shadd {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_shll {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Scalar_Wide_BySize_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_143];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_shsub {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_smax {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_smaxp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_smaxv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Int_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_smin {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sminp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sminv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Int_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_smull {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Long_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_136, anonymous_137];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqabs {	// SDPatternOperator Intrinsic AdvSIMD_1IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_123];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqadd {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqdmulh {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqdmull {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Long_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_136, anonymous_137];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqdmulls_scalar {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqneg {	// SDPatternOperator Intrinsic AdvSIMD_1IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_123];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqrdmulh {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqrshl {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqrshrn {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_Scalar_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_142, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqrshrun {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_Scalar_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_142, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqshl {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqshlu {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqshrn {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_Scalar_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_142, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqshrun {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_Scalar_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_142, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqsub {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqxtn {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_127];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sqxtun {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_127];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_srhadd {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_srshl {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sshl {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_sshll {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Scalar_Wide_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_144, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st1x2 {	// SDPatternOperator Intrinsic AdvSIMD_2Vec_Store_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_164, anonymous_166];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_167];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st1x3 {	// SDPatternOperator Intrinsic AdvSIMD_3Vec_Store_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_179, anonymous_180, anonymous_182];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_183];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st1x4 {	// SDPatternOperator Intrinsic AdvSIMD_4Vec_Store_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_199, anonymous_200, anonymous_201, anonymous_203];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_204];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st2 {	// SDPatternOperator Intrinsic AdvSIMD_2Vec_Store_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_164, anonymous_166];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_167];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st2lane {	// SDPatternOperator Intrinsic AdvSIMD_2Vec_Store_Lane_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_168, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_169];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st3 {	// SDPatternOperator Intrinsic AdvSIMD_3Vec_Store_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_179, anonymous_180, anonymous_182];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_183];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st3lane {	// SDPatternOperator Intrinsic AdvSIMD_3Vec_Store_Lane_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_184, anonymous_185, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_186];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st4 {	// SDPatternOperator Intrinsic AdvSIMD_4Vec_Store_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_199, anonymous_200, anonymous_201, anonymous_203];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_204];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_st4lane {	// SDPatternOperator Intrinsic AdvSIMD_4Vec_Store_Lane_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_205, anonymous_206, anonymous_207, llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_208];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_subhn {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_140, anonymous_141];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_suqadd {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_tbl1 {	// SDPatternOperator Intrinsic AdvSIMD_Tbl1_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, anonymous_209];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_tbl2 {	// SDPatternOperator Intrinsic AdvSIMD_Tbl2_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, anonymous_210];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_tbl3 {	// SDPatternOperator Intrinsic AdvSIMD_Tbl3_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_211];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_tbl4 {	// SDPatternOperator Intrinsic AdvSIMD_Tbl4_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_212];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_tbx1 {	// SDPatternOperator Intrinsic AdvSIMD_Tbx1_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_213, llvm_v16i8_ty, anonymous_214];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_tbx2 {	// SDPatternOperator Intrinsic AdvSIMD_Tbx2_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_215, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_216];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_tbx3 {	// SDPatternOperator Intrinsic AdvSIMD_Tbx3_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_217, llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_218];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_tbx4 {	// SDPatternOperator Intrinsic AdvSIMD_Tbx4_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_219, llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty, anonymous_220];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uabd {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uaddlp {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Expand_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uaddlv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Int_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uaddv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Int_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uhadd {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uhsub {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_umax {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_umaxp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_umaxv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Int_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_umin {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uminp {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uminv {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Int_Across_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_umull {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Long_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_136, anonymous_137];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uqadd {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uqrshl {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uqrshrn {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_Scalar_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_142, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uqshl {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uqshrn {	// SDPatternOperator Intrinsic AdvSIMD_2Arg_Scalar_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_142, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uqsub {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_uqxtn {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_127];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_urecpe {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_125];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_urhadd {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_132, anonymous_133];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_urshl {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ursqrte {	// SDPatternOperator Intrinsic AdvSIMD_1VectorArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_125];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ushl {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_ushll {	// SDPatternOperator Intrinsic AdvSIMD_2VectorArg_Scalar_Wide_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_144, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_usqadd {	// SDPatternOperator Intrinsic AdvSIMD_2IntArg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_128, anonymous_129];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vcopy_lane {	// SDPatternOperator Intrinsic AdvSIMD_2Vector2Index_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, llvm_i64_ty, anonymous_154, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vcvtfp2fxs {	// SDPatternOperator Intrinsic AdvSIMD_CvtFPToFx_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vcvtfp2fxu {	// SDPatternOperator Intrinsic AdvSIMD_CvtFPToFx_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vcvtfp2hf {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vcvtfxs2fp {	// SDPatternOperator Intrinsic AdvSIMD_CvtFxToFP_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vcvtfxu2fp {	// SDPatternOperator Intrinsic AdvSIMD_CvtFxToFP_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vcvthf2fp {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vsli {	// SDPatternOperator Intrinsic AdvSIMD_3VectorArg_Scalar_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_149, anonymous_150, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_neon_vsri {	// SDPatternOperator Intrinsic AdvSIMD_3VectorArg_Scalar_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_149, anonymous_150, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_rbit {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_120];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_sdiv {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_116, anonymous_117];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_sisd_fabd {	// SDPatternOperator Intrinsic AdvSIMD_2Scalar_Float_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_121, anonymous_122];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_sisd_fcvtxn {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_stlxp {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_stlxr {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_stxp {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_stxr {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_aarch64_udiv {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "aarch64";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_118, anonymous_119];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_adjust_trampoline {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_adjust_trampoline";
  string NAME = ?;
}
def int_annotation {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.annotation";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_44, llvm_ptr_ty, llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_cdp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_cdp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_cdp2 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_cdp2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_clrex {	// SDPatternOperator Intrinsic
  list<LLVMType> Intrinsic:param_types = [];
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_crc32b {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_crc32cb {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_crc32ch {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_crc32cw {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_crc32h {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_crc32w {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_dmb {	// GCCBuiltin MSBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_dmb";
  string MSBuiltinName = "__dmb";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_dsb {	// GCCBuiltin MSBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_dsb";
  string MSBuiltinName = "__dsb";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_get_fpscr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_get_fpscr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_hint {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_isb {	// GCCBuiltin MSBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_isb";
  string MSBuiltinName = "__isb";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_ldaex {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_ldaexd {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_ldrex {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_ldrexd {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_mcr {	// GCCBuiltin MSBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_mcr";
  string MSBuiltinName = "_MoveToCoprocessor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_mcr2 {	// GCCBuiltin MSBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_mcr2";
  string MSBuiltinName = "_MoveToCoprocessor2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_mcrr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_mcrr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_mcrr2 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_mcrr2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_mrc {	// GCCBuiltin MSBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_mrc";
  string MSBuiltinName = "_MoveFromCoprocessor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_mrc2 {	// GCCBuiltin MSBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_mrc2";
  string MSBuiltinName = "_MoveFromCoprocessor2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_aesd {	// SDPatternOperator Intrinsic AES_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_aese {	// SDPatternOperator Intrinsic AES_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_aesimc {	// SDPatternOperator Intrinsic AES_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_aesmc {	// SDPatternOperator Intrinsic AES_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha1c {	// SDPatternOperator Intrinsic SHA_3Arg_i32_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha1h {	// SDPatternOperator Intrinsic SHA_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha1m {	// SDPatternOperator Intrinsic SHA_3Arg_i32_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha1p {	// SDPatternOperator Intrinsic SHA_3Arg_i32_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha1su0 {	// SDPatternOperator Intrinsic SHA_3Arg_v4i32_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha1su1 {	// SDPatternOperator Intrinsic SHA_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha256h {	// SDPatternOperator Intrinsic SHA_3Arg_v4i32_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha256h2 {	// SDPatternOperator Intrinsic SHA_3Arg_v4i32_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha256su0 {	// SDPatternOperator Intrinsic SHA_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_sha256su1 {	// SDPatternOperator Intrinsic SHA_3Arg_v4i32_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vabds {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vabdu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vabs {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vacge {	// SDPatternOperator Intrinsic Neon_Compare_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_77];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vacgt {	// SDPatternOperator Intrinsic Neon_Compare_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty, anonymous_77];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vbsl {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_113, anonymous_114, anonymous_115];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcls {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vclz {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcnt {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtas {	// SDPatternOperator Intrinsic Neon_CvtFPtoInt_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtau {	// SDPatternOperator Intrinsic Neon_CvtFPtoInt_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtfp2fxs {	// SDPatternOperator Intrinsic Neon_CvtFPToFx_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtfp2fxu {	// SDPatternOperator Intrinsic Neon_CvtFPToFx_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtfp2hf {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtfxs2fp {	// SDPatternOperator Intrinsic Neon_CvtFxToFP_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtfxu2fp {	// SDPatternOperator Intrinsic Neon_CvtFxToFP_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvthf2fp {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtms {	// SDPatternOperator Intrinsic Neon_CvtFPtoInt_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtmu {	// SDPatternOperator Intrinsic Neon_CvtFPtoInt_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtns {	// SDPatternOperator Intrinsic Neon_CvtFPtoInt_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtnu {	// SDPatternOperator Intrinsic Neon_CvtFPtoInt_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtps {	// SDPatternOperator Intrinsic Neon_CvtFPtoInt_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vcvtpu {	// SDPatternOperator Intrinsic Neon_CvtFPtoInt_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vhadds {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vhaddu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vhsubs {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vhsubu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vld1 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vld2 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_80];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vld2lane {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_86];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, anonymous_87, anonymous_88, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vld3 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_81, anonymous_82];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vld3lane {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_89, anonymous_90];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, anonymous_91, anonymous_92, anonymous_93, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vld4 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_83, anonymous_84, anonymous_85];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vld4lane {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty, anonymous_94, anonymous_95, anonymous_96];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, anonymous_97, anonymous_98, anonymous_99, anonymous_100, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vmaxnm {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vmaxs {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vmaxu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vminnm {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vmins {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vminu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vmullp {	// SDPatternOperator Intrinsic Neon_2Arg_Long_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_69, anonymous_70];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vmulls {	// SDPatternOperator Intrinsic Neon_2Arg_Long_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_69, anonymous_70];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vmullu {	// SDPatternOperator Intrinsic Neon_2Arg_Long_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_69, anonymous_70];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vmulp {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpadals {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_78, llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpadalu {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_79, llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpadd {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpaddls {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpaddlu {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [llvm_anyvector_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpmaxs {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpmaxu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpmins {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vpminu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqabs {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqadds {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqaddu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqdmulh {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqdmull {	// SDPatternOperator Intrinsic Neon_2Arg_Long_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_69, anonymous_70];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqmovns {	// SDPatternOperator Intrinsic Neon_1Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_64];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqmovnsu {	// SDPatternOperator Intrinsic Neon_1Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_64];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqmovnu {	// SDPatternOperator Intrinsic Neon_1Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_64];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqneg {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqrdmulh {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqrshiftns {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqrshiftnsu {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqrshiftnu {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqrshifts {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqrshiftu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqshiftns {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqshiftnsu {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqshiftnu {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqshifts {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqshiftsu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqshiftu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqsubs {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vqsubu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vraddhn {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrecpe {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrecps {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrhadds {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrhaddu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrinta {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrintm {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrintn {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrintp {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrintx {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrintz {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrshiftn {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrshifts {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrshiftu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrsqrte {	// SDPatternOperator Intrinsic Neon_1Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_63];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrsqrts {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vrsubhn {	// SDPatternOperator Intrinsic Neon_2Arg_Narrow_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_67, anonymous_68];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vshiftins {	// SDPatternOperator Intrinsic Neon_3Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_71, anonymous_72, anonymous_73];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vshifts {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vshiftu {	// SDPatternOperator Intrinsic Neon_2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_anyvector_ty];
  list<LLVMType> ParamTypes = [anonymous_65, anonymous_66];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vst1 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_anyvector_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vst2 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_anyvector_ty, anonymous_101, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vst2lane {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_anyvector_ty, anonymous_107, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vst3 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_anyvector_ty, anonymous_102, anonymous_103, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vst3lane {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_anyvector_ty, anonymous_108, anonymous_109, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vst4 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_anyvector_ty, anonymous_104, anonymous_105, anonymous_106, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vst4lane {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_anyvector_ty, anonymous_110, anonymous_111, anonymous_112, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vtbl1 {	// SDPatternOperator Intrinsic Neon_Tbl2Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vtbl2 {	// SDPatternOperator Intrinsic Neon_Tbl3Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vtbl3 {	// SDPatternOperator Intrinsic Neon_Tbl4Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vtbl4 {	// SDPatternOperator Intrinsic Neon_Tbl5Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vtbx1 {	// SDPatternOperator Intrinsic Neon_Tbl3Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vtbx2 {	// SDPatternOperator Intrinsic Neon_Tbl4Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vtbx3 {	// SDPatternOperator Intrinsic Neon_Tbl5Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_neon_vtbx4 {	// SDPatternOperator Intrinsic Neon_Tbl6Arg_Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_v8i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty, llvm_v8i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_qadd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_qadd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_qsub {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_qsub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_rbit {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_set_fpscr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_set_fpscr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_ssat {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_ssat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_stlex {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_stlexd {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_strex {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_strexd {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_thread_pointer {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_thread_pointer";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_undefined {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_usat {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_arm_usat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_vcvtr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_arm_vcvtru {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "arm";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_bswap {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_38];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ceil {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_31];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_clear_cache {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.clear_cache";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convert_from_fp16 {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convert_to_fp16 {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertff {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertfsi {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertfui {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertsif {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertss {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertsu {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertuif {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyfloat_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertus {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_convertuu {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyint_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_copysign {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_28, anonymous_29];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_cos {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_19];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ctlz {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_40, llvm_i1_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ctpop {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_39];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_cttz {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_41, llvm_i1_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_cuda_syncthreads {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__syncthreads";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoDuplicate];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dbg_declare {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_metadata_ty, llvm_metadata_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dbg_value {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_metadata_ty, llvm_i64_ty, llvm_metadata_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_debugtrap {	// SDPatternOperator Intrinsic GCCBuiltin
  list<LLVMType> Intrinsic:param_types = [];
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_debugtrap";
  string NAME = ?;
}
def int_donothing {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_abs_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_abs_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_bclr_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_bclr_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_bfext_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_bfext_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_bfextu_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_bfextu_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_bfst_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_bfst_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_bst_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_bst_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_cbw_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_cbw_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_chw_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_chw_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loado_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loado_16";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loado_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loado_32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loadu_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loadu_16";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loadu_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loadu_32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loadu_8 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loadu_8";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loaduvh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loaduvh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loaduvl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loaduvl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loadvh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loadvh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_loadvl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_loadvl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_max {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_max";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_min {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_min";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeo_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeo_16";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeo_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeo_32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeu_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeu_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeu_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeu_16";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeu_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeu_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeu_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeu_32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeu_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeu_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeu_8 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeu_8";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeuvh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeuvh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storeuvl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storeuvl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storevh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storevh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_storevl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_storevl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_test_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_test_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_testi_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_testi_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vabs_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vabs_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vabs_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vabs_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vabs_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vabs_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vadd_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vadd_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vadd_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vadd_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vadd_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vadd_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vcmac_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vcmac_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vcmac_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vcmac_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vcmul_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vcmul_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vcmuli_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vcmuli_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vcmulr_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vcmulr_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_veq_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_veq_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_veq_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_veq_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_veq_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_veq_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vfmac_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vfmac_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vfmac_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vfmac_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vfmac_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vfmac_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vfmul_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vfmul_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vfmul_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vfmul_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vfmul_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vfmul_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vge_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vge_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vge_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vge_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vge_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vge_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vgt_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vgt_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vgt_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vgt_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vgt_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vgt_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vle_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vle_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vle_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vle_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vle_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vle_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloado_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloado_16";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloado_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloado_32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloado_8 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloado_8";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadr_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadr_16";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadr_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadr_32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadr_8 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadr_8";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadu_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadu_16";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadu_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadu_32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadu_8 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadu_8";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadur_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadur_16";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadur_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadur_32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vloadur_8 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vloadur_8";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vlt_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vlt_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vlt_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vlt_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vlt_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vlt_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vmax_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vmax_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vmax_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vmax_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vmax_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vmax_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vmin_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vmin_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vmin_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vmin_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vmin_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vmin_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsl_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsl_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsl_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsl_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsl_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsl_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsls_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsls_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsls_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsls_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsls_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsls_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsra_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsra_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsra_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsra_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsra_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsra_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsrl_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsrl_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsrl_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsrl_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsrl_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsrl_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vstoreo_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vstoreo_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vstoreo_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vstoreo_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vstoreo_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vstoreo_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vstoreu_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vstoreu_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vstoreu_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vstoreu_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vstoreu_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vstoreu_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsub_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsub_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsub_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsub_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsub_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsub_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsum_10 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsum_10";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsum_20 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsum_20";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_dsp_vsum_40 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_dsp_vsum_40";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "dsp";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_dwarf_cfa {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_return_i32 {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_return_i64 {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_sjlj_callsite {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_sjlj_functioncontext {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_sjlj_longjmp {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoReturn];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_sjlj_lsda {	// SDPatternOperator Intrinsic
  list<LLVMType> Intrinsic:param_types = [];
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_sjlj_setjmp {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_typeid_for {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_eh_unwind_init {	// SDPatternOperator Intrinsic GCCBuiltin
  list<LLVMType> Intrinsic:param_types = [];
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_unwind_init";
  string NAME = ?;
}
def int_exp {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_25];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_exp2 {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_26];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_expect {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_36, anonymous_37];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_experimental_patchpoint_i64 {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_ptr_ty, llvm_i32_ty, llvm_vararg_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_experimental_patchpoint_void {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_ptr_ty, llvm_i32_ty, llvm_vararg_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_experimental_stackmap {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_vararg_ty];
  list<IntrinsicProperty> Properties = [Throws];
  bit isTarget = 0;
  string NAME = ?;
}
def int_fabs {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_27];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_floor {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_30];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_flt_rounds {	// SDPatternOperator Intrinsic GCCBuiltin
  list<LLVMType> Intrinsic:param_types = [];
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_flt_rounds";
  string NAME = ?;
}
def int_fma {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_10, anonymous_11, anonymous_12];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_fmuladd {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_13, anonymous_14, anonymous_15];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_frameaddress {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_gcread {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptrptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_gcroot {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptrptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_gcwrite {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptr_ty, llvm_ptrptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_0, anonymous_1];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_abs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_abs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_absp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_absp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_abssat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_abssat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_add {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_add";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_h16_hh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_h16_hh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_h16_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_h16_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_h16_lh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_h16_lh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_h16_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_h16_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_h16_sat_hh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_h16_sat_hh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_h16_sat_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_h16_sat_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_h16_sat_lh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_h16_sat_lh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_h16_sat_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_h16_sat_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_l16_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_l16_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_l16_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_l16_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_l16_sat_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_l16_sat_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addh_l16_sat_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addh_l16_sat_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addpsat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addpsat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addsat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addsat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_addsp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sidi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_addsp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_andir {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_andir";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_andp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_andp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_aslh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_aslh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_asrh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_asrh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_combine_hh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_combine_hh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_combine_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_combine_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_combine_lh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_combine_lh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_combine_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_combine_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_combineii {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_combineii";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_combinew {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_combinew";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_max {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_max";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_maxp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_maxp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_maxu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_maxu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_maxup {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_maxup";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_min {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_min";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_minp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_minp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_minu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_minu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_minup {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_minup";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_neg {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_neg";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_negp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_negp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_negsat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_negsat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_not {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_not";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_notp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_notp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_orir {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_orir";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_orp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_orp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_roundsat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_roundsat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_satb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_satb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_sath {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_sath";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_satub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_satub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_satuh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_satuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_sub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_sub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_h16_hh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_h16_hh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_h16_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_h16_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_h16_lh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_h16_lh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_h16_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_h16_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_h16_sat_hh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_h16_sat_hh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_h16_sat_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_h16_sat_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_h16_sat_lh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_h16_sat_lh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_h16_sat_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_h16_sat_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_l16_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_l16_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_l16_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_l16_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_l16_sat_hl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_l16_sat_hl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subh_l16_sat_ll {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subh_l16_sat_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_subsat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_subsat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svaddh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svaddh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svaddhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svaddhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svadduhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svadduhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svavgh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svavgh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svavghs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svavghs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svnavgh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svnavgh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svsubh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svsubh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svsubhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svsubhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_svsubuhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_svsubuhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_swiz {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_swiz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_sxtb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_sxtb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_sxth {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_sxth";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_sxtw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_sxtw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_tfr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_tfr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_tfrih {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_tfrih";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_tfril {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_tfril";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_tfrp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_tfrp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_tfrpi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_tfrpi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_tfrsi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_tfrsi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vabsh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vabsh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vabshsat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vabshsat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vabsw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vabsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vabswsat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vabswsat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vaddb_map {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vaddb_map";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vaddh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vaddh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vaddhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vaddhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vaddub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vaddub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vaddubs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vaddubs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vadduhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vadduhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vaddw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vaddw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vaddws {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vaddws";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavgh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavgh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavghcr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavghcr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavghr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavghr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavgub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavgub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavgubr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavgubr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavguh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavguh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavguhr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavguhr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavguw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavguw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavguwr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavguwr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavgw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavgw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavgwcr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavgwcr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vavgwr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vavgwr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vcmpbeq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vcmpbeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vcmpbgtu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vcmpbgtu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vcmpheq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vcmpheq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vcmphgt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vcmphgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vcmphgtu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vcmphgtu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vcmpweq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vcmpweq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vcmpwgt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vcmpwgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vcmpwgtu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vcmpwgtu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vconj {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vconj";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vmaxb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vmaxb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vmaxh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vmaxh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vmaxub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vmaxub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vmaxuh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vmaxuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vmaxuw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vmaxuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vmaxw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vmaxw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vminb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vminb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vminh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vminh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vminub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vminub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vminuh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vminuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vminuw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vminuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vminw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vminw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vnavgh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vnavgh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vnavghcr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vnavghcr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vnavghr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vnavghr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vnavgw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vnavgw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vnavgwcr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vnavgwcr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vnavgwr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vnavgwr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vraddub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vraddub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vraddub_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vraddub_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vrsadub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vrsadub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vrsadub_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vrsadub_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vsubb_map {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vsubb_map";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vsubh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vsubh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vsubhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vsubhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vsubub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vsubub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vsububs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vsububs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vsubuhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vsubuhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vsubw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vsubw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_vsubws {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_vsubws";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_xor {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_xor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_xorp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_xorp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_zxtb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_zxtb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A2_zxth {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A2_zxth";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_andn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_andn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_andnp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_andnp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_bitsplit {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_bitsplit";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_bitspliti {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_bitspliti";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_boundscheck {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sidi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_boundscheck";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmpbeq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmpbeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmpbeqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmpbeqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmpbgt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmpbgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmpbgti {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmpbgti";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmpbgtu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmpbgtu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmpbgtui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmpbgtui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmpheq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmpheq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmpheqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmpheqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmphgt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmphgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmphgti {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmphgti";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmphgtu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmphgtu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cmphgtui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cmphgtui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_combineir {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_combineir";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_combineri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_combineri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cround_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cround_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_cround_rr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_cround_rr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_modwrapu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_modwrapu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_orn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_orn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_ornp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_ornp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_rcmpeq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_rcmpeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_rcmpeqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_rcmpeqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_rcmpneq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_rcmpneq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_rcmpneqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_rcmpneqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_round_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_round_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_round_ri_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_round_ri_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_round_rr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_round_rr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_round_rr_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_round_rr_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_tlbmatch {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_tlbmatch";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpbeq_any {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpbeq_any";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpbeqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpbeqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpbgt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpbgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpbgti {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpbgti";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpbgtui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpbgtui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpheqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpheqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmphgti {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmphgti";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmphgtui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmphgtui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpweqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpweqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpwgti {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpwgti";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vcmpwgtui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vcmpwgtui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vrmaxh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vrmaxh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vrmaxuh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vrmaxuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vrmaxuw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vrmaxuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vrmaxw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vrmaxw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vrminh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vrminh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vrminuh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vrminuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vrminuw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vrminuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A4_vrminw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A4_vrminw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_A5_vaddhubs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_A5_vaddhubs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_all8 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_all8";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_andn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_andn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_any8 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_any8";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_bitsclr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_bitsclr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_bitsclri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_bitsclri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_bitsset {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_bitsset";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpeq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpeqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpeqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpeqp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpeqp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpgei {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpgei";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpgeui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpgeui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpgt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpgti {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpgti";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpgtp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpgtp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpgtu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpgtu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpgtui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpgtui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpgtup {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpgtup";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmplt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmplt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_cmpltu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_cmpltu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_mask {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_qi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_mux {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_qisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_mux";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_muxii {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_qisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_muxii";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_muxir {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_qisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_muxir";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_muxri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_qisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_muxri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_not {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_not";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_orn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_orn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_pxfer_map {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_pxfer_map";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_tfrpr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_qi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_tfrpr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_tfrrp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_tfrrp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_vitpack {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_qiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_vitpack";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_vmux {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_qididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_vmux";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C2_xor {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C2_xor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_and_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_and_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_and_andn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_and_andn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_and_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_and_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_and_orn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_and_orn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_cmplte {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_cmplte";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_cmpltei {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_cmpltei";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_cmplteu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_cmplteu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_cmplteui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_cmplteui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_cmpneq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_cmpneq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_cmpneqi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_cmpneqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_fastcorner9 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_fastcorner9";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_fastcorner9_not {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_fastcorner9_not";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_nbitsclr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_nbitsclr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_nbitsclri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_nbitsclri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_nbitsset {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_nbitsset";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_or_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_or_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_or_andn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_or_andn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_or_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_or_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_C4_or_orn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_qiqiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_C4_or_orn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_d2df {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_d2df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_d2sf {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_d2sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2d {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2d_chop {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2d_chop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2sf {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2ud {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2ud";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2ud_chop {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2ud_chop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2uw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2uw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2uw_chop {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2uw_chop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2w {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_df2w_chop {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_df2w_chop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2d {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2d_chop {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2d_chop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2df {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2ud {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2ud";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2ud_chop {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2ud_chop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2uw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2uw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2uw_chop {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2uw_chop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2w {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_sf2w_chop {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_sf2w_chop";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_ud2df {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_ud2df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_ud2sf {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_ud2sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_uw2df {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_uw2df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_uw2sf {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_uw2sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_w2df {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_w2df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_conv_w2sf {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_conv_w2sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfadd {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfadd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfclass {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_dfsi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfclass";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfcmpeq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfcmpeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfcmpge {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfcmpge";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfcmpgt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfcmpgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfcmpuo {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfcmpuo";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dffixupd {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dffixupd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dffixupn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dffixupn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dffixupr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_df_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dffixupr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dffma {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dffma";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dffma_lib {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dffma_lib";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dffma_sc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdfdfqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dffma_sc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dffms {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dffms";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dffms_lib {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dffms_lib";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfimm_n {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfimm_n";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfimm_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfimm_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfmax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfmax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfmin {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfmin";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfmpy {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfmpy";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_dfsub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_df_dfdf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_dfsub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfadd {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfadd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfclass {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sfsi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfclass";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfcmpeq {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfcmpeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfcmpge {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfcmpge";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfcmpgt {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfcmpgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfcmpuo {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfcmpuo";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sffixupd {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sffixupd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sffixupn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sffixupn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sffixupr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sffixupr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sffma {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sffma";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sffma_lib {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sffma_lib";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sffma_sc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsfsfqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sffma_sc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sffms {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sffms";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sffms_lib {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sffms_lib";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfimm_n {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfimm_n";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfimm_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfimm_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfmax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfmax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfmin {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfmin";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfmpy {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfmpy";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_F2_sfsub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_sf_sfsf_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_F2_sfsub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_acci {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_acci";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_accii {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_accii";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmaci_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmaci_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmacr_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmacr_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmacs_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmacs_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmacs_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmacs_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmacsc_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmacsc_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmacsc_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmacsc_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpyi_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpyi_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpyr_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpyr_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpyrs_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpyrs_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpyrs_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpyrs_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpyrsc_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpyrsc_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpyrsc_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpyrsc_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpys_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpys_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpys_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpys_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpysc_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpysc_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cmpysc_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cmpysc_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cnacs_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cnacs_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cnacs_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cnacs_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cnacsc_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cnacsc_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_cnacsc_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_cnacsc_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_dpmpyss_acc_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_dpmpyss_acc_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_dpmpyss_nac_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_dpmpyss_nac_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_dpmpyss_rnd_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_dpmpyss_rnd_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_dpmpyss_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_dpmpyss_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_dpmpyuu_acc_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_dpmpyuu_acc_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_dpmpyuu_nac_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_dpmpyuu_nac_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_dpmpyuu_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_dpmpyuu_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_hmmpyh_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_hmmpyh_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_hmmpyh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_hmmpyh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_hmmpyl_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_hmmpyl_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_hmmpyl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_hmmpyl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_maci {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_maci";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_macsin {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_macsin";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_macsip {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_macsip";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmachs_rs0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmachs_rs0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmachs_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmachs_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmachs_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmachs_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmachs_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmachs_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmacls_rs0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmacls_rs0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmacls_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmacls_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmacls_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmacls_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmacls_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmacls_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmacuhs_rs0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmacuhs_rs0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmacuhs_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmacuhs_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmacuhs_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmacuhs_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmacuhs_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmacuhs_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmaculs_rs0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmaculs_rs0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmaculs_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmaculs_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmaculs_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmaculs_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmaculs_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmaculs_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyh_rs0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyh_rs0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyh_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyh_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyl_rs0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyl_rs0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyl_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyl_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyuh_rs0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyuh_rs0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyuh_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyuh_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyuh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyuh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyuh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyuh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyul_rs0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyul_rs0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyul_rs1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyul_rs1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyul_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyul_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mmpyul_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mmpyul_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_sat_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_sat_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_sat_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_sat_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_sat_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_sat_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_sat_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_sat_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_sat_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_sat_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_sat_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_sat_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_sat_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_sat_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_acc_sat_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_acc_sat_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_sat_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_sat_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_sat_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_sat_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_sat_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_sat_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_sat_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_sat_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_sat_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_sat_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_sat_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_sat_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_sat_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_sat_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_nac_sat_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_nac_sat_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_rnd_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_rnd_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_rnd_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_rnd_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_rnd_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_rnd_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_rnd_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_rnd_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_rnd_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_rnd_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_rnd_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_rnd_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_rnd_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_rnd_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_rnd_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_rnd_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_rnd_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_rnd_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_rnd_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_rnd_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_rnd_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_rnd_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_rnd_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_rnd_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_rnd_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_rnd_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_rnd_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_rnd_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_rnd_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_rnd_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_sat_rnd_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_sat_rnd_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_up {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_up";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_up_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_up_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpy_up_s1_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpy_up_s1_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_acc_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_acc_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_acc_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_acc_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_acc_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_acc_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_acc_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_acc_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_acc_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_acc_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_acc_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_acc_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_acc_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_acc_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_acc_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_acc_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_nac_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_nac_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_nac_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_nac_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_nac_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_nac_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_nac_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_nac_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_nac_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_nac_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_nac_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_nac_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_nac_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_nac_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_nac_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_nac_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_rnd_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_rnd_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_rnd_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_rnd_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_rnd_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_rnd_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_rnd_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_rnd_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_rnd_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_rnd_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_rnd_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_rnd_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_rnd_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_rnd_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyd_rnd_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyd_rnd_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpysmi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpysmi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpysu_up {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpysu_up";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_acc_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_acc_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_acc_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_acc_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_acc_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_acc_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_acc_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_acc_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_acc_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_acc_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_acc_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_acc_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_acc_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_acc_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_acc_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_acc_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_nac_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_nac_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_nac_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_nac_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_nac_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_nac_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_nac_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_nac_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_nac_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_nac_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_nac_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_nac_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_nac_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_nac_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_nac_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_nac_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyu_up {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyu_up";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_acc_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_acc_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_acc_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_acc_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_acc_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_acc_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_acc_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_acc_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_acc_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_acc_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_acc_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_acc_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_acc_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_acc_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_acc_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_acc_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_nac_hh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_nac_hh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_nac_hh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_nac_hh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_nac_hl_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_nac_hl_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_nac_hl_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_nac_hl_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_nac_lh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_nac_lh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_nac_lh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_nac_lh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_nac_ll_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_nac_ll_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyud_nac_ll_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyud_nac_ll_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_mpyui {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_mpyui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_nacci {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_nacci";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_naccii {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_naccii";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_subacc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_subacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vabsdiffh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vabsdiffh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vabsdiffw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vabsdiffw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vcmac_s0_sat_i {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vcmac_s0_sat_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vcmac_s0_sat_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vcmac_s0_sat_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vcmpy_s0_sat_i {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vcmpy_s0_sat_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vcmpy_s0_sat_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vcmpy_s0_sat_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vcmpy_s1_sat_i {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vcmpy_s1_sat_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vcmpy_s1_sat_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vcmpy_s1_sat_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vdmacs_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vdmacs_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vdmacs_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vdmacs_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vdmpyrs_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vdmpyrs_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vdmpyrs_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vdmpyrs_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vdmpys_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vdmpys_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vdmpys_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vdmpys_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmac2 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmac2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmac2es {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmac2es";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmac2es_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmac2es_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmac2es_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmac2es_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmac2s_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmac2s_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmac2s_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmac2s_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmac2su_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmac2su_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmac2su_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmac2su_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmpy2es_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmpy2es_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmpy2es_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmpy2es_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmpy2s_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmpy2s_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmpy2s_s0pack {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmpy2s_s0pack";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmpy2s_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmpy2s_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmpy2s_s1pack {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmpy2s_s1pack";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmpy2su_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmpy2su_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vmpy2su_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vmpy2su_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vraddh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vraddh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vradduh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vradduh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmaci_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmaci_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmaci_s0c {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmaci_s0c";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmacr_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmacr_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmacr_s0c {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmacr_s0c";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmpyi_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmpyi_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmpyi_s0c {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmpyi_s0c";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmpyr_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmpyr_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmpyr_s0c {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmpyr_s0c";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmpys_acc_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmpys_acc_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmpys_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmpys_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrcmpys_s1rp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrcmpys_s1rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrmac_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrmac_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_vrmpy_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_vrmpy_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M2_xor_xacc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M2_xor_xacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_and_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_and_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_and_andn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_and_andn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_and_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_and_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_and_xor {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_and_xor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_cmpyi_wh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_cmpyi_wh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_cmpyi_whc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_cmpyi_whc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_cmpyr_wh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_cmpyr_wh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_cmpyr_whc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_cmpyr_whc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_mac_up_s1_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_mac_up_s1_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_mpyri_addi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_mpyri_addi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_mpyri_addr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_mpyri_addr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_mpyri_addr_u2 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_mpyri_addr_u2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_mpyrr_addi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_mpyrr_addi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_mpyrr_addr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_mpyrr_addr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_nac_up_s1_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_nac_up_s1_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_or_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_or_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_or_andn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_or_andn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_or_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_or_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_or_xor {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_or_xor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_pmpyw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_pmpyw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_pmpyw_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_pmpyw_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vpmpyh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vpmpyh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vpmpyh_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vpmpyh_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vrmpyeh_acc_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vrmpyeh_acc_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vrmpyeh_acc_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vrmpyeh_acc_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vrmpyeh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vrmpyeh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vrmpyeh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vrmpyeh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vrmpyoh_acc_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vrmpyoh_acc_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vrmpyoh_acc_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vrmpyoh_acc_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vrmpyoh_s0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vrmpyoh_s0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_vrmpyoh_s1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_vrmpyoh_s1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_xor_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_xor_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_xor_andn {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_xor_andn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_xor_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_xor_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M4_xor_xacc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M4_xor_xacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vdmacbsu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vdmacbsu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vdmpybsu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vdmpybsu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vmacbsu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vmacbsu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vmacbuu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vmacbuu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vmpybsu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vmpybsu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vmpybuu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vmpybuu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vrmacbsu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vrmacbsu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vrmacbuu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vrmacbuu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vrmpybsu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vrmpybsu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_M5_vrmpybuu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_M5_vrmpybuu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_addasl_rrri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_addasl_rrri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_p_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_p_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_p_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_p_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_p_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_p_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_p_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_p_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_p_xacc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_p_xacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_r_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_r_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_r_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_r_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_r_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_r_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_r_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_r_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_r_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_r_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_r_xacc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_r_xacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_vh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_vh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_i_vw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_i_vw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_p_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_p_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_p_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_p_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_p_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_p_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_p_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_p_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_p_xor {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_p_xor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_r_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_r_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_r_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_r_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_r_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_r_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_r_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_r_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_r_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_r_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_vh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_vh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asl_r_vw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asl_r_vw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_p_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_p_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_p_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_p_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_p_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_p_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_p_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_p_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_p_rnd {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_p_rnd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_p_rnd_goodsyntax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_p_rnd_goodsyntax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_r_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_r_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_r_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_r_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_r_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_r_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_r_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_r_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_r_rnd {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_r_rnd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_r_rnd_goodsyntax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_r_rnd_goodsyntax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_svw_trun {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_svw_trun";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_vh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_vh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_i_vw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_i_vw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_p_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_p_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_p_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_p_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_p_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_p_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_p_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_p_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_p_xor {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_p_xor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_r_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_r_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_r_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_r_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_r_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_r_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_r_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_r_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_r_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_r_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_svw_trun {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_svw_trun";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_vh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_vh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_asr_r_vw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_asr_r_vw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_brev {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_brev";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_brevp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_brevp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_cl0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_cl0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_cl0p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_cl0p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_cl1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_cl1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_cl1p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_cl1p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_clb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_clb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_clbnorm {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_clbnorm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_clbp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_clbp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_clrbit_i {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_clrbit_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_clrbit_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_clrbit_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_ct0 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_ct0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_ct0p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_ct0p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_ct1 {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_ct1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_ct1p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_ct1p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_deinterleave {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_deinterleave";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_extractu {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_extractu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_extractu_rp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sidi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_extractu_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_extractup {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_extractup";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_extractup_rp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_extractup_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_insert {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_insert";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_insert_rp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisidi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_insert_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_insertp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_insertp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_insertp_rp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_dididi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_insertp_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_interleave {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_interleave";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lfsp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lfsp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_p_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_p_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_p_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_p_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_p_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_p_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_p_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_p_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_p_xor {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_p_xor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_r_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_r_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_r_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_r_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_r_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_r_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_r_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_r_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_vh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_vh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsl_r_vw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsl_r_vw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_p_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_p_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_p_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_p_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_p_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_p_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_p_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_p_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_p_xacc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_p_xacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_r_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_r_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_r_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_r_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_r_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_r_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_r_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_r_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_r_xacc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_r_xacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_vh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_vh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_i_vw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_i_vw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_p {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_p_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_p_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_p_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_p_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_p_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_p_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_p_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_p_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_p_xor {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_p_xor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_r_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_r_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_r_and {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_r_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_r_nac {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_r_nac";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_r_or {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_r_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_vh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_vh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_lsr_r_vw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_lsr_r_vw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_packhl {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_packhl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_parityp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_parityp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_setbit_i {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_setbit_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_setbit_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_setbit_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_shuffeb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_shuffeb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_shuffeh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_shuffeh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_shuffob {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_shuffob";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_shuffoh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_shuffoh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_svsathb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_svsathb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_svsathub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_svsathub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_tableidxb_goodsyntax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_tableidxb_goodsyntax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_tableidxd_goodsyntax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_tableidxd_goodsyntax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_tableidxh_goodsyntax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_tableidxh_goodsyntax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_tableidxw_goodsyntax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_tableidxw_goodsyntax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_togglebit_i {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_togglebit_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_togglebit_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_togglebit_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_tstbit_i {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_tstbit_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_tstbit_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_tstbit_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_valignib {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_valignib";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_valignrb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_valignrb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vcnegh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vcnegh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vcrotate {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vcrotate";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vrcnegh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vrcnegh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vrndpackwh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vrndpackwh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vrndpackwhs {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vrndpackwhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsathb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsathb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsathb_nopack {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsathb_nopack";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsathub {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsathub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsathub_nopack {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsathub_nopack";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsatwh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsatwh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsatwh_nopack {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsatwh_nopack";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsatwuh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsatwuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsatwuh_nopack {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsatwuh_nopack";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsplatrb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsplatrb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsplatrh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsplatrh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vspliceib {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vspliceib";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsplicerb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didiqi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsplicerb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsxtbh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsxtbh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vsxthw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vsxthw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vtrunehb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vtrunehb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vtrunewh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vtrunewh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vtrunohb {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vtrunohb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vtrunowh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vtrunowh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vzxtbh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vzxtbh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S2_vzxthw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_si_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S2_vzxthw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_addaddi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_addaddi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_addi_asl_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_addi_asl_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_addi_lsr_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_addi_lsr_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_andi_asl_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_andi_asl_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_andi_lsr_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_andi_lsr_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_clbaddi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_clbaddi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_clbpaddi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_clbpaddi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_clbpnorm {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_clbpnorm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_extract {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_extract";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_extract_rp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sidi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_extract_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_extractp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_extractp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_extractp_rp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_extractp_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_lsli {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_lsli";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_ntstbit_i {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_ntstbit_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_ntstbit_r {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_qi_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_ntstbit_r";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_or_andi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_or_andi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_or_andix {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_or_andix";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_or_ori {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_or_ori";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_ori_asl_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_ori_asl_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_ori_lsr_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_ori_lsr_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_parity {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_parity";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_subaddi {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_subaddi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_subi_asl_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_subi_asl_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_subi_lsr_ri {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_sisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_subi_lsr_ri";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_vrcrotate {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_vrcrotate";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_vrcrotate_acc {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didisisi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_vrcrotate_acc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_vxaddsubh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_vxaddsubh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_vxaddsubhr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_vxaddsubhr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_vxaddsubw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_vxaddsubw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_vxsubaddh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_vxsubaddh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_vxsubaddhr {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_vxsubaddhr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S4_vxsubaddw {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_didi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S4_vxsubaddw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S5_asrhub_rnd_sat_goodsyntax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S5_asrhub_rnd_sat_goodsyntax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S5_asrhub_sat {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S5_asrhub_sat";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S5_popcountp {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_di_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S5_popcountp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_S5_vasrhrnd_goodsyntax {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_di_disi_Intrinsic
  string GCCBuiltinName = "__builtin_HEXAGON_S5_vasrhrnd_goodsyntax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_SI_to_SXTHI_asrh {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_si_si_Intrinsic
  string GCCBuiltinName = "__builtin_SI_to_SXTHI_asrh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_hexagon_circ_ldd {	// GCCBuiltin SDPatternOperator Intrinsic Hexagon_Intrinsic Hexagon_mem_memmemsisi_Intrinsic
  string GCCBuiltinName = "__builtin_circ_ldd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "hexagon";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_init_trampoline {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_45];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_init_trampoline";
  string NAME = ?;
}
def int_invariant_end {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_descriptor_ty, llvm_i64_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_61];
  bit isTarget = 0;
  string NAME = ?;
}
def int_invariant_start {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_descriptor_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_60];
  bit isTarget = 0;
  string NAME = ?;
}
def int_lifetime_end {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_59];
  bit isTarget = 0;
  string NAME = ?;
}
def int_lifetime_start {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_58];
  bit isTarget = 0;
  string NAME = ?;
}
def int_log {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_22];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_log10 {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_23];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_log2 {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_24];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_longjmp {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoReturn];
  bit isTarget = 0;
  string NAME = ?;
}
def int_memcpy {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_anyptr_ty, llvm_anyint_ty, llvm_i32_ty, llvm_i1_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_3, anonymous_4, anonymous_5];
  bit isTarget = 0;
  string NAME = ?;
}
def int_memmove {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_anyptr_ty, llvm_anyint_ty, llvm_i32_ty, llvm_i1_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_6, anonymous_7, anonymous_8];
  bit isTarget = 0;
  string NAME = ?;
}
def int_memset {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i8_ty, llvm_anyint_ty, llvm_i32_ty, llvm_i1_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_9];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_absq_s_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_absq_s_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_absq_s_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_absq_s_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v4q7_ty];
  list<LLVMType> ParamTypes = [mips_v4q7_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_absq_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_absq_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_add_a_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_add_a_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_add_a_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_add_a_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_add_a_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_add_a_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_add_a_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_add_a_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addq_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addq_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addq_s_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addq_s_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addq_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addq_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addqh_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addqh_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addqh_r_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addqh_r_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addqh_r_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addqh_r_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addqh_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addqh_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_a_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_a_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_a_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_a_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_a_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_a_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_a_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_a_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adds_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_adds_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addsc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addsc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addu_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addu_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addu_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addu_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addu_s_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addu_s_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addu_s_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addu_s_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adduh_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_adduh_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_adduh_r_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_adduh_r_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addv_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_addv_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addv_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_addv_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addv_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_addv_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addv_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_addv_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addvi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_addvi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addvi_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_addvi_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addvi_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_addvi_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addvi_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_addvi_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_addwc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_addwc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_and_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_and_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_andi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_andi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_append {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_append";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_asub_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_asub_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_asub_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_asub_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_asub_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_asub_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_asub_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_asub_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_asub_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_asub_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_asub_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_asub_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_asub_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_asub_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_asub_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_asub_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ave_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ave_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ave_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ave_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ave_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ave_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ave_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ave_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ave_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ave_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ave_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ave_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ave_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ave_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ave_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ave_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_aver_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_aver_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_aver_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_aver_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_aver_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_aver_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_aver_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_aver_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_aver_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_aver_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_aver_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_aver_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_aver_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_aver_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_aver_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_aver_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [Commutative, IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_balign {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_balign";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bclr_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bclr_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bclr_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bclr_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bclr_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bclr_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bclr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bclr_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bclri_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bclri_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bclri_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bclri_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bclri_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bclri_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bclri_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bclri_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsl_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsl_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsl_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsl_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsl_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsl_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsl_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsl_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsli_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsli_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsli_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsli_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsli_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsli_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsr_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsr_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsr_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsr_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsr_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsr_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsr_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsri_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsri_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsri_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsri_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsri_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsri_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_binsri_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_binsri_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bitrev {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_bitrev";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bmnz_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bmnz_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bmnzi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bmnzi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bmz_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bmz_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bmzi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bmzi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bneg_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bneg_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bneg_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bneg_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bneg_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bneg_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bneg_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bneg_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnegi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnegi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnegi_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnegi_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnegi_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnegi_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnegi_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnegi_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnz_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnz_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnz_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnz_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnz_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnz_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bnz_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bnz_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bposge32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_bposge32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bsel_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bsel_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bseli_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bseli_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bset_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bset_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bset_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bset_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bset_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bset_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bset_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bset_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bseti_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bseti_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bseti_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bseti_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bseti_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bseti_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bseti_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bseti_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bz_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bz_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bz_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bz_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bz_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bz_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_bz_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_bz_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ceq_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ceq_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ceq_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ceq_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ceq_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ceq_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ceq_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ceq_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ceqi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ceqi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ceqi_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ceqi_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ceqi_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ceqi_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ceqi_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ceqi_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cfcmsa {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cfcmsa";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cle_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cle_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cle_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cle_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cle_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cle_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cle_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cle_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cle_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cle_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cle_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cle_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cle_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cle_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cle_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_cle_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clei_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clei_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clei_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clei_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clei_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clei_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clei_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clei_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clei_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clei_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clei_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clei_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clei_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clei_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clei_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clei_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clt_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clt_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clt_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clt_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clt_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clt_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clt_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clt_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clt_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clt_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clt_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clt_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clt_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clt_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clt_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clt_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clti_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clti_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clti_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clti_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clti_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clti_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clti_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clti_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clti_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clti_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clti_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clti_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clti_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clti_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_clti_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_clti_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmp_eq_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmp_eq_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmp_le_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmp_le_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmp_lt_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmp_lt_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpgdu_eq_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpgdu_eq_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpgdu_le_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpgdu_le_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpgdu_lt_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpgdu_lt_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpgu_eq_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpgu_eq_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpgu_le_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpgu_le_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpgu_lt_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpgu_lt_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpu_eq_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpu_eq_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpu_le_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpu_le_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_cmpu_lt_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_cmpu_lt_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_copy_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_copy_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_copy_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_copy_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_copy_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_copy_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_copy_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_copy_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_copy_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_copy_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_copy_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_copy_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_copy_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_copy_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_copy_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_copy_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ctcmsa {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ctcmsa";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_div_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_div_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_div_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_div_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_div_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_div_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_div_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_div_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_div_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_div_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_div_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_div_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_div_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_div_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_div_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_div_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dlsa {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dlsa";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dotp_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dotp_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dotp_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dotp_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dotp_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dotp_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dotp_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dotp_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dotp_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dotp_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dotp_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dotp_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpa_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpa_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpadd_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpadd_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpadd_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpadd_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpadd_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpadd_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpadd_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpadd_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpadd_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpadd_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpadd_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpadd_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpaq_s_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpaq_s_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpaq_sa_l_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpaq_sa_l_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpaqx_s_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpaqx_s_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpaqx_sa_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpaqx_sa_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpau_h_qbl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpau_h_qbl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpau_h_qbr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpau_h_qbr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpax_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpax_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dps_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dps_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsq_s_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpsq_s_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsq_sa_l_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpsq_sa_l_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsqx_s_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpsqx_s_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsqx_sa_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpsqx_sa_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsu_h_qbl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpsu_h_qbl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsu_h_qbr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpsu_h_qbr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsub_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpsub_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsub_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpsub_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsub_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpsub_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsub_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpsub_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsub_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpsub_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsub_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_dpsub_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_dpsx_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_dpsx_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_extp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_extp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_extpdp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_extpdp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_extr_r_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_extr_r_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_extr_rs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_extr_rs_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_extr_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_extr_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_extr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_extr_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fadd_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fadd_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fadd_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fadd_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcaf_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcaf_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcaf_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcaf_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fceq_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fceq_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fceq_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fceq_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fclass_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fclass_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fclass_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fclass_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcle_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcle_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcle_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcle_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fclt_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fclt_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fclt_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fclt_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcne_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcne_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcne_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcne_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcor_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcor_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcor_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcor_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcueq_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcueq_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcueq_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcueq_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcule_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcule_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcule_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcule_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcult_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcult_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcult_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcult_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcun_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcun_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcun_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcun_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcune_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcune_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fcune_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fcune_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fdiv_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fdiv_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fdiv_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fdiv_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fexdo_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fexdo_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8f16_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fexdo_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fexdo_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fexp2_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fexp2_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fexp2_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fexp2_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fexupl_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fexupl_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fexupl_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fexupl_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fexupr_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fexupr_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fexupr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fexupr_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ffint_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ffint_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ffint_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ffint_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ffint_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ffint_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ffint_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ffint_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ffql_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ffql_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ffql_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ffql_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ffqr_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ffqr_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ffqr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ffqr_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fill_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fill_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fill_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fill_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fill_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fill_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fill_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fill_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_flog2_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_flog2_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_flog2_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_flog2_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmadd_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmadd_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmadd_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmadd_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmax_a_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmax_a_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmax_a_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmax_a_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmax_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmax_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmax_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmax_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmin_a_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmin_a_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmin_a_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmin_a_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmin_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmin_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmin_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmin_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmsub_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmsub_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmsub_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmsub_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmul_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmul_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fmul_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fmul_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_frcp_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_frcp_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_frcp_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_frcp_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_frint_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_frint_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_frint_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_frint_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_frsqrt_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_frsqrt_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_frsqrt_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_frsqrt_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsaf_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsaf_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsaf_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsaf_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fseq_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fseq_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fseq_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fseq_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsle_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsle_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsle_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsle_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fslt_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fslt_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fslt_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fslt_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsne_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsne_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsne_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsne_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsor_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsor_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsor_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsor_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsqrt_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsqrt_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsqrt_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsqrt_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsub_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsub_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsub_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsub_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsueq_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsueq_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsueq_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsueq_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsule_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsule_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsule_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsule_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsult_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsult_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsult_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsult_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsun_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsun_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsun_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsun_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsune_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsune_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_fsune_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_fsune_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftint_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftint_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftint_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftint_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftint_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftint_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftint_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftint_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftq_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftq_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftq_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftq_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftrunc_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftrunc_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftrunc_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftrunc_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftrunc_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftrunc_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ftrunc_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ftrunc_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hadd_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hadd_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hadd_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hadd_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hadd_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hadd_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hadd_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hadd_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hadd_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hadd_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hadd_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hadd_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hsub_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hsub_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hsub_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hsub_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hsub_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hsub_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hsub_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hsub_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hsub_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hsub_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_hsub_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_hsub_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvev_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvev_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvev_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvev_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvev_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvev_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvev_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvev_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvl_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvl_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvl_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvl_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvl_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvl_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvl_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvl_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvod_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvod_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvod_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvod_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvod_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvod_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvod_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvod_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvr_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvr_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvr_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvr_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvr_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvr_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ilvr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ilvr_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insert_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_insert_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insert_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_insert_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insert_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_insert_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insert_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_insert_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insv {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_insv";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insve_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_insve_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insve_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_insve_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insve_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_insve_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_insve_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_insve_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_lbux {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_lbux";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ld_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ld_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ld_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ld_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ld_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ld_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ld_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ld_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ldi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ldi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ldi_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ldi_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ldi_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ldi_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ldi_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ldi_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_lhx {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_lhx";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_lsa {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_lsa";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_lwx {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_lwx";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_madd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_madd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_madd_q_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_madd_q_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_madd_q_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_madd_q_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maddr_q_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maddr_q_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maddr_q_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maddr_q_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maddu {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_maddu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maddv_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maddv_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maddv_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maddv_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maddv_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maddv_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maddv_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maddv_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maq_s_w_phl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_maq_s_w_phl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maq_s_w_phr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_maq_s_w_phr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maq_sa_w_phl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_maq_sa_w_phl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maq_sa_w_phr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_maq_sa_w_phr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_a_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_a_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_a_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_a_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_a_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_a_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_a_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_a_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_max_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_max_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maxi_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maxi_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maxi_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maxi_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maxi_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maxi_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maxi_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maxi_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maxi_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maxi_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maxi_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maxi_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maxi_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maxi_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_maxi_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_maxi_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_a_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_a_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_a_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_a_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_a_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_a_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_a_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_a_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_min_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_min_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mini_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mini_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mini_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mini_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mini_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mini_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mini_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mini_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mini_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mini_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mini_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mini_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mini_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mini_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mini_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mini_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mod_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mod_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mod_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mod_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mod_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mod_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mod_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mod_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mod_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mod_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mod_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mod_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mod_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mod_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mod_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mod_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_modsub {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_modsub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_move_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_move_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msub {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_msub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msub_q_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_msub_q_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msub_q_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_msub_q_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msubr_q_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_msubr_q_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msubr_q_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_msubr_q_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msubu {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_msubu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msubv_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_msubv_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msubv_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_msubv_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msubv_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_msubv_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_msubv_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_msubv_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mthlip {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mthlip";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mul_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mul_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mul_q_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mul_q_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mul_q_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mul_q_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mul_s_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mul_s_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_muleq_s_w_phl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_muleq_s_w_phl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_muleq_s_w_phr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_muleq_s_w_phr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_muleu_s_ph_qbl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_muleu_s_ph_qbl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_muleu_s_ph_qbr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_muleu_s_ph_qbr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulq_rs_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mulq_rs_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulq_rs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mulq_rs_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulq_s_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mulq_s_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulq_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mulq_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulr_q_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mulr_q_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulr_q_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mulr_q_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulsa_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mulsa_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulsaq_s_w_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mulsaq_s_w_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mult {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_mult";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_multu {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_multu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulv_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mulv_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulv_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mulv_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulv_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mulv_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_mulv_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_mulv_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nloc_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nloc_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nloc_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nloc_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nloc_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nloc_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nloc_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nloc_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nlzc_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nlzc_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nlzc_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nlzc_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nlzc_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nlzc_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nlzc_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nlzc_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nor_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nor_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_nori_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_nori_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_or_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_or_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_ori_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_ori_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_packrl_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_packrl_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pckev_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pckev_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pckev_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pckev_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pckev_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pckev_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pckev_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pckev_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pckod_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pckod_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pckod_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pckod_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pckod_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pckod_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pckod_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pckod_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pcnt_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pcnt_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pcnt_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pcnt_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pcnt_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pcnt_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pcnt_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_pcnt_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pick_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_pick_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_pick_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_pick_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_preceq_w_phl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_preceq_w_phl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_preceq_w_phr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_preceq_w_phr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precequ_ph_qbl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precequ_ph_qbl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precequ_ph_qbla {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precequ_ph_qbla";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precequ_ph_qbr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precequ_ph_qbr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precequ_ph_qbra {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precequ_ph_qbra";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_preceu_ph_qbl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_preceu_ph_qbl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_preceu_ph_qbla {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_preceu_ph_qbla";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_preceu_ph_qbr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_preceu_ph_qbr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_preceu_ph_qbra {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_preceu_ph_qbra";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precr_qb_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precr_qb_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precr_sra_ph_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precr_sra_ph_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precr_sra_r_ph_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precr_sra_r_ph_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precrq_ph_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precrq_ph_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precrq_qb_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precrq_qb_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precrq_rs_ph_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precrq_rs_ph_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_precrqu_s_qb_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_precrqu_s_qb_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_prepend {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_prepend";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_raddu_w_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_raddu_w_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_rddsp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_rddsp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_repl_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_repl_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_repl_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_repl_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sat_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sat_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sat_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sat_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sat_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sat_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sat_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sat_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sat_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sat_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sat_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sat_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sat_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sat_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sat_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sat_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shf_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_shf_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shf_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_shf_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shf_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_shf_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shilo {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shilo";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shll_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shll_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shll_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shll_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shll_s_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shll_s_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shll_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shll_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shra_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shra_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shra_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shra_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shra_r_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shra_r_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shra_r_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shra_r_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shra_r_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shra_r_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shrl_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shrl_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_v2i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_shrl_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_shrl_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sld_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sld_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sld_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sld_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sld_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sld_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sld_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sld_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sldi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sldi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sldi_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sldi_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sldi_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sldi_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sldi_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sldi_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sll_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sll_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sll_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sll_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sll_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sll_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sll_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sll_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_slli_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_slli_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_slli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_slli_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_slli_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_slli_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_slli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_slli_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_splat_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_splat_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_splat_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_splat_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_splat_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_splat_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_splat_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_splat_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_splati_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_splati_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_splati_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_splati_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_splati_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_splati_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_splati_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_splati_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sra_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sra_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sra_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sra_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sra_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sra_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_sra_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_sra_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srai_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srai_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srai_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srai_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srai_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srai_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srai_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srai_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srar_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srar_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srar_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srar_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srar_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srar_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srar_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srar_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srari_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srari_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srari_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srari_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srari_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srari_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srari_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srari_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srl_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srl_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srl_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srl_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srl_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srl_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srl_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srl_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srli_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srli_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srli_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srli_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srli_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srli_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srlr_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srlr_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srlr_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srlr_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srlr_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srlr_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srlr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srlr_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srlri_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srlri_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srlri_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srlri_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srlri_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srlri_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_srlri_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_srlri_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_st_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_st_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_st_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_st_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_st_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_st_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_st_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_st_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subq_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subq_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subq_s_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subq_s_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subq_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subq_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subqh_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subqh_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subqh_r_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subqh_r_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_v2q15_ty];
  list<LLVMType> ParamTypes = [mips_v2q15_ty, mips_v2q15_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subqh_r_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subqh_r_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subqh_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subqh_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [mips_q31_ty];
  list<LLVMType> ParamTypes = [mips_q31_ty, mips_q31_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subs_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subs_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subs_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subs_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subs_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subs_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subs_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subs_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subs_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subs_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subs_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subs_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subs_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subs_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subs_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subs_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subsus_u_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subsus_u_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subsus_u_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subsus_u_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subsus_u_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subsus_u_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subsus_u_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subsus_u_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subsuu_s_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subsuu_s_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subsuu_s_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subsuu_s_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subsuu_s_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subsuu_s_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subsuu_s_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subsuu_s_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subu_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subu_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subu_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subu_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subu_s_ph {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subu_s_ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i16_ty];
  list<LLVMType> ParamTypes = [llvm_v2i16_ty, llvm_v2i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subu_s_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subu_s_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subuh_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subuh_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subuh_r_qb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_subuh_r_qb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i8_ty, llvm_v4i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subv_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subv_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subv_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subv_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subv_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subv_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subv_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subv_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subvi_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subvi_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subvi_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subvi_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subvi_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subvi_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_subvi_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_subvi_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_vshf_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_vshf_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_vshf_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_vshf_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_vshf_h {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_vshf_h";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_vshf_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_vshf_w";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_wrdsp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_mips_wrdsp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_xor_v {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_xor_v";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_mips_xori_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_msa_xori_b";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "mips";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nearbyint {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_34];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_abs_i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_abs_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_abs_ll {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_abs_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rm_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rm_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rm_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rm_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rm_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rm_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rn_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rn_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rn_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rn_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rn_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rn_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rp_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rp_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rp_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rp_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rp_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rp_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_add_rz_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_add_rz_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_atomic_load_add_f32 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [anonymous_259, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_260];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_atomic_load_dec_32 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [anonymous_263, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_264];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_atomic_load_inc_32 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [anonymous_261, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_262];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_barrier0 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_bar0";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoDuplicate];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_barrier0_and {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_bar0_and";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoDuplicate];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_barrier0_or {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_bar0_or";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoDuplicate];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_barrier0_popc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_bar0_popc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoDuplicate];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_bitcast_d2ll {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_bitcast_d2ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_bitcast_f2i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_bitcast_f2i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_bitcast_i2f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_bitcast_i2f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_bitcast_ll2d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_bitcast_ll2d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_brev32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_brev32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_brev64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_brev64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ceil_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ceil_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ceil_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ceil_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ceil_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ceil_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_clz_i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_clz_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_clz_ll {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_clz_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_compiler_error {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.compiler.error";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_compiler_warn {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.compiler.warn";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_cos_approx_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_cos_approx_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_cos_approx_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_cos_approx_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2f_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2f_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2f_rm_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2f_rm_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2f_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2f_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2f_rn_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2f_rn_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2f_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2f_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2f_rp_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2f_rp_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2f_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2f_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2f_rz_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2f_rz_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2i_hi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2i_hi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2i_lo {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2i_lo";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2i_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2i_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2i_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2i_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2i_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2i_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2i_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2i_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ll_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ll_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ll_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ll_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ll_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ll_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ll_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ll_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ui_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ui_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ui_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ui_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ui_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ui_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ui_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ui_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ull_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ull_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ull_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ull_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ull_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ull_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_d2ull_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_d2ull_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_approx_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_approx_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_approx_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_approx_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rm_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rm_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rm_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rm_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rm_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rm_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rn_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rn_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rn_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rn_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rn_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rn_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rp_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rp_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rp_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rp_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rp_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rp_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_div_rz_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_div_rz_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ex2_approx_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ex2_approx_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ex2_approx_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ex2_approx_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ex2_approx_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ex2_approx_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2h_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2h_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2h_rn_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2h_rn_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2i_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2i_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2i_rm_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2i_rm_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2i_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2i_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2i_rn_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2i_rn_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2i_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2i_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2i_rp_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2i_rp_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2i_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2i_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2i_rz_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2i_rz_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ll_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ll_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ll_rm_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ll_rm_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ll_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ll_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ll_rn_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ll_rn_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ll_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ll_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ll_rp_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ll_rp_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ll_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ll_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ll_rz_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ll_rz_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ui_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ui_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ui_rm_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ui_rm_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ui_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ui_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ui_rn_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ui_rn_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ui_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ui_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ui_rp_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ui_rp_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ui_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ui_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ui_rz_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ui_rz_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ull_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ull_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ull_rm_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ull_rm_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ull_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ull_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ull_rn_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ull_rn_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ull_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ull_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ull_rp_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ull_rp_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ull_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ull_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_f2ull_rz_ftz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_f2ull_rz_ftz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fabs_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fabs_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fabs_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fabs_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fabs_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fabs_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_floor_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_floor_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_floor_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_floor_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_floor_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_floor_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rm_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rm_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rm_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rm_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rm_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rm_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rn_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rn_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rn_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rn_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rn_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rn_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rp_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rp_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rp_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rp_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rp_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rp_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fma_rz_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fma_rz_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fmax_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fmax_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fmax_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fmax_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fmax_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fmax_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fmin_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fmin_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fmin_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fmin_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_fmin_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_fmin_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_h2f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_h2f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_i2d_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_i2d_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_i2d_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_i2d_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_i2d_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_i2d_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_i2d_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_i2d_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_i2f_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_i2f_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_i2f_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_i2f_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_i2f_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_i2f_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_i2f_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_i2f_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_isspacep_const {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.isspacep.const";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_isspacep_const";
  string NAME = ?;
}
def int_nvvm_isspacep_global {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.isspacep.global";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_isspacep_global";
  string NAME = ?;
}
def int_nvvm_isspacep_local {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.isspacep.local";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_isspacep_local";
  string NAME = ?;
}
def int_nvvm_isspacep_shared {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.isspacep.shared";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_isspacep_shared";
  string NAME = ?;
}
def int_nvvm_istypep_sampler {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.istypep.sampler";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_istypep_sampler";
  string NAME = ?;
}
def int_nvvm_istypep_surface {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.istypep.surface";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_istypep_surface";
  string NAME = ?;
}
def int_nvvm_istypep_texture {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.istypep.texture";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_istypep_texture";
  string NAME = ?;
}
def int_nvvm_ldg_global_f {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ldg.global.f";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_278];
  list<IntrinsicProperty> Properties = [IntrReadMem, anonymous_279];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ldg_global_i {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ldg.global.i";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_275];
  list<IntrinsicProperty> Properties = [IntrReadMem, anonymous_276];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ldg_global_p {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ldg.global.p";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [anonymous_281];
  list<IntrinsicProperty> Properties = [IntrReadMem, anonymous_282];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ldu_global_f {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ldu.global.f";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_269];
  list<IntrinsicProperty> Properties = [IntrReadMem, anonymous_270];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ldu_global_i {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ldu.global.i";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [anonymous_266];
  list<IntrinsicProperty> Properties = [IntrReadMem, anonymous_267];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ldu_global_p {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ldu.global.p";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [anonymous_272];
  list<IntrinsicProperty> Properties = [IntrReadMem, anonymous_273];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_lg2_approx_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_lg2_approx_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_lg2_approx_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_lg2_approx_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_lg2_approx_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_lg2_approx_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ll2d_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ll2d_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ll2d_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ll2d_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ll2d_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ll2d_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ll2d_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ll2d_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ll2f_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ll2f_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ll2f_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ll2f_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ll2f_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ll2f_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ll2f_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ll2f_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_lohi_i2d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_lohi_i2d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_max_i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_max_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_max_ll {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_max_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_max_ui {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_max_ui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_max_ull {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_max_ull";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_membar_cta {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_membar_cta";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_membar_gl {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_membar_gl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_membar_sys {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_membar_sys";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_min_i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_min_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_min_ll {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_min_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_min_ui {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_min_ui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_min_ull {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_min_ull";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_move_double {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.move.double";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_move_float {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.move.float";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_move_i16 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.move.i16";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_move_i32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.move.i32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_move_i64 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.move.i64";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_move_ptr {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.move.ptr";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, anonymous_283];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul24_i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul24_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul24_ui {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul24_ui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rm_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rm_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rm_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rm_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rm_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rm_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rn_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rn_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rn_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rn_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rn_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rn_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rp_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rp_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rp_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rp_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rp_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rp_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty, llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mul_rz_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mul_rz_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mulhi_i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mulhi_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mulhi_ll {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mulhi_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mulhi_ui {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mulhi_ui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_mulhi_ull {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_mulhi_ull";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_popc_i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_popc_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_popc_ll {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_popc_ll";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_prmt {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_prmt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_constant_to_gen {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.constant.to.gen";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_gen_to_constant {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.gen.to.constant";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_gen_to_global {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.gen.to.global";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_gen_to_local {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.gen.to.local";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_gen_to_param {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.gen.to.param";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_gen_to_shared {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.gen.to.shared";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_global_to_gen {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.global.to.gen";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_local_to_gen {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.local.to.gen";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ptr_shared_to_gen {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.ptr.shared.to.gen";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_approx_ftz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_approx_ftz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rm_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rm_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rm_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rm_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rm_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rm_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rn_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rn_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rn_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rn_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rn_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rn_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rp_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rp_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rp_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rp_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rp_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rp_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rcp_rz_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rcp_rz_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_ctaid_x {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_ctaid_x";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_ctaid_y {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_ctaid_y";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_ctaid_z {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_ctaid_z";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg0 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg0";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg0";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg1 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg1";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg1";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg10 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg10";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg10";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg11 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg11";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg11";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg12 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg12";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg12";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg13 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg13";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg13";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg14 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg14";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg14";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg15 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg15";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg15";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg16 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg16";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg16";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg17 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg17";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg17";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg18 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg18";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg18";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg19 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg19";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg19";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg2 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg2";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg2";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg20 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg20";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg20";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg21 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg21";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg21";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg22 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg22";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg22";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg23 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg23";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg23";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg24 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg24";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg24";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg25 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg25";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg25";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg26 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg26";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg26";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg27 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg27";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg27";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg28 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg28";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg28";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg29 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg29";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg29";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg3 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg3";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg3";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg30 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg30";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg30";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg31 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg31";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg31";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg4 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg4";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg4";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg5 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg5";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg5";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg6 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg6";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg6";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg7 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg7";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg7";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg8 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg8";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg8";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_envreg9 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.read.ptx.sreg.envreg9";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_envreg9";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_nctaid_x {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_nctaid_x";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_nctaid_y {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_nctaid_y";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_nctaid_z {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_nctaid_z";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_ntid_x {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_ntid_x";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_ntid_y {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_ntid_y";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_ntid_z {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_ntid_z";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_tid_x {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_tid_x";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_tid_y {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_tid_y";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_tid_z {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_tid_z";
  string NAME = ?;
}
def int_nvvm_read_ptx_sreg_warpsize {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_read_ptx_sreg_warpsize";
  string NAME = ?;
}
def int_nvvm_reflect {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.reflect";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rotate_b32 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.rotate.b32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_rotate_b32";
  string NAME = ?;
}
def int_nvvm_rotate_b64 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.rotate.b64";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_rotate_b64";
  string NAME = ?;
}
def int_nvvm_rotate_right_b64 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.rotate.right.b64";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_rotate_right_b64";
  string NAME = ?;
}
def int_nvvm_round_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_round_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_round_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_round_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_round_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_round_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rsqrt_approx_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rsqrt_approx_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rsqrt_approx_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rsqrt_approx_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_rsqrt_approx_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_rsqrt_approx_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sad_i {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sad_i";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sad_ui {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sad_ui";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_saturate_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_saturate_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_saturate_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_saturate_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_saturate_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_saturate_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sin_approx_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sin_approx_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sin_approx_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sin_approx_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_approx_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_approx_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_approx_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_approx_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rm_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rm_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rm_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rm_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rm_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rm_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rn_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rn_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rn_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rn_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rn_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rn_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rp_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rp_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rp_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rp_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rp_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rp_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rz_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rz_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_sqrt_rz_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_sqrt_rz_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v2i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_array_v4i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.array.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v2i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_1d_v4i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.1d.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v2i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_array_v4i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.array.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v2i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_2d_v4i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.2d.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i64_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i64_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i64_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v2i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i16_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i16_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i16_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i32_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i32_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i32_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i8_clamp {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i8_trap {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suld_3d_v4i8_zero {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.suld.3d.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_suq_array_size {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.suq.array.size";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_suq_array_size";
  string NAME = ?;
}
def int_nvvm_suq_channel_data_type {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.suq.channel.data.type";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_suq_channel_data_type";
  string NAME = ?;
}
def int_nvvm_suq_channel_order {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.suq.channel.order";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_suq_channel_order";
  string NAME = ?;
}
def int_nvvm_suq_depth {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.suq.depth";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_suq_depth";
  string NAME = ?;
}
def int_nvvm_suq_height {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.suq.height";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_suq_height";
  string NAME = ?;
}
def int_nvvm_suq_width {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.suq.width";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_suq_width";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v2i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v2i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_array_v4i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.array.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_array_v4i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v2i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v2i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_1d_v4i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.1d.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_1d_v4i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v2i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v2i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_array_v4i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.array.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_array_v4i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v2i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v2i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_2d_v4i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.2d.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_2d_v4i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i64_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i64.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i64_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i64_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i64.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i64_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i64_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i64.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i64_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v2i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v2i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v2i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i16_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i16.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i16_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i16_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i16.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i16_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i32_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i32.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i32_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i32_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i32.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i32_zero";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i8_clamp {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i8.clamp";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i8_clamp";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_b_3d_v4i8_zero {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.b.3d.v4i8.zero";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_b_3d_v4i8_zero";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_array_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.array.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_array_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_1d_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.1d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_1d_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_array_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.array.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_array_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_2d_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.2d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_2d_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_v2i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.v2i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_v2i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_v2i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.v2i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_v2i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_v2i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.v2i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_v2i8_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_v4i16_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.v4i16.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_v4i16_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_v4i32_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.v4i32.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_v4i32_trap";
  string NAME = ?;
}
def int_nvvm_sust_p_3d_v4i8_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.sust.p.3d.v4i8.trap";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_sust_p_3d_v4i8_trap";
  string NAME = ?;
}
def int_nvvm_swap_lo_hi_b64 {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.swap.lo.hi.b64";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_swap_lo_hi_b64";
  string NAME = ?;
}
def int_nvvm_tex_1d_array_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_array_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.array.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_1d_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.1d.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_array_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.array.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_2d_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.2d.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_3d_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.3d.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_array_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.array.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_array_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.array.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_array_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.array.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_array_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.array.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_array_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.array.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_array_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.array.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_cube_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.cube.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_array_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.array.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_1d_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.1d.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_array_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.array.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_2d_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.2d.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_grad_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.grad.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_grad_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.grad.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_grad_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.grad.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_v4f32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.v4f32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_v4s32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.v4s32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_3d_v4u32_s32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.3d.v4u32.s32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_array_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.array.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_array_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.array.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_array_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.array.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_array_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.array.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_array_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.array.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_array_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.array.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i32_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_level_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.level.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_level_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.level.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_level_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.level.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tex_unified_cube_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tex.unified.cube.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_texsurf_handle {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.texsurf.handle";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_metadata_ty, llvm_anyi64ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_texsurf_handle_internal {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.texsurf.handle.internal";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_a_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.a.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_a_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.a.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_a_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.a.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_b_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.b.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_b_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.b.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_b_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.b.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_g_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.g.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_g_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.g.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_g_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.g.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_r_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.r.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_r_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.r.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_r_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.r.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_a_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.a.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_a_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.a.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_a_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.a.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_b_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.b.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_b_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.b.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_b_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.b.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_g_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.g.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_g_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.g.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_g_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.g.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_r_2d_v4f32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.r.2d.v4f32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty, llvm_float_ty, llvm_float_ty, llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_r_2d_v4s32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.r.2d.v4s32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_tld4_unified_r_2d_v4u32_f32 {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.nvvm.tld4.unified.r.2d.v4u32.f32";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_float_ty, llvm_float_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_trunc_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_trunc_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_double_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_trunc_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_trunc_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_trunc_ftz_f {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_trunc_ftz_f";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_float_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_txq_array_size {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.txq.array.size";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_txq_array_size";
  string NAME = ?;
}
def int_nvvm_txq_channel_data_type {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.txq.channel.data.type";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_txq_channel_data_type";
  string NAME = ?;
}
def int_nvvm_txq_channel_order {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.txq.channel.order";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_txq_channel_order";
  string NAME = ?;
}
def int_nvvm_txq_depth {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.txq.depth";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_txq_depth";
  string NAME = ?;
}
def int_nvvm_txq_height {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.txq.height";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_txq_height";
  string NAME = ?;
}
def int_nvvm_txq_num_mipmap_levels {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.txq.num.mipmap.levels";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_txq_num_mipmap_levels";
  string NAME = ?;
}
def int_nvvm_txq_num_samples {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.txq.num.samples";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_txq_num_samples";
  string NAME = ?;
}
def int_nvvm_txq_width {	// SDPatternOperator Intrinsic GCCBuiltin
  string LLVMName = "llvm.nvvm.txq.width";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__nvvm_txq_width";
  string NAME = ?;
}
def int_nvvm_ui2d_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ui2d_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ui2d_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ui2d_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ui2d_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ui2d_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ui2d_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ui2d_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ui2f_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ui2f_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ui2f_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ui2f_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ui2f_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ui2f_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ui2f_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ui2f_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ull2d_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ull2d_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ull2d_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ull2d_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ull2d_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ull2d_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ull2d_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ull2d_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_double_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ull2f_rm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ull2f_rm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ull2f_rn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ull2f_rn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ull2f_rp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ull2f_rp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_nvvm_ull2f_rz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__nvvm_ull2f_rz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_float_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_objectsize {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i1_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_object_size";
  string NAME = ?;
}
def int_pcmarker {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_pow {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_20, anonymous_21];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_powi {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_17, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_dss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_dss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_dssall {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_dssall";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_dst {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_dst";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_dstst {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_dstst";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_dststt {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_dststt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_dstt {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_dstt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_lvebx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_lvehx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_lvewx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_lvsl {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_lvsr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_lvx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_lvxl {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_mfvscr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_mfvscr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_mtvscr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_mtvscr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_stvebx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_stvehx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_stvewx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_stvx {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_stvxl {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vaddcuw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vaddcuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vaddsbs {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vaddsbs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vaddshs {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vaddshs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vaddsws {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vaddsws";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vaddubs {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vaddubs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vadduhs {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vadduhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vadduws {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vadduws";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vavgsb {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vavgsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vavgsh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vavgsh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vavgsw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vavgsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vavgub {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vavgub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vavguh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vavguh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vavguw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vavguw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcfsx {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcfsx";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcfux {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcfux";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpbfp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpbfp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpbfp_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpbfp_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpeqfp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpeqfp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpeqfp_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpeqfp_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpequb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpequb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpequb_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpequb_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpequh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpequh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpequh_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpequh_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpequw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpequw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpequw_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpequw_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgefp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgefp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgefp_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgefp_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtfp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtfp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtfp_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtfp_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtsb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtsb_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtsb_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtsh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtsh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtsh_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtsh_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtsw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtsw_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtsw_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtub {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtub_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtub_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtuh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtuh_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtuh_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtuw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vcmpgtuw_p {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vcmpgtuw_p";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vctsxs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vctsxs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vctuxs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vctuxs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vexptefp {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_FF_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vexptefp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vlogefp {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_FF_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vlogefp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmaddfp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmaddfp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmaxfp {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_FFF_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmaxfp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmaxsb {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmaxsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmaxsh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmaxsh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmaxsw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmaxsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmaxub {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmaxub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmaxuh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmaxuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmaxuw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmaxuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmhaddshs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmhaddshs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmhraddshs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmhraddshs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vminfp {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_FFF_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vminfp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vminsb {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vminsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vminsh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vminsh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vminsw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vminsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vminub {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vminub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vminuh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vminuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vminuw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vminuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmladduhm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmladduhm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmsummbm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmsummbm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmsumshm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmsumshm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmsumshs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmsumshs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmsumubm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmsumubm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmsumuhm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmsumuhm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmsumuhs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmsumuhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmulesb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmulesb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmulesh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmulesh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmuleub {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmuleub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmuleuh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmuleuh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmulosb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmulosb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmulosh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmulosh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmuloub {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmuloub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vmulouh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vmulouh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vnmsubfp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vnmsubfp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vperm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vperm_4si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vpkpx {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vpkpx";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vpkshss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vpkshss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vpkshus {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vpkshus";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vpkswss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vpkswss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vpkswus {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vpkswus";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vpkuhus {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vpkuhus";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vpkuwus {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vpkuwus";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrefp {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_FF_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrefp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrfim {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrfim";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrfin {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrfin";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrfip {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrfip";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrfiz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrfiz";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrlb {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrlb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrlh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrlh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrlw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrlw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vrsqrtefp {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_FF_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vrsqrtefp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsel {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsel_4si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsl {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsl";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vslb {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vslb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vslh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vslh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vslo {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vslo";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vslw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vslw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsr {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsrab {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsrab";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsrah {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsrah";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsraw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsraw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsrb {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsrb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsrh {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsrh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsro {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsro";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsrw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsrw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsubcuw {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsubcuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsubsbs {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsubsbs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsubshs {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsubshs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsubsws {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsubsws";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsububs {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_BBB_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsububs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsubuhs {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_HHH_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsubuhs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsubuws {	// GCCBuiltin SDPatternOperator Intrinsic PowerPC_Vec_Intrinsic PowerPC_Vec_WWW_Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsubuws";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsum2sws {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsum2sws";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsum4sbs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsum4sbs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsum4shs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsum4shs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsum4ubs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsum4ubs";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vsumsws {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vsumsws";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vupkhpx {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vupkhpx";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vupkhsb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vupkhsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vupkhsh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vupkhsh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vupklpx {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vupklpx";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vupklsb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vupklsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_altivec_vupklsh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_altivec_vupklsh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_dcba {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_dcbf {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_dcbi {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_dcbst {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_dcbt {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_62];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_dcbtst {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_dcbz {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_dcbzl {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_is_decremented_ctr_nonzero {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [llvm_i1_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_mtctr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyint_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ppc_sync {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "ppc";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_prefetch {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem, anonymous_2];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ptr_annotation {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.ptr.annotation";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [anonymous_42];
  list<LLVMType> ParamTypes = [anonymous_43, llvm_ptr_ty, llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ptx_bar_sync {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_bar_sync";
  string NAME = ?;
}
def int_ptx_read_clock {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_clock";
  string NAME = ?;
}
def int_ptx_read_clock64 {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r64
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_clock64";
  string NAME = ?;
}
def int_ptx_read_ctaid_w {	// SDPatternOperator Intrinsic GCCBuiltin _w
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_ctaid_w";
  string NAME = "int_ptx_read_ctaid";
}
def int_ptx_read_ctaid_x {	// SDPatternOperator Intrinsic GCCBuiltin _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_ctaid_x";
  string NAME = "int_ptx_read_ctaid";
}
def int_ptx_read_ctaid_y {	// SDPatternOperator Intrinsic GCCBuiltin _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_ctaid_y";
  string NAME = "int_ptx_read_ctaid";
}
def int_ptx_read_ctaid_z {	// SDPatternOperator Intrinsic GCCBuiltin _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_ctaid_z";
  string NAME = "int_ptx_read_ctaid";
}
def int_ptx_read_gridid {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_gridid";
  string NAME = ?;
}
def int_ptx_read_laneid {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_laneid";
  string NAME = ?;
}
def int_ptx_read_lanemask_eq {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_lanemask_eq";
  string NAME = ?;
}
def int_ptx_read_lanemask_ge {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_lanemask_ge";
  string NAME = ?;
}
def int_ptx_read_lanemask_gt {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_lanemask_gt";
  string NAME = ?;
}
def int_ptx_read_lanemask_le {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_lanemask_le";
  string NAME = ?;
}
def int_ptx_read_lanemask_lt {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_lanemask_lt";
  string NAME = ?;
}
def int_ptx_read_nctaid_w {	// SDPatternOperator Intrinsic GCCBuiltin _w
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_nctaid_w";
  string NAME = "int_ptx_read_nctaid";
}
def int_ptx_read_nctaid_x {	// SDPatternOperator Intrinsic GCCBuiltin _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_nctaid_x";
  string NAME = "int_ptx_read_nctaid";
}
def int_ptx_read_nctaid_y {	// SDPatternOperator Intrinsic GCCBuiltin _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_nctaid_y";
  string NAME = "int_ptx_read_nctaid";
}
def int_ptx_read_nctaid_z {	// SDPatternOperator Intrinsic GCCBuiltin _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_nctaid_z";
  string NAME = "int_ptx_read_nctaid";
}
def int_ptx_read_nsmid {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_nsmid";
  string NAME = ?;
}
def int_ptx_read_ntid_w {	// SDPatternOperator Intrinsic GCCBuiltin _w
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_ntid_w";
  string NAME = "int_ptx_read_ntid";
}
def int_ptx_read_ntid_x {	// SDPatternOperator Intrinsic GCCBuiltin _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_ntid_x";
  string NAME = "int_ptx_read_ntid";
}
def int_ptx_read_ntid_y {	// SDPatternOperator Intrinsic GCCBuiltin _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_ntid_y";
  string NAME = "int_ptx_read_ntid";
}
def int_ptx_read_ntid_z {	// SDPatternOperator Intrinsic GCCBuiltin _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_ntid_z";
  string NAME = "int_ptx_read_ntid";
}
def int_ptx_read_nwarpid {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_nwarpid";
  string NAME = ?;
}
def int_ptx_read_pm0 {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_pm0";
  string NAME = ?;
}
def int_ptx_read_pm1 {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_pm1";
  string NAME = ?;
}
def int_ptx_read_pm2 {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_pm2";
  string NAME = ?;
}
def int_ptx_read_pm3 {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_pm3";
  string NAME = ?;
}
def int_ptx_read_smid {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_smid";
  string NAME = ?;
}
def int_ptx_read_tid_w {	// SDPatternOperator Intrinsic GCCBuiltin _w
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_tid_w";
  string NAME = "int_ptx_read_tid";
}
def int_ptx_read_tid_x {	// SDPatternOperator Intrinsic GCCBuiltin _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_tid_x";
  string NAME = "int_ptx_read_tid";
}
def int_ptx_read_tid_y {	// SDPatternOperator Intrinsic GCCBuiltin _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_tid_y";
  string NAME = "int_ptx_read_tid";
}
def int_ptx_read_tid_z {	// SDPatternOperator Intrinsic GCCBuiltin _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_tid_z";
  string NAME = "int_ptx_read_tid";
}
def int_ptx_read_warpid {	// SDPatternOperator Intrinsic GCCBuiltin PTXReadSpecialRegisterIntrinsic_r32
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_ptx_read_warpid";
  string NAME = ?;
}
def int_r600_read_global_size_x {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_global_size_x";
  string NAME = "int_r600_read_global_size";
}
def int_r600_read_global_size_y {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_global_size_y";
  string NAME = "int_r600_read_global_size";
}
def int_r600_read_global_size_z {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_global_size_z";
  string NAME = "int_r600_read_global_size";
}
def int_r600_read_local_size_x {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_local_size_x";
  string NAME = "int_r600_read_local_size";
}
def int_r600_read_local_size_y {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_local_size_y";
  string NAME = "int_r600_read_local_size";
}
def int_r600_read_local_size_z {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_local_size_z";
  string NAME = "int_r600_read_local_size";
}
def int_r600_read_ngroups_x {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_ngroups_x";
  string NAME = "int_r600_read_ngroups";
}
def int_r600_read_ngroups_y {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_ngroups_y";
  string NAME = "int_r600_read_ngroups";
}
def int_r600_read_ngroups_z {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_ngroups_z";
  string NAME = "int_r600_read_ngroups";
}
def int_r600_read_tgid_x {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_tgid_x";
  string NAME = "int_r600_read_tgid";
}
def int_r600_read_tgid_y {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_tgid_y";
  string NAME = "int_r600_read_tgid";
}
def int_r600_read_tgid_z {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_tgid_z";
  string NAME = "int_r600_read_tgid";
}
def int_r600_read_tidig_x {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _x
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_tidig_x";
  string NAME = "int_r600_read_tidig";
}
def int_r600_read_tidig_y {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _y
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_tidig_y";
  string NAME = "int_r600_read_tidig";
}
def int_r600_read_tidig_z {	// SDPatternOperator Intrinsic GCCBuiltin R600ReadPreloadRegisterIntrinsic _z
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "r600";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_r600_read_tidig_z";
  string NAME = "int_r600_read_tidig";
}
def int_read_register {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.read_register";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty];
  list<LLVMType> ParamTypes = [llvm_metadata_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_readcyclecounter {	// SDPatternOperator Intrinsic
  list<LLVMType> Intrinsic:param_types = [];
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_returnaddress {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_rint {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_33];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_round {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_35];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_sadd_with_overflow {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty, llvm_i1_ty];
  list<LLVMType> ParamTypes = [anonymous_46, anonymous_47];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_setjmp {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_siglongjmp {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoReturn];
  bit isTarget = 0;
  string NAME = ?;
}
def int_sigsetjmp {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_sin {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_18];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_smul_with_overflow {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty, llvm_i1_ty];
  list<LLVMType> ParamTypes = [anonymous_54, anonymous_55];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_sqrt {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_16];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_ssub_with_overflow {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty, llvm_i1_ty];
  list<LLVMType> ParamTypes = [anonymous_50, anonymous_51];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_stackprotector {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptrptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_stackprotectorcheck {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptrptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_stackrestore {	// SDPatternOperator Intrinsic GCCBuiltin
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_stack_restore";
  string NAME = ?;
}
def int_stacksave {	// SDPatternOperator Intrinsic GCCBuiltin
  list<LLVMType> Intrinsic:param_types = [];
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_stack_save";
  string NAME = ?;
}
def int_trap {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoReturn];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_trap";
  string NAME = ?;
}
def int_trunc {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyfloat_ty];
  list<LLVMType> ParamTypes = [anonymous_32];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_uadd_with_overflow {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty, llvm_i1_ty];
  list<LLVMType> ParamTypes = [anonymous_48, anonymous_49];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_umul_with_overflow {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty, llvm_i1_ty];
  list<LLVMType> ParamTypes = [anonymous_56, anonymous_57];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_usub_with_overflow {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_anyint_ty, llvm_i1_ty];
  list<LLVMType> ParamTypes = [anonymous_52, anonymous_53];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_vacopy {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.va_copy";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_vaend {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.va_end";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_var_annotation {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.var.annotation";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_ptr_ty, llvm_ptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_vastart {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.va_start";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_write_register {	// SDPatternOperator Intrinsic
  string LLVMName = "llvm.write_register";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_metadata_ty, llvm_anyint_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pavgusb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pavgusb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pf2id {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pf2id";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfacc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfadd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfadd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfcmpeq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfcmpeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfcmpge {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfcmpge";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfcmpgt {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfcmpgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfmax {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfmax";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfmin {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfmin";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfmul {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfmul";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfrcp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfrcp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfrcpit1 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfrcpit1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfrcpit2 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfrcpit2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfrsqit1 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfrsqit1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfrsqrt {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfrsqrt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfsub {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfsub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pfsubr {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfsubr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pi2fd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pi2fd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnow_pmulhrw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhrw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnowa_pf2iw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pf2iw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnowa_pfnacc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfnacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnowa_pfpnacc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pfpnacc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnowa_pi2fw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pi2fw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_3dnowa_pswapd {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_aesni_aesdec {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_aesdec128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_aesni_aesdeclast {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_aesdeclast128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_aesni_aesenc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_aesenc128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_aesni_aesenclast {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_aesenclast128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_aesni_aesimc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_aesimc128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_aesni_aeskeygenassist {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_aeskeygenassist128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_d_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherd_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_ptr_ty, llvm_v4i32_ty, llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_d_d_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherd_d256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_ptr_ty, llvm_v8i32_ty, llvm_v8i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_d_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherd_pd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_ptr_ty, llvm_v4i32_ty, llvm_v2f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_d_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherd_pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_ptr_ty, llvm_v4i32_ty, llvm_v4f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_d_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherd_ps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_ptr_ty, llvm_v4i32_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_d_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherd_ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_ptr_ty, llvm_v8i32_ty, llvm_v8f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_d_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherd_q";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_ptr_ty, llvm_v4i32_ty, llvm_v2i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_d_q_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherd_q256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_ptr_ty, llvm_v4i32_ty, llvm_v4i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_q_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherq_d";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_ptr_ty, llvm_v2i64_ty, llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_q_d_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherq_d256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_ptr_ty, llvm_v4i64_ty, llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_q_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherq_pd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_ptr_ty, llvm_v2i64_ty, llvm_v2f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_q_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherq_pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_ptr_ty, llvm_v4i64_ty, llvm_v4f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_q_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherq_ps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_ptr_ty, llvm_v2i64_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_q_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherq_ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_ptr_ty, llvm_v4i64_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_q_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherq_q";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_ptr_ty, llvm_v2i64_ty, llvm_v2i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_gather_q_q_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherq_q256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_ptr_ty, llvm_v4i64_ty, llvm_v4i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_maskload_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskloadd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_maskload_d_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskloadd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_maskload_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskloadq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_maskload_q_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskloadq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_maskstore_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskstored";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_maskstore_d_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskstored256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_maskstore_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskstoreq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_maskstore_q_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskstoreq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4i64_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_movntdqa {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movntdqa256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_mpsadbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_mpsadbw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pabs_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pabs_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pabs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_packssdw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packssdw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_packsswb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packsswb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_packusdw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packusdw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_packuswb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packuswb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_padds_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddsb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_padds_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_paddus_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddusb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_paddus_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddusw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pavg_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pavgb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pavg_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pavgw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pblendd_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pblendd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pblendd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pblendd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pblendvb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pblendvb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pblendw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pblendw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pbroadcastb_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pbroadcastb_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pbroadcastd_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pbroadcastd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pbroadcastq_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pbroadcastq_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pbroadcastw_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pbroadcastw_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_permd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_permvarsi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_permps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_permvarsf256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_phadd_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_phadd_sw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_phadd_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_phsub_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_phsub_sw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_phsub_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmadd_ub_sw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaddubsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmadd_wd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaddwd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmaxs_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmaxs_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmaxs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmaxu_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxub256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmaxu_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxud256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmaxu_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxuw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmins_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmins_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmins_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pminu_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminub256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pminu_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminud256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pminu_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminuw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovmskb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovmskb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovsxbd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxbd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovsxbq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxbq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovsxbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxbw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovsxdq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxdq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovsxwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxwd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovsxwq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxwq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovzxbd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxbd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovzxbq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxbq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovzxbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxbw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovzxdq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxdq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovzxwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxwd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmovzxwq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxwq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmul_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmuldq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmul_hr_sw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhrsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmulh_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmulhu_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhuw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pmulu_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmuludq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psad_bw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psadbw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pshuf_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pshufb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psign_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psign_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psign_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psll_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslld256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psll_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldqi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psll_dq_bs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldqi256_byteshift";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psll_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psll_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pslli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pslli_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllqi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_pslli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllwi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psllv_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllv4si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psllv_d_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllv8si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psllv_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllv2di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psllv_q_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllv4di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psra_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrad256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psra_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psraw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrai_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psradi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrai_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrawi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrav_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrav4si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrav_d_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrav8si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrl_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrld256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrl_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldqi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrl_dq_bs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldqi256_byteshift";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrl_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrl_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrli_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlqi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlwi256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrlv_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlv4si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrlv_d_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlv8si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrlv_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlv2di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psrlv_q_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlv4di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psubs_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubsb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psubs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubsw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psubus_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubusb256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_v32i8_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_psubus_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubusw256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_vbroadcast_sd_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastsd_pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_vbroadcast_ss_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastss_ps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_vbroadcast_ss_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastss_ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_vbroadcasti128 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_vextracti128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_extract128i256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_vinserti128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_insert128i256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v2i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx2_vperm2i128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_permti256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v4i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvtsd2usi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsd2usi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvtsd2usi64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsd2usi64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvtss2usi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtss2usi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvtss2usi64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtss2usi64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvttsd2usi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttsd2usi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvttsd2usi64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttsd2usi64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvttss2usi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttss2usi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvttss2usi64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttss2usi64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvtusi2sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtusi2sd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvtusi2ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtusi2ss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvtusi642sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtusi642sd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_cvtusi642ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtusi642ss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gather_dpd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gathersiv8df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_ptr_ty, llvm_v8i32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gather_dpi_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gathersiv16si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_ptr_ty, llvm_v16i32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gather_dpq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gathersiv8di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_ptr_ty, llvm_v8i32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gather_dps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gathersiv16sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_ptr_ty, llvm_v16i32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gather_qpd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherdiv8df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_ptr_ty, llvm_v8i64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gather_qpi_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherdiv16si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_ptr_ty, llvm_v8i64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gather_qpq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherdiv8di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_ptr_ty, llvm_v8i64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gather_qps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherdiv16sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_ptr_ty, llvm_v8i64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gatherpf_dpd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherpfdpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i8_ty, llvm_v8i32_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gatherpf_dps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherpfdps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_v16i32_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gatherpf_qpd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherpfqpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i8_ty, llvm_v8i64_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_gatherpf_qps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_gatherpfqps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i8_ty, llvm_v8i64_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_kand_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_kandhi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_kandn_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_kandnhi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_knot_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_knothi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_kor_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_korhi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_kortestc_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_kortestchi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_kortestz_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_kortestzhi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_kunpck_bw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_kunpckhi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_kxnor_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_kxnorhi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_kxor_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_kxorhi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_blend_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendmd_512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_blend_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendmpd_512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_blend_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendmps_512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_blend_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendmq_512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cmp_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cmppd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_i32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cmp_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cmpps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_i32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_conflict_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpconflictsi_512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_conflict_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpconflictdi_512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtdq2pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtdq2pd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtdq2ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtdq2ps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16f32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtpd2dq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpd2dq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8i32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtpd2ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpd2ps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtpd2udq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpd2udq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8i32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtps2dq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtps2dq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16i32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtps2udq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtps2udq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16i32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvttpd2dq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttpd2dq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8i32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvttpd2udq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttpd2udq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8i32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvttps2dq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttps2dq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16i32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvttps2udq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttps2udq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16i32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtudq2pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtudq2pd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_cvtudq2ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtudq2ps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16f32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_loadu_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_loaddqusi512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_loadu_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_loadupd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_loadu_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_loadups512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v16f32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_loadu_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_loaddqudi512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_lzcnt_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vplzcntd_512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_lzcnt_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vplzcntq_512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_max_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maxpd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_v8f64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_max_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maxps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_v16f32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_min_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_minpd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_v8f64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_min_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_minps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_v16f32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pabs_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pabs_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pand_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pandd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pand_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pandq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pbroadcast_d_gpr_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastd512_gpr_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pbroadcast_q_gpr_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastq512_gpr_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pbroadcast_q_mem_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastq512_mem_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pcmpeq_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpeqd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pcmpeq_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpeqq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pmaxs_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pmaxs_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pmaxu_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxud512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pmaxu_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxuq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pmins_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pmins_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pminu_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminud512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pminu_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminuq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pmul_dq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmuldq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_pmulu_dq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmuludq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_ptestm_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ptestmd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_ptestm_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ptestmq512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_rndscale_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rndscalepd_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_i32_ty, llvm_v8f64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_rndscale_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rndscaleps_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_i32_ty, llvm_v16f32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_storeu_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storedqusi512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_storeu_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storeupd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_storeu_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storeups512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v16f32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_storeu_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storedqudi512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_vcvtph2ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vcvtph2ps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty, llvm_v16f32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_vcvtps2ph_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vcvtps2ph512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_i32_ty, llvm_v16i16_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_vpermt_d_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermt2vard512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16i32_ty, llvm_v16i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_vpermt_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermt2varpd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8f64_ty, llvm_v8f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_vpermt_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermt2varps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i32_ty, llvm_v16f32_ty, llvm_v16f32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_mask_vpermt_q_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermt2varq512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_v8i64_ty, llvm_v8i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_movntdqa {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movntdqa512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pbroadcastd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pbroadcastd_i32_512 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pbroadcastq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pbroadcastq512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pbroadcastq_i64_512 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pmovzxbd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxbd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pmovzxbq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxbq512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pmovzxdq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxdq512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pmovzxwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxwd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_pmovzxwq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxwq512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_psll_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldqi512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_psll_dq_bs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldqi512_byteshift";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_psrl_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldqi512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_psrl_dq_bs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldqi512_byteshift";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rcp14_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcp14pd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rcp14_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcp14ps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rcp14_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcp14sd_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rcp14_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcp14ss_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rcp28_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcp28pd_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rcp28_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcp28ps_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rcp28_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcp28sd_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rcp28_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcp28ss_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rndscale_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rndscalesd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rndscale_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rndscaless";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rsqrt14_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrt14pd512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rsqrt14_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrt14ps512_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rsqrt14_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrt14sd_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rsqrt14_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrt14ss_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rsqrt28_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrt28pd_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rsqrt28_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrt28ps_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rsqrt28_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrt28sd_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_rsqrt28_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrt28ss_mask";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty, llvm_i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatter_dpd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scattersiv8df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i8_ty, llvm_v8i32_ty, llvm_v8f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatter_dpi_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scattersiv16si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i16_ty, llvm_v16i32_ty, llvm_v16i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatter_dpq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scattersiv8di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i8_ty, llvm_v8i32_ty, llvm_v8i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatter_dps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scattersiv16sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i16_ty, llvm_v16i32_ty, llvm_v16f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatter_qpd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scatterdiv8df";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i8_ty, llvm_v8i64_ty, llvm_v8f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatter_qpi_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scatterdiv16si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i8_ty, llvm_v8i64_ty, llvm_v8i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatter_qpq_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scatterdiv8di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i8_ty, llvm_v8i64_ty, llvm_v8i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatter_qps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scatterdiv16sf";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i8_ty, llvm_v8i64_ty, llvm_v8f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatterpf_dpd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scatterpfdpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i8_ty, llvm_v8i32_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatterpf_dps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scatterpfdps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i16_ty, llvm_v16i32_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatterpf_qpd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scatterpfqpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i8_ty, llvm_v8i64_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_scatterpf_qps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_scatterpfqps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i8_ty, llvm_v8i64_ty, llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_sqrt_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtpd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_sqrt_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtps512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_sqrt_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtrndsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_sqrt_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtrndss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_vbroadcast_sd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastsd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_vbroadcast_sd_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastsd_pd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_vbroadcast_ss_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastss512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx512_vbroadcast_ss_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastss_ps512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_addsub_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_addsubpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_addsub_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_addsubps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_blend_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_blend_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_blendv_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendvpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_blendv_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendvps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cmp_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cmppd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cmp_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cmpps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cvt_pd2_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpd2ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cvt_pd2dq_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpd2dq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cvt_ps2_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtps2pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cvt_ps2dq_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtps2dq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cvtdq2_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtdq2pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cvtdq2_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtdq2ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cvtt_pd2dq_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttpd2dq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_cvtt_ps2dq_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttps2dq256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_dp_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_dpps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_hadd_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_haddpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_hadd_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_haddps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_hsub_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_hsubpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_hsub_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_hsubps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_ldu_dq_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_lddqu256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v32i8_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_maskload_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskloadpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_maskload_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskloadpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_maskload_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskloadps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_maskload_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskloadps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_maskstore_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskstorepd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_maskstore_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskstorepd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_maskstore_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskstoreps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_maskstore_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskstoreps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_max_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maxpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_max_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maxps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_min_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_minpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_min_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_minps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_movmsk_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movmskpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_movmsk_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movmskps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_ptestc_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ptestc256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_ptestnzc_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ptestnzc256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_ptestz_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ptestz256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_rcp_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcpps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_round_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_roundpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_round_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_roundps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_rsqrt_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrtps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_sqrt_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_sqrt_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_storeu_dq_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storedqu256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v32i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_storeu_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storeupd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_storeu_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storeups256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vbroadcastf128_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastf128_pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vbroadcastf128_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vbroadcastf128_ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vextractf128_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vextractf128_pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vextractf128_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vextractf128_ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vextractf128_si_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vextractf128_si256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vinsertf128_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vinsertf128_pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v2f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vinsertf128_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vinsertf128_ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vinsertf128_si_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vinsertf128_si256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vperm2f128_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vperm2f128_pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vperm2f128_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vperm2f128_ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vperm2f128_si_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vperm2f128_si256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i32_ty, llvm_v8i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vpermilvar_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermilvarpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vpermilvar_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermilvarpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vpermilvar_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermilvarps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vpermilvar_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermilvarps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestc_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestcpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestc_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestcpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestc_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestcps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestc_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestcps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestnzc_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestnzcpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestnzc_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestnzcpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestnzc_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestnzcps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestnzc_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestnzcps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestz_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestzpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestz_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestzpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestz_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestzps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vtestz_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vtestzps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vzeroall {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vzeroall";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_avx_vzeroupper {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vzeroupper";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_bmi_bextr_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_bextr_u32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_bmi_bextr_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_bextr_u64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_bmi_bzhi_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_bzhi_si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_bmi_bzhi_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_bzhi_di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_bmi_pdep_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pdep_si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_bmi_pdep_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pdep_di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_bmi_pext_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pext_si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_bmi_pext_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pext_di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmadd_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmadd_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmadd_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddpd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_v8f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmadd_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmadd_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmadd_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddps512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_v16f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmadd_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmadd_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmaddsub_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddsubpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmaddsub_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddsubpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmaddsub_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddsubpd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_v8f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmaddsub_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddsubps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmaddsub_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddsubps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmaddsub_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmaddsubps512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_v16f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsub_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsub_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsub_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubpd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_v8f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsub_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsub_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsub_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubps512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_v16f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsub_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsub_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsubadd_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubaddpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsubadd_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubaddpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsubadd_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubaddpd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_v8f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsubadd_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubaddps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsubadd_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubaddps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfmsubadd_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfmsubaddps512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_v16f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmadd_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmaddpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmadd_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmaddpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmadd_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmaddpd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_v8f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmadd_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmaddps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmadd_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmaddps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmadd_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmaddps512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_v16f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmadd_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmaddsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmadd_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmaddss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmsub_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmsubpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmsub_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmsubpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmsub_pd_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmsubpd512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f64_ty];
  list<LLVMType> ParamTypes = [llvm_v8f64_ty, llvm_v8f64_ty, llvm_v8f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmsub_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmsubps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmsub_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmsubps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmsub_ps_512 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmsubps512";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16f32_ty];
  list<LLVMType> ParamTypes = [llvm_v16f32_ty, llvm_v16f32_ty, llvm_v16f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmsub_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmsubsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_fma_vfnmsub_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfnmsubss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_int {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i8_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_emms {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_emms";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_femms {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_femms";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_maskmovq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskmovq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_movnt_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movntq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptrx86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_packssdw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packssdw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_packsswb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packsswb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_packuswb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packuswb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_padd_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_padd_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_padd_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_padd_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_padds_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_padds_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_paddus_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddusb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_paddus_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddusw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_palignr_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_palignr";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pand {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pand";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pandn {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pandn";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pavg_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pavgb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pavg_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pavgw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pcmpeq_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpeqb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pcmpeq_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpeqd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pcmpeq_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpeqw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pcmpgt_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpgtb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pcmpgt_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpgtd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pcmpgt_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpgtw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pextr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vec_ext_v4hi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pinsr_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vec_set_v4hi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmadd_wd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaddwd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmaxs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmaxu_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmins_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pminu_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmovmskb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovmskb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmulh_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmulhu_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmull_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmullw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pmulu_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmuludq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_por {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_por";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psad_bw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psadbw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psll_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslld";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psll_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psll_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pslli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pslli_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pslli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllwi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psra_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrad";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psra_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psraw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psrai_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psradi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psrai_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrawi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psrl_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrld";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psrl_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psrl_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psrli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psrli_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psrli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlwi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psub_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psub_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psub_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psub_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psubs_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psubs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psubus_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubusb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_psubus_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubusw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_punpckhbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_punpckhbw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_punpckhdq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_punpckhdq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_punpckhwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_punpckhwd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_punpcklbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_punpcklbw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_punpckldq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_punpckldq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_punpcklwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_punpcklwd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_mmx_pxor {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pxor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_pclmulqdq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pclmulqdq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdfsbase_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rdfsbase32";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdfsbase_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rdfsbase64";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdgsbase_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rdgsbase32";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdgsbase_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rdgsbase64";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdpmc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rdpmc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdrand_16 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdrand_32 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdrand_64 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdseed_16 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i16_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdseed_32 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdseed_64 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdtsc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rdtsc";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_rdtscp {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rdtscp";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sha1msg1 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sha1msg1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sha1msg2 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sha1msg2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sha1nexte {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sha1nexte";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sha1rnds4 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sha1rnds4";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sha256msg1 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sha256msg1";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sha256msg2 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sha256msg2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sha256rnds2 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sha256rnds2";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_add_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_addsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_clflush {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_clflush";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cmp_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cmppd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cmp_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cmpsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_comieq_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comisdeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_comige_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comisdge";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_comigt_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comisdgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_comile_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comisdle";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_comilt_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comisdlt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_comineq_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comisdneq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtdq2pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtdq2pd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtdq2ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtdq2ps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtpd2dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpd2dq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtpd2ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpd2ps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtps2dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtps2dq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtps2pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtps2pd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtsd2si {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsd2si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtsd2si64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsd2si64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtsd2ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsd2ss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtsi2sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsi2sd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtsi642sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsi642sd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvtss2sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtss2sd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvttpd2dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttpd2dq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvttps2dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttps2dq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvttsd2si {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttsd2si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_cvttsd2si64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttsd2si64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_div_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_divsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_lfence {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_lfence";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_maskmov_dqu {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maskmovdqu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_max_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maxpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_max_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maxsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_mfence {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_mfence";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_min_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_minpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_min_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_minsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_movmsk_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movmskpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_mul_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_mulsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_packssdw_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packssdw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_packsswb_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packsswb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_packuswb_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packuswb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_padds_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddsb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_padds_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_paddus_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddusb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_paddus_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_paddusw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pause {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pause";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pavg_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pavgb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pavg_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pavgw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pmadd_wd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaddwd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pmaxs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pmaxu_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxub128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pmins_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pminu_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminub128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pmovmskb_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovmskb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pmulh_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pmulhu_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhuw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pmulu_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmuludq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psad_bw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psadbw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pshuf_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pshufd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pshufh_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pshufhw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pshufl_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pshuflw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psll_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslld128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psll_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldqi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psll_dq_bs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldqi128_byteshift";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psll_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psll_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pslli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pslldi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pslli_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllqi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_pslli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psllwi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psra_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrad128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psra_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psraw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrai_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psradi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrai_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrawi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrl_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrld128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrl_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldqi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrl_dq_bs {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldqi128_byteshift";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrl_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrl_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrli_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrldi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrli_q {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlqi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psrli_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psrlwi128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psubs_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubsb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psubs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psubus_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubusb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_psubus_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psubusw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_sqrt_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_sqrt_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_storel_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storelv4si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_storeu_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storedqu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_storeu_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storeupd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_sub_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_subsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_ucomieq_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomisdeq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_ucomige_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomisdge";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_ucomigt_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomisdgt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_ucomile_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomisdle";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_ucomilt_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomisdlt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse2_ucomineq_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomisdneq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_addsub_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_addsubpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_addsub_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_addsubps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_hadd_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_haddpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_hadd_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_haddps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_hsub_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_hsubpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_hsub_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_hsubps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_ldu_dq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_lddqu";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_monitor {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_monitor";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse3_mwait {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_mwait";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_blendpd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_blendps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_blendvpd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendvpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_blendvps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_blendvps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_dppd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_dppd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_dpps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_dpps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_extractps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_extractps128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_insertps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_insertps128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_movntdqa {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movntdqa";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_mpsadbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_mpsadbw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_packusdw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_packusdw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pblendvb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pblendvb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pblendw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pblendw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pextrb {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pextrd {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pextrq {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_phminposuw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phminposuw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmaxsb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmaxsd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxsd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmaxud {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxud128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmaxuw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaxuw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pminsb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pminsd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminsd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pminud {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminud128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pminuw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pminuw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovsxbd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxbd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovsxbq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxbq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovsxbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxbw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovsxdq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxdq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovsxwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxwd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovsxwq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovsxwq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovzxbd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxbd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovzxbq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxbq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovzxbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxbw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovzxdq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxdq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovzxwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxwd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmovzxwq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmovzxwq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_pmuldq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmuldq128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_ptestc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ptestc128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_ptestnzc {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ptestnzc128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_ptestz {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ptestz128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_round_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_roundpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_round_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_roundps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_round_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_roundsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse41_round_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_roundss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_crc32_32_16 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_crc32hi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_crc32_32_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_crc32si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_crc32_32_8 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_crc32qi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_crc32_64_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_crc32di";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpestri128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpestri128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_v16i8_ty, llvm_i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpestria128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpestria128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_v16i8_ty, llvm_i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpestric128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpestric128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_v16i8_ty, llvm_i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpestrio128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpestrio128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_v16i8_ty, llvm_i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpestris128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpestris128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_v16i8_ty, llvm_i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpestriz128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpestriz128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_v16i8_ty, llvm_i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpestrm128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpestrm128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i32_ty, llvm_v16i8_ty, llvm_i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpistri128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpistri128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpistria128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpistria128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpistric128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpistric128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpistrio128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpistrio128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpistris128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpistris128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpistriz128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpistriz128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse42_pcmpistrm128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pcmpistrm128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse4a_extrq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_extrq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse4a_extrqi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_extrqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse4a_insertq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_insertq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse4a_insertqi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_insertqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse4a_movnt_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movntsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse4a_movnt_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movntss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_add_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_addss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cmp_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cmpps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cmp_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cmpss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_comieq_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comieq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_comige_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comige";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_comigt_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comigt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_comile_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comile";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_comilt_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comilt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_comineq_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_comineq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvtpd2pi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpd2pi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvtpi2pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpi2pd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvtpi2ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtpi2ps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvtps2pi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtps2pi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvtsi2ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsi2ss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvtsi642ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtsi642ss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvtss2si {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtss2si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvtss2si64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvtss2si64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvttpd2pi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttpd2pi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvttps2pi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttps2pi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvttss2si {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttss2si";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_cvttss2si64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_cvttss2si64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_div_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_divss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_ldmxcsr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_max_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maxps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_max_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_maxss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_min_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_minps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_min_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_minss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_movmsk_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_movmskps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_mul_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_mulss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_pshuf_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pshufw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_rcp_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcpps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_rcp_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rcpss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_rsqrt_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrtps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_rsqrt_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_rsqrtss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_sfence {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sfence";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_sqrt_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_sqrt_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_sqrtss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_stmxcsr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_storeu_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_storeups";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_ptr_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrReadWriteArgMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_sub_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_subss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_ucomieq_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomieq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_ucomige_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomige";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_ucomigt_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomigt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_ucomile_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomile";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_ucomilt_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomilt";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_sse_ucomineq_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_ucomineq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pabs_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pabs_b_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pabs_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pabs_d_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pabs_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pabs_w_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pabsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phadd_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phadd_d_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phadd_sw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phadd_sw_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phadd_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phadd_w_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phaddw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phsub_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phsub_d_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phsub_sw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phsub_sw_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phsub_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_phsub_w_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_phsubw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pmadd_ub_sw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaddubsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pmadd_ub_sw_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmaddubsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pmul_hr_sw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhrsw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pmul_hr_sw_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pmulhrsw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem, Commutative];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pshuf_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pshufb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_pshuf_b_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_pshufb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_psign_b {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_psign_b_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignb128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_psign_d {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_psign_d_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignd128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_psign_w {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_x86mmx_ty];
  list<LLVMType> ParamTypes = [llvm_x86mmx_ty, llvm_x86mmx_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_ssse3_psign_w_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_psignw128";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_tbm_bextri_u32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_bextri_u32";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_tbm_bextri_u64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_bextri_u64";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i64_ty];
  list<LLVMType> ParamTypes = [llvm_i64_ty, llvm_i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_vcvtph2ps_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vcvtph2ps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_vcvtph2ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vcvtph2ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_vcvtps2ph_128 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vcvtps2ph";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_vcvtps2ph_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vcvtps2ph256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_wrfsbase_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_wrfsbase32";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_wrfsbase_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_wrfsbase64";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_wrgsbase_32 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_wrgsbase32";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_wrgsbase_64 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_wrgsbase64";
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i64_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xabort {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_xabort";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoReturn];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xbegin {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_xbegin";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xend {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_xend";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vfrcz_pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfrczpd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vfrcz_pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfrczpd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vfrcz_ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfrczps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vfrcz_ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfrczps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vfrcz_sd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfrczsd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vfrcz_ss {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vfrczss";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcmov {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcmov";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcmov_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcmov_256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i64_ty, llvm_v4i64_ty, llvm_v4i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcomb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcomb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcomd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcomd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcomq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcomq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcomub {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcomub";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcomud {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcomud";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcomuq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcomuq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcomuw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcomuw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpcomw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpcomw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpermil2pd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermil2pd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2f64_ty];
  list<LLVMType> ParamTypes = [llvm_v2f64_ty, llvm_v2f64_ty, llvm_v2f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpermil2pd_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermil2pd256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4f64_ty];
  list<LLVMType> ParamTypes = [llvm_v4f64_ty, llvm_v4f64_ty, llvm_v4f64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpermil2ps {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermil2ps";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4f32_ty];
  list<LLVMType> ParamTypes = [llvm_v4f32_ty, llvm_v4f32_ty, llvm_v4f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpermil2ps_256 {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpermil2ps256";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8f32_ty];
  list<LLVMType> ParamTypes = [llvm_v8f32_ty, llvm_v8f32_ty, llvm_v8f32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddbd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddbd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddbq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddbq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddbw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphadddq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphadddq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddubd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddubd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddubq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddubq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddubw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddubw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddudq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddudq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphadduwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphadduwd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphadduwq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphadduwq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddwd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphaddwq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphaddwq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphsubbw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphsubbw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphsubdq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphsubdq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vphsubwd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vphsubwd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacsdd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacsdd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacsdqh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacsdqh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacsdql {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacsdql";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacssdd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacssdd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacssdqh {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacssdqh";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacssdql {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacssdql";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacsswd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacsswd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacssww {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacssww";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacswd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacswd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmacsww {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmacsww";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmadcsswd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmadcsswd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpmadcswd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpmadcswd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpperm {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpperm";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vprotb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vprotb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vprotbi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vprotbi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vprotd {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vprotd";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vprotdi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vprotdi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vprotq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vprotq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vprotqi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vprotqi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vprotw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vprotw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vprotwi {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vprotwi";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpshab {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpshab";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpshad {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpshad";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpshaq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpshaq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpshaw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpshaw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpshlb {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpshlb";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v16i8_ty];
  list<LLVMType> ParamTypes = [llvm_v16i8_ty, llvm_v16i8_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpshld {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpshld";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v4i32_ty];
  list<LLVMType> ParamTypes = [llvm_v4i32_ty, llvm_v4i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpshlq {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpshlq";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v2i64_ty];
  list<LLVMType> ParamTypes = [llvm_v2i64_ty, llvm_v2i64_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xop_vpshlw {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_vpshlw";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "";
  list<LLVMType> RetTypes = [llvm_v8i16_ty];
  list<LLVMType> ParamTypes = [llvm_v8i16_ty, llvm_v8i16_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_x86_xtest {	// GCCBuiltin SDPatternOperator Intrinsic
  string GCCBuiltinName = "__builtin_ia32_xtest";
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "x86";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_bitrev {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_bitrev";
  string NAME = ?;
}
def int_xcore_checkevent {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_chkct {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_228];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_clre {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_clrpt {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_236];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_clrsr {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_crc32 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_crc8 {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty, llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_edu {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_243];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_eeu {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_242];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_endin {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_250];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_freer {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_221];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_geted {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_getet {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_getid {	// SDPatternOperator Intrinsic GCCBuiltin
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_getid";
  string NAME = ?;
}
def int_xcore_getps {	// SDPatternOperator Intrinsic GCCBuiltin
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_getps";
  string NAME = ?;
}
def int_xcore_getr {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_getst {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_anyptr_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_251];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_getts {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_237];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_in {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_222];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_inct {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_224];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_initcp {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_257];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_initdp {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_258];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_initlr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_256];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_initpc {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_255];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_initsp {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_254];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_inshr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_233];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_int {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_223];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_mjoin {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_253];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_msync {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_252];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_out {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_225];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_outct {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_227];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_outshr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_234];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_outt {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_226];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_peek {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_249];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setc {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_232];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setclk {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_244, anonymous_245];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setd {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_231];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setev {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_241];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setps {	// SDPatternOperator Intrinsic GCCBuiltin
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string GCCBuiltinName = "__builtin_setps";
  string NAME = ?;
}
def int_xcore_setpsc {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_248];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setpt {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_235];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setrdy {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_246, anonymous_247];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setsr {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_i32_ty];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_settw {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [anonymous_239];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_setv {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty, llvm_ptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_240];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_sext {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_ssync {	// SDPatternOperator Intrinsic
  list<IntrinsicProperty> Intrinsic:properties = [];
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_syncr {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_238];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_testct {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_229];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_testwct {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_anyptr_ty];
  list<IntrinsicProperty> Properties = [anonymous_230];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_waitevent {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_ptr_ty];
  list<LLVMType> ParamTypes = [];
  list<IntrinsicProperty> Properties = [IntrReadMem];
  bit isTarget = 0;
  string NAME = ?;
}
def int_xcore_zext {	// SDPatternOperator Intrinsic
  string Intrinsic:name = "";
  string LLVMName = "";
  string TargetPrefix = "xcore";
  list<LLVMType> RetTypes = [llvm_i32_ty];
  list<LLVMType> ParamTypes = [llvm_i32_ty, llvm_i32_ty];
  list<IntrinsicProperty> Properties = [IntrNoMem];
  bit isTarget = 0;
  string NAME = ?;
}
def interleave {
  string NAME = ?;
}
def intrinsic_void {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::INTRINSIC_VOID";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain];
  SDTypeProfile TypeProfile = anonymous_419;
  string NAME = ?;
}
def intrinsic_w_chain {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::INTRINSIC_W_CHAIN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain];
  SDTypeProfile TypeProfile = anonymous_421;
  string NAME = ?;
}
def intrinsic_wo_chain {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::INTRINSIC_WO_CHAIN";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = anonymous_423;
  string NAME = ?;
}
def isVoid {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 56;
  string NAME = ?;
}
def ist {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::STORE";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTIStore;
  string NAME = ?;
}
def istore {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (ist node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return !cast<StoreSDNode>(N)->isTruncatingStore();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def itruncstore {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (ist node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->isTruncatingStore();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def jmptarget {	// DAGOperand Operand
  ValueType Type = OtherVT;
  string PrintMethod = "printOperand";
  string EncoderMethod = "getJumpTargetOpValue";
  string DecoderMethod = "DecodeJumpRelativeTarget";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_PCREL";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def jumptable {	// SDPatternOperator SDNode
  string Opcode = "ISD::JumpTable";
  string SDClass = "JumpTableSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def ld {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::LOAD";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayLoad, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTLoad;
  string NAME = ?;
}
def llvm_anyfloat_ty {	// LLVMType
  ValueType VT = fAny;
  string NAME = ?;
}
def llvm_anyi64ptr_ty {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = llvm_i64_ty;
  string NAME = ?;
}
def llvm_anyint_ty {	// LLVMType
  ValueType VT = iAny;
  string NAME = ?;
}
def llvm_anyptr_ty {	// LLVMType LLVMAnyPointerType
  ValueType VT = iPTRAny;
  LLVMType ElTy = llvm_i8_ty;
  string NAME = ?;
}
def llvm_anyvector_ty {	// LLVMType
  ValueType VT = vAny;
  string NAME = ?;
}
def llvm_descriptor_ty {	// LLVMType LLVMQualPointerType LLVMPointerType
  ValueType VT = iPTR;
  LLVMType ElTy = llvm_empty_ty;
  int AddrSpace = 0;
  string NAME = ?;
}
def llvm_double_ty {	// LLVMType
  ValueType VT = f64;
  string NAME = ?;
}
def llvm_empty_ty {	// LLVMType
  ValueType VT = OtherVT;
  string NAME = ?;
}
def llvm_f128_ty {	// LLVMType
  ValueType VT = f128;
  string NAME = ?;
}
def llvm_f80_ty {	// LLVMType
  ValueType VT = f80;
  string NAME = ?;
}
def llvm_float_ty {	// LLVMType
  ValueType VT = f32;
  string NAME = ?;
}
def llvm_half_ty {	// LLVMType
  ValueType VT = f16;
  string NAME = ?;
}
def llvm_i16_ty {	// LLVMType
  ValueType VT = i16;
  string NAME = ?;
}
def llvm_i1_ty {	// LLVMType
  ValueType VT = i1;
  string NAME = ?;
}
def llvm_i32_ty {	// LLVMType
  ValueType VT = i32;
  string NAME = ?;
}
def llvm_i64_ty {	// LLVMType
  ValueType VT = i64;
  string NAME = ?;
}
def llvm_i8_ty {	// LLVMType
  ValueType VT = i8;
  string NAME = ?;
}
def llvm_metadata_ty {	// LLVMType
  ValueType VT = MetadataVT;
  string NAME = ?;
}
def llvm_ppcf128_ty {	// LLVMType
  ValueType VT = ppcf128;
  string NAME = ?;
}
def llvm_ptr_ty {	// LLVMType LLVMQualPointerType LLVMPointerType
  ValueType VT = iPTR;
  LLVMType ElTy = llvm_i8_ty;
  int AddrSpace = 0;
  string NAME = ?;
}
def llvm_ptrptr_ty {	// LLVMType LLVMQualPointerType LLVMPointerType
  ValueType VT = iPTR;
  LLVMType ElTy = llvm_ptr_ty;
  int AddrSpace = 0;
  string NAME = ?;
}
def llvm_ptrx86mmx_ty {	// LLVMType LLVMQualPointerType LLVMPointerType
  ValueType VT = iPTR;
  LLVMType ElTy = llvm_x86mmx_ty;
  int AddrSpace = 0;
  string NAME = ?;
}
def llvm_v16f32_ty {	// LLVMType
  ValueType VT = v16f32;
  string NAME = ?;
}
def llvm_v16i16_ty {	// LLVMType
  ValueType VT = v16i16;
  string NAME = ?;
}
def llvm_v16i1_ty {	// LLVMType
  ValueType VT = v16i1;
  string NAME = ?;
}
def llvm_v16i32_ty {	// LLVMType
  ValueType VT = v16i32;
  string NAME = ?;
}
def llvm_v16i64_ty {	// LLVMType
  ValueType VT = v16i64;
  string NAME = ?;
}
def llvm_v16i8_ty {	// LLVMType
  ValueType VT = v16i8;
  string NAME = ?;
}
def llvm_v1f32_ty {	// LLVMType
  ValueType VT = v1f32;
  string NAME = ?;
}
def llvm_v1f64_ty {	// LLVMType
  ValueType VT = v1f64;
  string NAME = ?;
}
def llvm_v1i16_ty {	// LLVMType
  ValueType VT = v1i16;
  string NAME = ?;
}
def llvm_v1i32_ty {	// LLVMType
  ValueType VT = v1i32;
  string NAME = ?;
}
def llvm_v1i64_ty {	// LLVMType
  ValueType VT = v1i64;
  string NAME = ?;
}
def llvm_v1i8_ty {	// LLVMType
  ValueType VT = v1i8;
  string NAME = ?;
}
def llvm_v2f16_ty {	// LLVMType
  ValueType VT = v2f16;
  string NAME = ?;
}
def llvm_v2f32_ty {	// LLVMType
  ValueType VT = v2f32;
  string NAME = ?;
}
def llvm_v2f64_ty {	// LLVMType
  ValueType VT = v2f64;
  string NAME = ?;
}
def llvm_v2i16_ty {	// LLVMType
  ValueType VT = v2i16;
  string NAME = ?;
}
def llvm_v2i1_ty {	// LLVMType
  ValueType VT = v2i1;
  string NAME = ?;
}
def llvm_v2i32_ty {	// LLVMType
  ValueType VT = v2i32;
  string NAME = ?;
}
def llvm_v2i64_ty {	// LLVMType
  ValueType VT = v2i64;
  string NAME = ?;
}
def llvm_v2i8_ty {	// LLVMType
  ValueType VT = v2i8;
  string NAME = ?;
}
def llvm_v32i16_ty {	// LLVMType
  ValueType VT = v32i16;
  string NAME = ?;
}
def llvm_v32i1_ty {	// LLVMType
  ValueType VT = v32i1;
  string NAME = ?;
}
def llvm_v32i8_ty {	// LLVMType
  ValueType VT = v32i8;
  string NAME = ?;
}
def llvm_v4f16_ty {	// LLVMType
  ValueType VT = v4f16;
  string NAME = ?;
}
def llvm_v4f32_ty {	// LLVMType
  ValueType VT = v4f32;
  string NAME = ?;
}
def llvm_v4f64_ty {	// LLVMType
  ValueType VT = v4f64;
  string NAME = ?;
}
def llvm_v4i16_ty {	// LLVMType
  ValueType VT = v4i16;
  string NAME = ?;
}
def llvm_v4i1_ty {	// LLVMType
  ValueType VT = v4i1;
  string NAME = ?;
}
def llvm_v4i32_ty {	// LLVMType
  ValueType VT = v4i32;
  string NAME = ?;
}
def llvm_v4i64_ty {	// LLVMType
  ValueType VT = v4i64;
  string NAME = ?;
}
def llvm_v4i8_ty {	// LLVMType
  ValueType VT = v4i8;
  string NAME = ?;
}
def llvm_v64i1_ty {	// LLVMType
  ValueType VT = v64i1;
  string NAME = ?;
}
def llvm_v64i8_ty {	// LLVMType
  ValueType VT = v64i8;
  string NAME = ?;
}
def llvm_v8f16_ty {	// LLVMType
  ValueType VT = v8f16;
  string NAME = ?;
}
def llvm_v8f32_ty {	// LLVMType
  ValueType VT = v8f32;
  string NAME = ?;
}
def llvm_v8f64_ty {	// LLVMType
  ValueType VT = v8f64;
  string NAME = ?;
}
def llvm_v8i16_ty {	// LLVMType
  ValueType VT = v8i16;
  string NAME = ?;
}
def llvm_v8i1_ty {	// LLVMType
  ValueType VT = v8i1;
  string NAME = ?;
}
def llvm_v8i32_ty {	// LLVMType
  ValueType VT = v8i32;
  string NAME = ?;
}
def llvm_v8i64_ty {	// LLVMType
  ValueType VT = v8i64;
  string NAME = ?;
}
def llvm_v8i8_ty {	// LLVMType
  ValueType VT = v8i8;
  string NAME = ?;
}
def llvm_vararg_ty {	// LLVMType
  ValueType VT = isVoid;
  string NAME = ?;
}
def llvm_void_ty {	// LLVMType
  ValueType VT = isVoid;
  string NAME = ?;
}
def llvm_x86mmx_ty {	// LLVMType
  ValueType VT = x86mmx;
  string NAME = ?;
}
def load {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (unindexedload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getExtensionType() == ISD::NON_EXTLOAD;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def load_a {	// SDPatternOperator PatFrag AlignedLoad
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (load node:$ptr);
  string PredicateCode = "
LoadSDNode *LD = cast<LoadSDNode>(N);
return LD->getMemoryVT().getSizeInBits()/8 <= LD->getAlignment();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def loadi16_anyext {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (i32 (unindexedload node:$ptr));
  string PredicateCode = "
  LoadSDNode *LD = cast<LoadSDNode>(N);
  ISD::LoadExtType ExtType = LD->getExtensionType();
  if (ExtType == ISD::EXTLOAD)
    return LD->getAlignment() >= 2 && !LD->isVolatile();
  return false;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def loado_16 {	// Instruction InstDSP F_3Reg_001 loado16_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 0, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "loado16	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_loado_16 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def loado_32 {	// Instruction InstDSP F_3Reg_001 loado32_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 0, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "loado32	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_loado_32 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def loadu_16 {	// Instruction InstDSP F_LS_2Reg_imm9 loadu16_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 1, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "loadu16	$ra, $rb, $imm9";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_loadu_16 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def loadu_32 {	// Instruction InstDSP F_LS_2Reg_imm9 loadu32_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 1, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "loadu32	$ra, $rb, $imm9";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_loadu_32 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def loadu_8 {	// Instruction InstDSP F_LS_2Reg_imm9 loadu8_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 1, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "loadu8	$ra, $rb, $imm9";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_loadu_8 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def loaduvh {	// Instruction InstDSP F_LS_2Reg_imm9 loaduvh_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "loaduvh	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_loaduvh CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def loaduvl {	// Instruction InstDSP F_LS_2Reg_imm9 loaduvl_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "loaduvl	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_loaduvl CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def loadvh {	// Instruction InstDSP F_LS_2Reg_imm9 loadvh_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "loadvh	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_loadvh CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def loadvl {	// Instruction InstDSP F_LS_2Reg_imm9 loadvl_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "loadvl	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_loadvl CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def mem {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printMemOperandEA";
  string EncoderMethod = "getMemEncoding";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops CPURegs, simm9);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def memh {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printMemOperandEA";
  string EncoderMethod = "getMemHalfEncoding";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops CPURegs, simm9);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def mips_q31_ty {	// LLVMType
  ValueType VT = i32;
  string NAME = ?;
}
def mips_v2q15_ty {	// LLVMType
  ValueType VT = v2i16;
  string NAME = ?;
}
def mips_v4q7_ty {	// LLVMType
  ValueType VT = v4i8;
  string NAME = ?;
}
def mul {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::MUL";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative, SDNPAssociative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def mulhs {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::MULHS";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def mulhu {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::MULHU";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def node {
  string NAME = ?;
}
def not {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$in);
  dag Fragment = (xor node:$in, -1);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def null_frag {	// SDPatternOperator
  string NAME = ?;
}
def ops {
  string NAME = ?;
}
def or {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::OR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative, SDNPAssociative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def outs {
  string NAME = ?;
}
def post_store {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr, node:$offset);
  dag Fragment = (istore node:$val, node:$ptr, node:$offset);
  string PredicateCode = "
  ISD::MemIndexedMode AM = cast<StoreSDNode>(N)->getAddressingMode();
  return AM == ISD::POST_INC || AM == ISD::POST_DEC;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def post_truncst {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (itruncstore node:$val, node:$base, node:$offset);
  string PredicateCode = "
  ISD::MemIndexedMode AM = cast<StoreSDNode>(N)->getAddressingMode();
  return AM == ISD::POST_INC || AM == ISD::POST_DEC;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def post_truncstf32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (post_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::f32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def post_truncsti1 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (post_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i1;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def post_truncsti16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (post_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def post_truncsti32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (post_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def post_truncsti8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (post_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def ppcf128 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 12;
  string NAME = ?;
}
def pre_store {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (istore node:$val, node:$base, node:$offset);
  string PredicateCode = "
  ISD::MemIndexedMode AM = cast<StoreSDNode>(N)->getAddressingMode();
  return AM == ISD::PRE_INC || AM == ISD::PRE_DEC;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def pre_truncst {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (itruncstore node:$val, node:$base, node:$offset);
  string PredicateCode = "
  ISD::MemIndexedMode AM = cast<StoreSDNode>(N)->getAddressingMode();
  return AM == ISD::PRE_INC || AM == ISD::PRE_DEC;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def pre_truncstf32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (pre_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::f32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def pre_truncsti1 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (pre_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i1;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def pre_truncsti16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (pre_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def pre_truncsti32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (pre_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def pre_truncsti8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$base, node:$offset);
  dag Fragment = (pre_truncst node:$val, node:$base, node:$offset);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def prefetch {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::PREFETCH";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayLoad, SDNPMayStore, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTPrefetch;
  string NAME = ?;
}
def ptr_rc {	// PointerLikeRegClass
  int RegClassKind = 0;
  string NAME = ?;
}
def readcyclecounter {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::READCYCLECOUNTER";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPSideEffect];
  SDTypeProfile TypeProfile = SDTIntLeaf;
  string NAME = ?;
}
def rotl {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ROTL";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntShiftOp;
  string NAME = ?;
}
def rotr {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ROTR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntShiftOp;
  string NAME = ?;
}
def scalar_to_vector {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SCALAR_TO_VECTOR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = anonymous_405;
  string NAME = ?;
}
def sdiv {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SDIV";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def sdivrem {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SDIVREM";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntBinHiLoOp;
  string NAME = ?;
}
def select {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SELECT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTSelect;
  string NAME = ?;
}
def selectcc {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SELECT_CC";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTSelectCC;
  string NAME = ?;
}
def sequence {
  string NAME = ?;
}
def set {
  string NAME = ?;
}
def setcc {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SETCC";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTSetCC;
  string NAME = ?;
}
def seteq {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETEQ);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setge {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETGE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setgt {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETGT);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setle {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETLE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setlt {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETLT);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setne {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETNE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def seto {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETO);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setoeq {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETOEQ);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setoge {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETOGE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setogt {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETOGT);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setole {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETOLE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setolt {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETOLT);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setone {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETONE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setueq {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETUEQ);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setuge {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETUGE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setugt {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETUGT);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setule {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETULE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setult {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETULT);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setune {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETUNE);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def setuo {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$lhs, node:$rhs);
  dag Fragment = (setcc node:$lhs, node:$rhs, SETUO);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sext {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SIGN_EXTEND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntExtendOp;
  string NAME = ?;
}
def sext_inreg {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SIGN_EXTEND_INREG";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTExtInreg;
  string NAME = ?;
}
def sextload {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (unindexedload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getExtensionType() == ISD::SEXTLOAD;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sextloadi1 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (sextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i1;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sextloadi16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (sextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sextloadi32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (sextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sextloadi8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (sextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sextloadvi1 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (sextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i1;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sextloadvi16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (sextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sextloadvi32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (sextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def sextloadvi8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (sextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def shamt {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def shl {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SHL";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntShiftOp;
  string NAME = ?;
}
def simm10 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "DecodeSimm11";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def simm11 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "DecodeSimm11";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def simm16 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def simm32 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def simm5 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "DecodeSimm5";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def simm9 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printOperand";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def sint_to_fp {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SINT_TO_FP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntToFPOp;
  string NAME = ?;
}
def smullohi {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SMUL_LOHI";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTIntBinHiLoOp;
  string NAME = ?;
}
def sra {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SRA";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntShiftOp;
  string NAME = ?;
}
def srcvalue {
  string NAME = ?;
}
def srem {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SREM";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def srl {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SRL";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntShiftOp;
  string NAME = ?;
}
def st {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::STORE";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPMayStore, SDNPMemOperand];
  SDTypeProfile TypeProfile = SDTStore;
  string NAME = ?;
}
def store {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (unindexedstore node:$val, node:$ptr);
  string PredicateCode = "
  return !cast<StoreSDNode>(N)->isTruncatingStore();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def store_a {	// SDPatternOperator PatFrag AlignedStore
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (store node:$val, node:$ptr);
  string PredicateCode = "
StoreSDNode *SD = cast<StoreSDNode>(N);
return SD->getMemoryVT().getSizeInBits()/8 <= SD->getAlignment();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def storeo_16 {	// Instruction InstDSP F_3Reg_001 storeo16_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 0, 1, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "storeo16	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_storeo_16 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeo_32 {	// Instruction InstDSP F_3Reg_001 storeo32_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 0, 1, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs CPURegs:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "storeo32	$ra, $rb, $rc";
  list<dag> Pattern = [(set CPURegs:$ra, (int_dsp_storeo_32 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeu_10 {	// Instruction InstDSP F_LS_2Reg_imm9 storeu10_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "storeu10	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_storeu_10 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeu_16 {	// Instruction InstDSP F_LS_2Reg_imm9 storeu16_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 1, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, CPURegs:$rb, simm9:$imm9);
  string AsmString = "storeu16	$ra, $rb, $imm9";
  list<dag> Pattern = [(int_dsp_storeu_16 CPURegs:$ra, CPURegs:$rb, immSExt9:$imm9)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeu_20 {	// Instruction InstDSP F_LS_2Reg_imm9 storeu20_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "storeu20	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_storeu_20 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeu_32 {	// Instruction InstDSP F_LS_2Reg_imm9 storeu32_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 1, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, CPURegs:$rb, simm9:$imm9);
  string AsmString = "storeu32	$ra, $rb, $imm9";
  list<dag> Pattern = [(int_dsp_storeu_32 CPURegs:$ra, CPURegs:$rb, immSExt9:$imm9)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeu_40 {	// Instruction InstDSP F_LS_2Reg_imm9 storeu40_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "storeu40	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_storeu_40 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeu_8 {	// Instruction InstDSP F_LS_2Reg_imm9 storeu8_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 0, 1, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs);
  dag InOperandList = (ins CPURegs:$ra, CPURegs:$rb, simm9:$imm9);
  string AsmString = "storeu8	$ra, $rb, $imm9";
  list<dag> Pattern = [(int_dsp_storeu_8 CPURegs:$ra, CPURegs:$rb, immSExt9:$imm9)];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeuvh {	// Instruction InstDSP F_LS_2Reg_imm9 storeuvh_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "storeuvh	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_storeuvh CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storeuvl {	// Instruction InstDSP F_LS_2Reg_imm9 storeuvl_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "storeuvl	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_storeuvl CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storevh {	// Instruction InstDSP F_LS_2Reg_imm9 storevh_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "storevh	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_storevh CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def storevl {	// Instruction InstDSP F_LS_2Reg_imm9 storevl_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 1, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "storevl	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_storevl CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def sub {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SUB";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def sub_128 {	// SubRegIndex
  int SubRegIndex:offset = 0;
  string Namespace = "DSP";
  int Size = 128;
  int Offset = 0;
  list<SubRegIndex> ComposedOf = [];
  list<SubRegIndex> CoveringSubRegIndices = [];
  string NAME = ?;
}
def sub_32 {	// SubRegIndex
  int SubRegIndex:offset = 0;
  string Namespace = "DSP";
  int Size = 32;
  int Offset = 0;
  list<SubRegIndex> ComposedOf = [];
  list<SubRegIndex> CoveringSubRegIndices = [];
  string NAME = ?;
}
def sub_64 {	// SubRegIndex
  int SubRegIndex:offset = 0;
  string Namespace = "DSP";
  int Size = 64;
  int Offset = 0;
  list<SubRegIndex> ComposedOf = [];
  list<SubRegIndex> CoveringSubRegIndices = [];
  string NAME = ?;
}
def sub_hi {	// SubRegIndex
  string Namespace = "DSP";
  int Size = 32;
  int Offset = 32;
  list<SubRegIndex> ComposedOf = [];
  list<SubRegIndex> CoveringSubRegIndices = [];
  string NAME = ?;
}
def sub_lo {	// SubRegIndex
  int SubRegIndex:offset = 0;
  string Namespace = "DSP";
  int Size = 32;
  int Offset = 0;
  list<SubRegIndex> ComposedOf = [];
  list<SubRegIndex> CoveringSubRegIndices = [];
  string NAME = ?;
}
def subc {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SUBC";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPOutGlue];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def sube {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::SUBE";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPOutGlue, SDNPInGlue];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def tblockaddress {	// SDPatternOperator SDNode
  string Opcode = "ISD::TargetBlockAddress";
  string SDClass = "BlockAddressSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def tconstpool {	// SDPatternOperator SDNode
  string Opcode = "ISD::TargetConstantPool";
  string SDClass = "ConstantPoolSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def texternalsym {	// SDPatternOperator SDNode
  string Opcode = "ISD::TargetExternalSymbol";
  string SDClass = "ExternalSymbolSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def tframeindex {	// SDPatternOperator SDNode
  string Opcode = "ISD::TargetFrameIndex";
  string SDClass = "FrameIndexSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def tglobaladdr {	// SDPatternOperator SDNode
  string Opcode = "ISD::TargetGlobalAddress";
  string SDClass = "GlobalAddressSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def tglobaltlsaddr {	// SDPatternOperator SDNode
  string Opcode = "ISD::TargetGlobalTLSAddress";
  string SDClass = "GlobalAddressSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def timm {	// SDPatternOperator SDNode
  string Opcode = "ISD::TargetConstant";
  string SDClass = "ConstantSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntLeaf;
  string NAME = ?;
}
def tjumptable {	// SDPatternOperator SDNode
  string Opcode = "ISD::TargetJumpTable";
  string SDClass = "JumpTableSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTPtrLeaf;
  string NAME = ?;
}
def trap {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::TRAP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPHasChain, SDNPSideEffect];
  SDTypeProfile TypeProfile = SDTNone;
  string NAME = ?;
}
def trunc {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::TRUNCATE";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntTruncOp;
  string NAME = ?;
}
def truncstore {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (unindexedstore node:$val, node:$ptr);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->isTruncatingStore();
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def truncstoref32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (truncstore node:$val, node:$ptr);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::f32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def truncstoref64 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (truncstore node:$val, node:$ptr);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::f64;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def truncstorei16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (truncstore node:$val, node:$ptr);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def truncstorei32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (truncstore node:$val, node:$ptr);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def truncstorei8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (truncstore node:$val, node:$ptr);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getMemoryVT() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def udiv {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::UDIV";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def udivrem {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::UDIVREM";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntBinHiLoOp;
  string NAME = ?;
}
def uimm10 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "prinUnsignedImm";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def uimm11 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "prinUnsignedImm";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def uimm16 {	// DAGOperand Operand
  ValueType Type = i32;
  string PrintMethod = "printUnsignedImm";
  string EncoderMethod = "";
  string DecoderMethod = "";
  string AsmOperandLowerMethod = ?;
  string OperandType = "OPERAND_UNKNOWN";
  dag MIOperandInfo = (ops);
  string MCOperandPredicate = ?;
  AsmOperandClass ParserMatchClass = ImmAsmOperand;
  string NAME = ?;
}
def uint_to_fp {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::UINT_TO_FP";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntToFPOp;
  string NAME = ?;
}
def umullohi {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::UMUL_LOHI";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative];
  SDTypeProfile TypeProfile = SDTIntBinHiLoOp;
  string NAME = ?;
}
def undef {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::UNDEF";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTUNDEF;
  string NAME = ?;
}
def unindexedload {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (ld node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getAddressingMode() == ISD::UNINDEXED;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def unindexedstore {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$val, node:$ptr);
  dag Fragment = (st node:$val, node:$ptr);
  string PredicateCode = "
  return cast<StoreSDNode>(N)->getAddressingMode() == ISD::UNINDEXED;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def unknown {	// unknown_class
  string NAME = ?;
}
def untyped {	// ValueType
  string Namespace = "MVT";
  int Size = 8;
  int Value = 57;
  string NAME = ?;
}
def urem {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::UREM";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def v16f32 {	// ValueType
  string Namespace = "MVT";
  int Size = 512;
  int Value = 49;
  string NAME = ?;
}
def v16i1 {	// ValueType
  string Namespace = "MVT";
  int Size = 16;
  int Value = 16;
  string NAME = ?;
}
def v16i16 {	// ValueType
  string Namespace = "MVT";
  int Size = 256;
  int Value = 30;
  string NAME = ?;
}
def v16i32 {	// ValueType
  string Namespace = "MVT";
  int Size = 512;
  int Value = 36;
  string NAME = ?;
}
def v16i64 {	// ValueType
  string Namespace = "MVT";
  int Size = 1024;
  int Value = 41;
  string NAME = ?;
}
def v16i8 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 23;
  string NAME = ?;
}
def v1f32 {	// ValueType
  string Namespace = "MVT";
  int Size = 32;
  int Value = 45;
  string NAME = ?;
}
def v1f64 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 50;
  string NAME = ?;
}
def v1i16 {	// ValueType
  string Namespace = "MVT";
  int Size = 16;
  int Value = 26;
  string NAME = ?;
}
def v1i32 {	// ValueType
  string Namespace = "MVT";
  int Size = 32;
  int Value = 32;
  string NAME = ?;
}
def v1i64 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 37;
  string NAME = ?;
}
def v1i8 {	// ValueType
  string Namespace = "MVT";
  int Size = 16;
  int Value = 19;
  string NAME = ?;
}
def v2f16 {	// ValueType
  string Namespace = "MVT";
  int Size = 32;
  int Value = 42;
  string NAME = ?;
}
def v2f32 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 46;
  string NAME = ?;
}
def v2f64 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 51;
  string NAME = ?;
}
def v2i1 {	// ValueType
  string Namespace = "MVT";
  int Size = 2;
  int Value = 13;
  string NAME = ?;
}
def v2i16 {	// ValueType
  string Namespace = "MVT";
  int Size = 32;
  int Value = 27;
  string NAME = ?;
}
def v2i32 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 33;
  string NAME = ?;
}
def v2i64 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 38;
  string NAME = ?;
}
def v2i8 {	// ValueType
  string Namespace = "MVT";
  int Size = 16;
  int Value = 20;
  string NAME = ?;
}
def v32i1 {	// ValueType
  string Namespace = "MVT";
  int Size = 32;
  int Value = 17;
  string NAME = ?;
}
def v32i16 {	// ValueType
  string Namespace = "MVT";
  int Size = 512;
  int Value = 31;
  string NAME = ?;
}
def v32i8 {	// ValueType
  string Namespace = "MVT";
  int Size = 256;
  int Value = 24;
  string NAME = ?;
}
def v4f16 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 43;
  string NAME = ?;
}
def v4f32 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 47;
  string NAME = ?;
}
def v4f64 {	// ValueType
  string Namespace = "MVT";
  int Size = 256;
  int Value = 52;
  string NAME = ?;
}
def v4i1 {	// ValueType
  string Namespace = "MVT";
  int Size = 4;
  int Value = 14;
  string NAME = ?;
}
def v4i16 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 28;
  string NAME = ?;
}
def v4i32 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 34;
  string NAME = ?;
}
def v4i64 {	// ValueType
  string Namespace = "MVT";
  int Size = 256;
  int Value = 39;
  string NAME = ?;
}
def v4i8 {	// ValueType
  string Namespace = "MVT";
  int Size = 32;
  int Value = 21;
  string NAME = ?;
}
def v64i1 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 18;
  string NAME = ?;
}
def v64i8 {	// ValueType
  string Namespace = "MVT";
  int Size = 512;
  int Value = 25;
  string NAME = ?;
}
def v8f16 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 44;
  string NAME = ?;
}
def v8f32 {	// ValueType
  string Namespace = "MVT";
  int Size = 256;
  int Value = 48;
  string NAME = ?;
}
def v8f64 {	// ValueType
  string Namespace = "MVT";
  int Size = 512;
  int Value = 53;
  string NAME = ?;
}
def v8i1 {	// ValueType
  string Namespace = "MVT";
  int Size = 8;
  int Value = 15;
  string NAME = ?;
}
def v8i16 {	// ValueType
  string Namespace = "MVT";
  int Size = 128;
  int Value = 29;
  string NAME = ?;
}
def v8i32 {	// ValueType
  string Namespace = "MVT";
  int Size = 256;
  int Value = 35;
  string NAME = ?;
}
def v8i64 {	// ValueType
  string Namespace = "MVT";
  int Size = 512;
  int Value = 40;
  string NAME = ?;
}
def v8i8 {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 22;
  string NAME = ?;
}
def vAny {	// ValueType
  string Namespace = "MVT";
  int Size = 0;
  int Value = 252;
  string NAME = ?;
}
def vabs_10 {	// Instruction InstDSP F_2Reg_2 vabs_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb);
  string AsmString = "vabs10	$ra, $rb";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vabs_10 VPR16Out:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vabs_20 {	// Instruction InstDSP F_2Reg_2 vabs_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb);
  string AsmString = "vabs20	$ra, $rb";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vabs_20 VPR8Out:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vabs_40 {	// Instruction InstDSP F_2Reg_2 vabs40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb);
  string AsmString = "vabs40	$ra, $rb";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vabs_40 VPR4Out:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vadd_10 {	// Instruction InstDSP F_3Reg_001 vadd_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vadd10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vadd_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vadd_20 {	// Instruction InstDSP F_3Reg_001 vadd_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vadd20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vadd_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vadd_40 {	// Instruction InstDSP F_3Reg_001 vadd40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vadd40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vadd_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def variable_ops {
  string NAME = ?;
}
def vcmac_10 {	// Instruction InstDSP F_3Reg_001 vcmac_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vcmac10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vcmac_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vcmac_20 {	// Instruction InstDSP F_3Reg_001 vcmac_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vcmac20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vcmac_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vcmul_20 {	// Instruction InstDSP F_3Reg_001 vcmul_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vcmul20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vcmul_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vcmuli_40 {	// Instruction InstDSP F_3Reg_001 vcmuli40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vcmuli40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vcmuli_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vcmulr_40 {	// Instruction InstDSP F_3Reg_001 vcmulr40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vcmulr40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vcmulr_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vector_extract {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::EXTRACT_VECTOR_ELT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = anonymous_407;
  string NAME = ?;
}
def vector_extract_subvec {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::EXTRACT_SUBVECTOR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = anonymous_417;
  string NAME = ?;
}
def vector_insert {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::INSERT_VECTOR_ELT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = anonymous_410;
  string NAME = ?;
}
def vector_shuffle {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::VECTOR_SHUFFLE";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTVecShuffle;
  string NAME = ?;
}
def veq_10 {	// Instruction InstDSP F_3Reg_001 veq_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "veq10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_veq_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def veq_20 {	// Instruction InstDSP F_3Reg_001 veq_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "veq20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_veq_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def veq_40 {	// Instruction InstDSP F_3Reg_001 veq40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "veq40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_veq_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vfmac_10 {	// Instruction InstDSP F_3Reg_001 vfmac_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vfmac10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vfmac_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vfmac_20 {	// Instruction InstDSP F_3Reg_001 vfmac_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vfmac20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vfmac_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vfmac_40 {	// Instruction InstDSP F_3Reg_001 vfmac40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$dst, VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vfmac40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vfmac_40 VPR4Out:$dst, VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "$ra = $dst";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vfmul_10 {	// Instruction InstDSP F_3Reg_001 vfmul_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vfmul10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vfmul_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vfmul_20 {	// Instruction InstDSP F_3Reg_001 vfmul_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vfmul20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vfmul_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vfmul_40 {	// Instruction InstDSP F_3Reg_001 vfmul40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vfmul40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vfmul_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vge_10 {	// Instruction InstDSP F_3Reg_001 vge_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vge10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vge_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vge_20 {	// Instruction InstDSP F_3Reg_001 vge_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vge20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vge_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vge_40 {	// Instruction InstDSP F_3Reg_001 vge40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vge40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vge_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vgt_10 {	// Instruction InstDSP F_3Reg_001 vgt_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vgt10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vgt_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vgt_20 {	// Instruction InstDSP F_3Reg_001 vgt_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vgt20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vgt_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vgt_40 {	// Instruction InstDSP F_3Reg_001 vgt40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vgt40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vgt_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vle_10 {	// Instruction InstDSP F_3Reg_001 vle_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vle10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vle_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vle_20 {	// Instruction InstDSP F_3Reg_001 vle_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vle20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vle_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vle_40 {	// Instruction InstDSP F_3Reg_001 vle40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vle40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vle_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloado_16 {	// Instruction InstDSP F_3Reg_001 vloado16_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "vloado16	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vloado_16 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloado_32 {	// Instruction InstDSP F_3Reg_001 vloado32_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "vloado32	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vloado_32 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloado_8 {	// Instruction InstDSP F_3Reg_001 vloado8_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "vloado8	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vloado_8 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadr_16 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadr16_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadr16	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vloadr_16 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadr_32 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadr32_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadr32	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vloadr_32 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadr_8 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadr8_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 0, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadr8	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vloadr_8 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadu_16 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadu16_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadu16	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vloadu_16 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadu_32 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadu32_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadu32	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vloadu_32 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadu_8 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadu8_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadu8	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vloadu_8 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadur_16 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadur16_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadur16	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vloadur_16 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadur_32 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadur32_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadur32	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vloadur_32 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vloadur_8 {	// Instruction InstDSP F_LS_2Reg_imm9 vloadur8_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 0, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vloadur8	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vloadur_8 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = LD_Ins_SLOT45;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vlt_10 {	// Instruction InstDSP F_3Reg_001 vlt_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vlt10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vlt_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vlt_20 {	// Instruction InstDSP F_3Reg_001 vlt_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vlt20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vlt_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vlt_40 {	// Instruction InstDSP F_3Reg_001 vlt40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vlt40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vlt_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vnot {	// SDPatternOperator PatFrag
  string PatFrag:pred = "";
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$in);
  dag Fragment = (xor node:$in, immAllOnesV);
  string PredicateCode = "";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def vselect {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::VSELECT";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTVSelect;
  string NAME = ?;
}
def vsl_10 {	// Instruction InstDSP F_3Reg_001 vsl_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vsl10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vsl_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsl_20 {	// Instruction InstDSP F_3Reg_001 vsl_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vsl20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vsl_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsl_40 {	// Instruction InstDSP F_3Reg_001 vsl40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vsl40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vsl_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsls_10 {	// Instruction InstDSP F_3Reg_001 vsls_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vsls10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vsls_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsls_20 {	// Instruction InstDSP F_3Reg_001 vsls_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vsls20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vsls_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsls_40 {	// Instruction InstDSP F_3Reg_001 vsls40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vsls40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vsls_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsra_10 {	// Instruction InstDSP F_3Reg_001 vsra_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vsra10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vsra_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsra_20 {	// Instruction InstDSP F_3Reg_001 vsra_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vsra20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vsra_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsra_40 {	// Instruction InstDSP F_3Reg_001 vsra40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vsra40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vsra_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsrl_10 {	// Instruction InstDSP F_3Reg_001 vsrl_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vsrl10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vsrl_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsrl_20 {	// Instruction InstDSP F_3Reg_001 vsrl_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vsrl20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vsrl_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsrl_40 {	// Instruction InstDSP F_3Reg_001 vsrl40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vsrl.40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vsrl_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vstoreo_10 {	// Instruction InstDSP F_3Reg_001 vstoreo10_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 1, 1, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "vstoreo10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vstoreo_10 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vstoreo_20 {	// Instruction InstDSP F_3Reg_001 vstoreo20_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 1, 1, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "vstoreo20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vstoreo_20 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vstoreo_40 {	// Instruction InstDSP F_3Reg_001 vstoreo40_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 1, 1, 1, 1, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, CPURegs:$rc);
  string AsmString = "vstoreo40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vstoreo_40 CPURegs:$rb, CPURegs:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vstoreu_10 {	// Instruction InstDSP F_LS_2Reg_imm9 vstoreu10_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 1, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vstoreu10	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vstoreu_10 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vstoreu_20 {	// Instruction InstDSP F_LS_2Reg_imm9 vstoreu20_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vstoreu20	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vstoreu_20 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vstoreu_40 {	// Instruction InstDSP F_LS_2Reg_imm9 vstoreu40_fmt
  field bits<32> Inst = { 1, 1, 1, 0, 1, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, addr{14}, addr{13}, addr{12}, addr{11}, addr{10}, addr{9}, addr{8}, addr{7}, addr{6}, addr{5}, addr{4}, addr{3}, addr{2}, addr{1}, addr{0}, 1, 1, 1, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins CPURegs:$rb, simm9:$imm9);
  string AsmString = "vstoreu40	$ra, $rb, $imm9";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vstoreu_40 CPURegs:$rb, immSExt9:$imm9))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ST_Ins_SLOT67;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<15> addr = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsub_10 {	// Instruction InstDSP F_3Reg_001 vsub_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb, VPR16Out:$rc);
  string AsmString = "vsub10	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vsub_10 VPR16Out:$rb, VPR16Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsub_20 {	// Instruction InstDSP F_3Reg_001 vsub_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb, VPR8Out:$rc);
  string AsmString = "vsub20	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vsub_20 VPR8Out:$rb, VPR8Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsub_40 {	// Instruction InstDSP F_3Reg_001 vsub40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, rc{5}, rc{4}, rc{3}, rc{2}, rc{1}, rc{0}, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb, VPR4Out:$rc);
  string AsmString = "vsub40	$ra, $rb, $rc";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vsub_40 VPR4Out:$rb, VPR4Out:$rc))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  bits<6> rc = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsum_10 {	// Instruction InstDSP F_2Reg_2 vsum_10_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR16Out:$ra);
  dag InOperandList = (ins VPR16Out:$rb);
  string AsmString = "vsum10	$ra, $rb";
  list<dag> Pattern = [(set VPR16Out:$ra, (int_dsp_vsum_10 VPR16Out:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsum_20 {	// Instruction InstDSP F_2Reg_2 vsum_20_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR8Out:$ra);
  dag InOperandList = (ins VPR8Out:$rb);
  string AsmString = "vsum20	$ra, $rb";
  list<dag> Pattern = [(set VPR8Out:$ra, (int_dsp_vsum_20 VPR8Out:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vsum_40 {	// Instruction InstDSP F_2Reg_2 vsum40_fmt
  field bits<32> Inst = { 1, 0, 1, 0, 0, 1, ra{5}, ra{4}, ra{3}, ra{2}, ra{1}, ra{0}, rb{5}, rb{4}, rb{3}, rb{2}, rb{1}, rb{0}, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "DSP";
  dag OutOperandList = (outs VPR4Out:$ra);
  dag InOperandList = (ins VPR4Out:$rb);
  string AsmString = "vsum40	$ra, $rb";
  list<dag> Pattern = [(set VPR4Out:$ra, (int_dsp_vsum_40 VPR4Out:$rb))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "DSP";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isPseudo = 0;
  bit hasSideEffects = ?;
  bit neverHasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  InstrItinClass Itinerary = ALU32_V_SLOT23;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bits<3> opcode = { 0, 0, 0 };
  bits<3> typecode = { 0, 0, 0 };
  bits<5> Type = { 0, 0, 0, 0, 0 };
  bits<1> isSolo = { 0 };
  bits<1> isSoloAX = { 0 };
  bits<1> isSoloAin1 = { 0 };
  bits<1> isPredicated = { 0 };
  bits<1> isPredicatedFalse = { 0 };
  bits<1> isPredicatedNew = { 0 };
  bits<1> isPredicateLate = { 0 };
  bits<1> isNewValue = { 0 };
  bits<1> hasNewValue = { 0 };
  bits<3> opNewValue = { 0, 0, 0 };
  bits<1> isNVStorable = { 0 };
  bits<1> isNVStore = { 0 };
  bits<1> isCVLoadable = { 0 };
  bits<1> isCVLoad = { 0 };
  bits<1> isExtendable = { 0 };
  bits<1> isExtended = { 0 };
  bits<3> opExtendable = { 0, 0, 0 };
  bits<1> isExtentSigned = { 0 };
  bits<5> opExtentBits = { 0, 0, 0, 0, 0 };
  bits<2> opExtentAlign = { 0, 0 };
  bits<4> validSubTargets = { 1, 1, 1, 1 };
  bits<3> addrMode = { 0, 0, 0 };
  bits<3> accessSize = { 0, 0, 0 };
  bits<1> isTaken = { 0 };
  bits<1> isFP = { 0 };
  SlotMode Slots = Slot7;
  bits<1> Start = { 1 };
  bits<6> ra = { ?, ?, ?, ?, ?, ? };
  bits<6> rb = { ?, ?, ?, ?, ?, ? };
  string NAME = ?;
}
def vt {	// SDPatternOperator SDNode
  string Opcode = "ISD::VALUETYPE";
  string SDClass = "VTSDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTOther;
  string NAME = ?;
}
def vtFP {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (vt);
  string PredicateCode = " return N->getVT().isFloatingPoint(); ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def vtInt {	// SDPatternOperator PatFrag PatLeaf
  SDNodeXForm PatLeaf:xform = NOOP_SDNodeXForm;
  dag Operands = (ops);
  dag Fragment = (vt);
  string PredicateCode = " return N->getVT().isInteger(); ";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def x86mmx {	// ValueType
  string Namespace = "MVT";
  int Size = 64;
  int Value = 54;
  string NAME = ?;
}
def xor {	// SDPatternOperator SDNode
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::XOR";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [SDNPCommutative, SDNPAssociative];
  SDTypeProfile TypeProfile = SDTIntBinOp;
  string NAME = ?;
}
def zero_reg {
  string NAME = ?;
}
def zext {	// SDPatternOperator SDNode
  list<SDNodeProperty> SDNode:props = [];
  string SDNode:sdclass = "SDNode";
  string Opcode = "ISD::ZERO_EXTEND";
  string SDClass = "SDNode";
  list<SDNodeProperty> Properties = [];
  SDTypeProfile TypeProfile = SDTIntExtendOp;
  string NAME = ?;
}
def zextload {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (unindexedload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getExtensionType() == ISD::ZEXTLOAD;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def zextloadi1 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (zextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i1;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def zextloadi16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (zextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def zextloadi32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (zextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def zextloadi8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (zextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def zextloadvi1 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (zextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i1;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def zextloadvi16 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (zextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i16;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def zextloadvi32 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (zextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i32;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
def zextloadvi8 {	// SDPatternOperator PatFrag
  SDNodeXForm PatFrag:xform = NOOP_SDNodeXForm;
  dag Operands = (ops node:$ptr);
  dag Fragment = (zextload node:$ptr);
  string PredicateCode = "
  return cast<LoadSDNode>(N)->getMemoryVT().getScalarType() == MVT::i8;
";
  string ImmediateCode = "";
  SDNodeXForm OperandTransform = NOOP_SDNodeXForm;
  string NAME = ?;
}
