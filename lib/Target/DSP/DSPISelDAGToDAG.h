//===---- DSPISelDAGToDAG.h - A Dag to Dag Inst Selector for DSP --------===//
//
// The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the DSP target.
//
//===----------------------------------------------------------------------===//

#ifndef DSPISELDAGTODAG_H
#define DSPISELDAGTODAG_H
#include "DSP.h"
#include "DSPSubtarget.h"
#include "DSPTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"
//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//
//===----------------------------------------------------------------------===//
// DSPDAGToDAGISel - MIPS specific code to select MIPS machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//


namespace llvm {

	class DSPDAGToDAGISel : public SelectionDAGISel{
	public:
		explicit DSPDAGToDAGISel(DSPTargetMachine &TM)
			:SelectionDAGISel(TM), Subtarget(nullptr){}

		//pass name 
		const char *getPassName() const override{
			return "DSP DAG->DAG Pattern Instruction Selection";
		}
		bool runOnMachineFunction(MachineFunction &MF) override; 
	protected:
		SDNode *getGlobalBaseReg();
		/// Keep a pointer to the DSPSubtarget around so that we can make the right
		/// decision when generating code for different targets.
		const DSPSubtarget *Subtarget;
	private:
		// Include the pieces autogenerated from the target description.
	#include "DSPGenDAGISel.inc"

		/// getTargetMachine - Return a reference to the TargetMachine, casted
		/// to the target-specific type.
		const DSPTargetMachine &getTargetMachine() {
			return static_cast<const DSPTargetMachine &>(TM);
		}
		/// getInstrInfo - Return a reference to the TargetInstrInfo, casted
		/// to the target-specific type.
		const DSPInstrInfo *getInstrInfo() {
			return getTargetMachine().getInstrInfo();
		}
		SDNode *Select(SDNode *N) override;
	
		virtual std::pair<bool, SDNode*> selectNode(SDNode *Node) = 0;
		
		// Complex Pattern.
		bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);
		// getImm - Return a target constant with the specified value.
		inline SDValue getImm(const SDNode *Node, unsigned Imm) {
			return CurDAG->getTargetConstant(Imm, Node->getValueType(0));
		}
		virtual void processFunctionAfterISel(MachineFunction &MF) = 0;
	};
	/// createDSPISelDag - This pass converts a legalized DAG into a
	/// DSP-specific DAG, ready for instruction scheduling.
	FunctionPass *createDSPISelDag(DSPTargetMachine &TM);
}
#endif

		
